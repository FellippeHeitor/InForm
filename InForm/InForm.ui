'InForm - GUI system for QB64
'Fellippe Heitor, 2016 - fellippe@qb64.org - @fellippeheitor
'

CONST __UI_Version = "Beta version 3"

DECLARE LIBRARY
    FUNCTION __UI_GetPID ALIAS getpid ()
END DECLARE

DECLARE CUSTOMTYPE LIBRARY
    SUB __UI_MemCopy ALIAS memcpy (BYVAL dest AS _OFFSET, BYVAL source AS _OFFSET, BYVAL bytes AS LONG)
END DECLARE

DECLARE LIBRARY "falcon"
    SUB uprint_extra (BYVAL x&, BYVAL y&, BYVAL chars%&, BYVAL length%&, BYVAL kern&, BYVAL do_render&, txt_width&, BYVAL charpos%&, charcount&, BYVAL colour~&, BYVAL max_width&)
    FUNCTION uprint (BYVAL x&, BYVAL y&, chars$, BYVAL txt_len&, BYVAL colour~&, BYVAL max_width&)
    FUNCTION uprintwidth (chars$, BYVAL txt_len&, BYVAL max_width&)
    FUNCTION uheight& ()
    FUNCTION falcon_uspacing& ALIAS uspacing ()
    FUNCTION uascension& ()
END DECLARE

$IF WIN THEN
    DECLARE LIBRARY
        FUNCTION __UI_MB& ALIAS MessageBox (BYVAL ignore&, message$, title$, BYVAL type&)
        FUNCTION GetSystemMetrics& (BYVAL WhichMetric&)
    END DECLARE

    CONST __UI_SM_SWAPBUTTON = 23
$ELSE
    DECLARE LIBRARY ""
    FUNCTION __UI_MB& ALIAS MessageBox (BYVAL ignore&, message$, title$, BYVAL type&)
    END DECLARE
$END IF

$SCREENHIDE
_CONTROLCHR OFF

TYPE __UI_ControlTYPE
    ID AS LONG
    ParentID AS LONG
    PreviousParentID AS LONG
    ContextMenuID AS LONG
    Type AS INTEGER
    Name AS STRING * 40
    ParentName AS STRING * 40
    Top AS INTEGER
    Left AS INTEGER
    Width AS INTEGER
    Height AS INTEGER
    Canvas AS LONG
    HelperCanvas AS LONG
    TransparentColor AS _UNSIGNED LONG
    Stretch AS _BYTE
    PreviousStretch AS _BYTE
    Font AS INTEGER
    BackColor AS _UNSIGNED LONG
    ForeColor AS _UNSIGNED LONG
    SelectedForeColor AS _UNSIGNED LONG
    SelectedBackColor AS _UNSIGNED LONG
    BackStyle AS _BYTE
    HasBorder AS _BYTE
    Padding AS INTEGER
    Encoding AS LONG
    Align AS _BYTE
    VAlign AS _BYTE
    BorderColor AS _UNSIGNED LONG
    Value AS _FLOAT
    PreviousValue AS _FLOAT
    Min AS _FLOAT
    Max AS _FLOAT
    Interval AS _FLOAT
    HotKey AS INTEGER
    HotKeyOffset AS INTEGER
    HotKeyPosition AS INTEGER
    ShowPercentage AS _BYTE
    InputViewStart AS LONG
    PreviousInputViewStart AS LONG
    LastVisibleItem AS INTEGER
    HasVScrollbar AS _BYTE
    VScrollbarButton2Top AS INTEGER
    HoveringVScrollbarButton AS _BYTE
    ThumbHeight AS INTEGER
    ThumbTop AS INTEGER
    VScrollbarRatio AS SINGLE
    Cursor AS LONG
    PasswordField AS _BYTE
    PrevCursor AS LONG
    FieldArea AS LONG
    PreviousFieldArea AS LONG
    TextIsSelected AS _BYTE
    Multiline AS _BYTE
    FirstVisibleLine AS LONG
    PrevFirstVisibleLine AS LONG
    CurrentLine AS LONG
    PrevCurrentLine AS LONG
    VisibleCursor AS LONG
    PrevVisibleCursor AS LONG
    ControlIsSelected AS _BYTE
    LeftOffsetFromFirstSelected AS INTEGER
    TopOffsetFromFirstSelected AS INTEGER
    SelectionLength AS LONG
    SelectionStart AS LONG
    WordWrap AS _BYTE
    CanResize AS _BYTE
    CanHaveFocus AS _BYTE
    Disabled AS _BYTE
    Hidden AS _BYTE
    CenteredWindow AS _BYTE
    ControlState AS _BYTE
    ChildrenRedrawn AS _BYTE
    FocusState AS LONG
END TYPE

TYPE __UI_Types
    Name AS STRING * 16
    Count AS LONG
END TYPE

TYPE __UI_ThemeImagesType
    FileName AS STRING * 32
    Handle AS LONG
END TYPE

TYPE __UI_WordWrapHistoryType
    StringSlot AS LONG
    Width AS INTEGER
    Font AS LONG
    TotalLines AS INTEGER
END TYPE

REDIM SHARED Caption(1 TO 100) AS STRING
REDIM SHARED __UI_TempCaptions(1 TO 100) AS STRING
REDIM SHARED Text(1 TO 100) AS STRING
REDIM SHARED __UI_TempTexts(1 TO 100) AS STRING
REDIM SHARED Mask(1 TO 100) AS STRING
REDIM SHARED __UI_TempMask(1 TO 100) AS STRING
REDIM SHARED ToolTip(0 TO 100) AS STRING
REDIM SHARED __UI_TempTips(1 TO 100) AS STRING
REDIM SHARED Control(0 TO 100) AS __UI_ControlTYPE
REDIM SHARED __UI_ThemeImages(0 TO 100) AS __UI_ThemeImagesType
REDIM SHARED __UI_WordWrapHistoryTexts(1 TO 100) AS STRING
REDIM SHARED __UI_WordWrapHistoryResults(1 TO 100) AS STRING
REDIM SHARED __UI_WordWrapHistory(1 TO 100) AS __UI_WordWrapHistoryType
REDIM SHARED __UI_ThisLineChars(0) AS LONG

DIM SHARED __UI_MouseLeft AS INTEGER, __UI_MouseTop AS INTEGER
DIM SHARED __UI_MouseWheel AS INTEGER, __UI_MouseButtonsSwap AS _BYTE
DIM SHARED __UI_PrevMouseLeft AS INTEGER, __UI_PrevMouseTop AS INTEGER
DIM SHARED __UI_MouseButton1 AS _BYTE, __UI_MouseButton2 AS _BYTE
DIM SHARED __UI_MouseIsDown AS _BYTE, __UI_MouseDownOnID AS LONG
DIM SHARED __UI_Mouse2IsDown AS _BYTE, __UI_Mouse2DownOnID AS LONG
DIM SHARED __UI_KeyIsDown AS _BYTE, __UI_KeyDownOnID AS LONG
DIM SHARED __UI_ShiftIsDown AS _BYTE, __UI_CtrlIsDown AS _BYTE
DIM SHARED __UI_AltIsDown AS _BYTE, __UI_ShowHotKeys AS _BYTE, __UI_AltCombo$
DIM SHARED __UI_LastMouseClick AS DOUBLE, __UI_MouseDownOnScrollbar AS DOUBLE
DIM SHARED __UI_DragX AS INTEGER, __UI_DragY AS INTEGER
DIM SHARED __UI_DefaultButtonID AS LONG
DIM SHARED __UI_KeyHit AS LONG
DIM SHARED __UI_Focus AS LONG, __UI_PreviousFocus AS LONG, __UI_KeyboardFocus AS _BYTE
DIM SHARED __UI_HoveringID AS LONG, __UI_LastHoveringID AS LONG, __UI_BelowHoveringID AS LONG
DIM SHARED __UI_IsDragging AS _BYTE, __UI_DraggingID AS LONG
DIM SHARED __UI_IsResizing AS _BYTE, __UI_ResizingID AS LONG
DIM SHARED __UI_ResizeHandleHover AS _BYTE
DIM SHARED __UI_IsSelectingText AS _BYTE, __UI_IsSelectingTextOnID AS LONG
DIM SHARED __UI_SelectedText AS STRING, __UI_SelectionLength AS LONG
DIM SHARED __UI_StateHasChanged AS _BYTE
DIM SHARED __UI_DraggingThumb AS _BYTE, __UI_ThumbDragTop AS INTEGER
DIM SHARED __UI_DraggingThumbOnID AS LONG
DIM SHARED __UI_HasInput AS _BYTE, __UI_LastInputReceived AS DOUBLE
DIM SHARED __UI_UnloadSignal AS _BYTE
DIM SHARED __UI_ExitTriggered AS _BYTE
DIM SHARED __UI_Loaded AS _BYTE
DIM SHARED __UI_EventsTimer AS INTEGER, __UI_RefreshTimer AS INTEGER
DIM SHARED __UI_ActiveDropdownList AS LONG, __UI_ParentDropdownList AS LONG
DIM SHARED __UI_ActiveMenu AS LONG, __UI_ParentMenu AS LONG, __UI_ActiveMenuIsContextMenu AS _BYTE
DIM SHARED __UI_ActiveTipID AS LONG, __UI_TipTimer AS DOUBLE, __UI_PreviousTipID AS LONG
DIM SHARED __UI_ActiveTipTop AS INTEGER, __UI_ActiveTipLeft AS INTEGER
DIM SHARED __UI_FormID AS LONG, __UI_HasMenuBar AS LONG
DIM SHARED __UI_ScrollbarWidth AS INTEGER, __UI_ScrollbarButtonHeight AS INTEGER
DIM SHARED __UI_MenuBarOffset AS INTEGER, __UI_MenuItemOffset AS INTEGER
DIM SHARED __UI_NewMenuBarTextLeft AS INTEGER
DIM SHARED __UI_ForceRedraw AS _BYTE, __UI_AutoRefresh AS _BYTE
DIM SHARED __UI_CurrentTitle AS STRING, __UI_WindowHandle AS LONG
DIM SHARED __UI_DesignMode AS _BYTE, __UI_FirstSelectedID AS LONG
DIM SHARED __UI_WaitMessage AS STRING, __UI_TotalSelectedControls AS LONG
DIM SHARED __UI_WaitMessageHandle AS LONG
DIM SHARED __UI_LastRenderedLineWidth AS LONG, __UI_LastRenderedCharCount AS LONG
DIM SHARED __UI_SelectionRectangleTop AS INTEGER, __UI_SelectionRectangleLeft AS INTEGER
DIM SHARED __UI_SelectionRectangle AS _BYTE, __UI_DesignModeAlignCommand AS INTEGER
DIM SHARED __UI_CantShowContextMenu AS _BYTE, __UI_ShowPositionAndSize AS _BYTE
DIM SHARED __UI_Snapped AS _BYTE
DIM SHARED __UI_SnappedX AS INTEGER, __UI_SnappedY AS INTEGER
DIM SHARED __UI_SnappedXID AS LONG, __UI_SnappedYID AS LONG
DIM SHARED __UI_SnapLines AS _BYTE

'Control types:
DIM SHARED __UI_Type(0 TO 17) AS __UI_Types
CONST __UI_Type_Form = 1: __UI_Type(1).Name = "Form"
CONST __UI_Type_Frame = 2: __UI_Type(2).Name = "Frame"
CONST __UI_Type_Button = 3: __UI_Type(3).Name = "Button"
CONST __UI_Type_Label = 4: __UI_Type(4).Name = "Label"
CONST __UI_Type_CheckBox = 5: __UI_Type(5).Name = "CheckBox"
CONST __UI_Type_RadioButton = 6: __UI_Type(6).Name = "RadioButton"
CONST __UI_Type_TextBox = 7: __UI_Type(7).Name = "TextBox"
CONST __UI_Type_ProgressBar = 8: __UI_Type(8).Name = "ProgressBar"
CONST __UI_Type_ListBox = 9: __UI_Type(9).Name = "ListBox"
CONST __UI_Type_DropdownList = 10: __UI_Type(10).Name = "DropdownList"
CONST __UI_Type_MenuBar = 11: __UI_Type(11).Name = "MenuBar"
CONST __UI_Type_MenuItem = 12: __UI_Type(12).Name = "MenuItem"
CONST __UI_Type_MenuPanel = 13: __UI_Type(13).Name = "MenuPanel"
CONST __UI_Type_PictureBox = 14: __UI_Type(14).Name = "PictureBox"
CONST __UI_Type_TrackBar = 15: __UI_Type(15).Name = "TrackBar"
CONST __UI_Type_ContextMenu = 16: __UI_Type(16).Name = "ContextMenuPanel"
CONST __UI_Type_Font = 17: __UI_Type(17).Name = "Font"

'Back styles:
CONST __UI_Opaque = 0
CONST __UI_Transparent = -1

'Text alignment
CONST __UI_Left = 0
CONST __UI_Center = 1
CONST __UI_Right = 2
CONST __UI_Top = 0
CONST __UI_Middle = 1
CONST __UI_Bottom = 2

'Messagebox constants
CONST MsgBox_OkOnly = 0
CONST MsgBox_OkCancel = 1
CONST MsgBox_AbortRetryIgnore = 2
CONST MsgBox_YesNoCancel = 3
CONST MsgBox_YesNo = 4
CONST MsgBox_RetryCancel = 5
CONST MsgBox_CancelTryagainContinue = 6

CONST MsgBox_Critical = 16
CONST MsgBox_Question = 32
CONST MsgBox_Exclamation = 48
CONST MsgBox_Information = 64

CONST MsgBox_DefaultButton1 = 0
CONST MsgBox_DefaultButton2 = 256
CONST MsgBox_DefaultButton3 = 512
CONST MsgBox_Defaultbutton4 = 768

CONST MsgBox_AppModal = 0
CONST MsgBox_SystemModal = 4096
CONST MsgBox_SetForeground = 65536

CONST MsgBox_Ok = 1
CONST MsgBox_Cancel = 2
CONST MsgBox_Abort = 3
CONST MsgBox_Retry = 4
CONST MsgBox_Ignore = 5
CONST MsgBox_Yes = 6
CONST MsgBox_No = 7
CONST MsgBox_Tryagain = 10
CONST MsgBox_Continue = 11

'General constants
CONST __UI_ToolTipTimeOut = .8

'Global constants
CONST True = -1
CONST False = 0

'ON ERROR GOTO __UI_ErrorHandler

__UI_ThemeSetup
__UI_InternalMenus
__UI_LoadForm

__UI_Init

'Main loop
DO
    _LIMIT 1
LOOP

SYSTEM
__UI_ErrorHandler:
RESUME NEXT

'---------------------------------------------------------------------------------
FUNCTION uspacing&
    IF _FONT <> 8 THEN
        uspacing& = falcon_uspacing&
    ELSE
        uspacing& = falcon_uspacing& + 3
    END IF
END FUNCTION

'---------------------------------------------------------------------------------
SUB __UI_InternalMenus
    'Internal "design mode" context menu. -------------------------------------------
    DIM __UI_NewID AS LONG
    __UI_NewID = __UI_NewControl(__UI_Type_ContextMenu, "__UI_PreviewMenu", 0, 0, 0, 0, 0)
    Control(__UI_NewID).Font = SetFont("segoeui.ttf",12,"")

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuAlignLeft", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuAlignLeft"), "Align &Left"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuAlignRight", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuAlignRight"), "Align &Right"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuAlignTops", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuAlignTops"), "Align T&op"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuAlignBottoms", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuAlignBottoms"), "Align &Bottom-"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuAlignCentersV", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuAlignCentersV"), "Align cent&ers Vertically"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuAlignCentersH", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuAlignCentersH"), "Ali&gn centers Horizontally"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuAlignCenterV", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuAlignCenterV"), "Center &Vertically (group)"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuAlignCenterH", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuAlignCenterH"), "Center &Horizontally (group)-"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuDistributeV", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuDistributeV"), "Distribute Ver&tically"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuDistributeH", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuDistributeH"), "Distribute Hori&zontally-"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuCopy", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuCopy"), "&Copy"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuPaste", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuPaste"), "&Paste"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuDelete", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuDelete"), "&Delete-"

    __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_PreviewMenuSelect", 0, 0, 0, 0, __UI_GetID("__UI_PreviewMenu"))
    SetCaption __UI_GetID("__UI_PreviewMenuSelect"), "Select &All"
END SUB

'---------------------------------------------------------------------------------
SUB __UI_Init
    DIM i AS LONG

    __UI_BeforeInit

    IF __UI_FormID = 0 THEN SYSTEM

    SCREEN _NEWIMAGE(Control(__UI_FormID).Width, Control(__UI_FormID).Height, 32)
    _DELAY .1
    _SCREENSHOW

    _DELAY .1
    _ICON
    IF Control(__UI_FormID).CenteredWindow THEN _SCREENMOVE _MIDDLE

    IF Control(__UI_FormID).Font = 0 THEN Control(__UI_FormID).Font = SetFont("", 8, "")

    IF Caption(__UI_FormID) = "" THEN Caption(__UI_FormID) = RTRIM$(Control(__UI_FormID).Name)

    IF NOT __UI_DesignMode THEN
        'Internal "text field" context menus. -------------------------------------------
        DIM __UI_NewID AS LONG
        __UI_NewID = __UI_NewControl(__UI_Type_ContextMenu, "__UI_TextFieldMenu", 0, 0, 0, 0, 0)

        FOR i = 1 TO UBOUND(Control)
            IF Control(i).Type = __UI_Type_TextBox AND Control(i).ContextMenuID = 0 THEN
                Control(i).ContextMenuID = __UI_NewID
            END IF
        NEXT

        __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_TextMenuCut", 0, 0, 0, 0, __UI_GetID("__UI_TextFieldMenu"))
        SetCaption __UI_GetID("__UI_TextMenuCut"), "Cu&t"

        __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_TextMenuCopy", 0, 0, 0, 0, __UI_GetID("__UI_TextFieldMenu"))
        SetCaption __UI_GetID("__UI_TextMenuCopy"), "&Copy"

        __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_TextMenuPaste", 0, 0, 0, 0, __UI_GetID("__UI_TextFieldMenu"))
        SetCaption __UI_GetID("__UI_TextMenuPaste"), "&Paste"

        __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_TextMenuDelete", 0, 0, 0, 0, __UI_GetID("__UI_TextFieldMenu"))
        SetCaption __UI_GetID("__UI_TextMenuDelete"), "&Delete-"

        __UI_NewID = __UI_NewControl(__UI_Type_MenuItem, "__UI_TextMenuSelect", 0, 0, 0, 0, __UI_GetID("__UI_TextFieldMenu"))
        SetCaption __UI_GetID("__UI_TextMenuSelect"), "Select &all"
    END IF

    _DISPLAYORDER _SOFTWARE, _HARDWARE
    _DISPLAY

    __UI_AssignIDs
    __UI_OnLoad

    __UI_EventsTimer = _FREETIMER
    __UI_RefreshTimer = _FREETIMER
    ON TIMER(__UI_EventsTimer, .008) __UI_DoEvents
    ON TIMER(__UI_RefreshTimer, .03) __UI_UpdateDisplay
    TIMER(__UI_EventsTimer) ON
    TIMER(__UI_RefreshTimer) ON

    __UI_AutoRefresh = True
    __UI_Loaded = True
END SUB

'---------------------------------------------------------------------------------
'Internal procedures: ------------------------------------------------------------
'---------------------------------------------------------------------------------
FUNCTION __UI_GetProperMouseButton%%(Which%%)
        $IF WIN THEN
        IF GetSystemMetrics(__UI_SM_SWAPBUTTON) = 0 THEN
            __UI_GetProperMouseButton%% = _MOUSEBUTTON(Which%%)
        ELSE
            IF Which%% = 1 THEN
                __UI_GetProperMouseButton%% = _MOUSEBUTTON(2)
            ELSEIF Which%% = 2 THEN
                __UI_GetProperMouseButton%% = _MOUSEBUTTON(1)
            END IF
        END IF
        $ELSE
            IF __UI_MouseButtonsSwap THEN
                IF Which%% = 1 THEN
                    __UI_GetProperMouseButton%% = _MOUSEBUTTON(2)
                ELSEIF Which%% = 2 THEN
                    __UI_GetProperMouseButton%% = _MOUSEBUTTON(1)
                END IF
            ELSE
                __UI_GetProperMouseButton%% = _MOUSEBUTTON(Which%%)
            END IF
        $END IF
END FUNCTION

SUB __UI_ProcessInput
    DIM OldScreen&, i AS LONG
    DIM ContainerOffsetTop AS INTEGER, ContainerOffsetLeft AS INTEGER
    STATIC __UI_CurrentResizeStatus AS _BYTE, __UI_CurrentBackColor AS _UNSIGNED LONG

    __UI_HasInput = False

    __UI_ExitTriggered = _EXIT
    IF __UI_ExitTriggered AND 1 THEN __UI_ExitTriggered = True: __UI_HasInput = True

    IF _SCREENX = -32000 AND _SCREENY = -32000 THEN
        'Window was minimized
        EXIT SUB
    END IF

    'Mouse input (optimization kindly provided by Luke Ceddia):
    __UI_MouseWheel = 0
    IF __UI_MouseIsDown THEN __UI_HasInput = True
    IF _MOUSEINPUT THEN
        __UI_HasInput = True
        __UI_MouseWheel = __UI_MouseWheel + _MOUSEWHEEL
        IF __UI_GetProperMouseButton%%(1) = __UI_MouseButton1 AND __UI_GetProperMouseButton%%(2) = __UI_MouseButton2 THEN
            DO WHILE _MOUSEINPUT
                __UI_MouseWheel = __UI_MouseWheel + _MOUSEWHEEL
                IF NOT (__UI_GetProperMouseButton%%(1) = __UI_MouseButton1 AND __UI_GetProperMouseButton%%(2) = __UI_MouseButton2) THEN EXIT DO
            LOOP
        END IF
        __UI_MouseButton1 = __UI_GetProperMouseButton%%(1)
        __UI_MouseButton2 = __UI_GetProperMouseButton%%(2)
        __UI_MouseLeft = _MOUSEX
        __UI_MouseTop = _MOUSEY
    END IF

    'Hover detection
    IF __UI_PrevMouseLeft <> __UI_MouseLeft OR __UI_PrevMouseTop <> __UI_MouseTop THEN
        __UI_PrevMouseLeft = __UI_MouseLeft
        __UI_PrevMouseTop = __UI_MouseTop
        DIM TempHover AS LONG
        __UI_BelowHoveringID = 0
        FOR i = 1 TO UBOUND(Control)
            IF Control(i).ID AND Control(i).Type <> __UI_Type_MenuItem AND ((Control(i).Hidden = False AND __UI_DesignMode = False) OR (__UI_DesignMode = True)) THEN
                Control(i).HoveringVScrollbarButton = 0
                IF Control(i).ParentID > 0 THEN
                    ContainerOffsetTop = Control(Control(i).ParentID).Top
                    ContainerOffsetLeft = Control(Control(i).ParentID).Left
                    'First make sure the mouse is inside the container:
                    IF __UI_MouseLeft >= ContainerOffsetLeft AND __UI_MouseLeft <= ContainerOffsetLeft + Control(Control(i).ParentID).Width - 1 AND __UI_MouseTop >= ContainerOffsetTop AND __UI_MouseTop <= ContainerOffsetTop + Control(Control(i).ParentID).Height - 1 THEN
                        'We're in. Now check for individual control:
                        IF __UI_MouseLeft >= ContainerOffsetLeft + Control(i).Left AND __UI_MouseLeft <= ContainerOffsetLeft + Control(i).Left + Control(i).Width - 1 AND __UI_MouseTop >= ContainerOffsetTop + Control(i).Top AND __UI_MouseTop <= ContainerOffsetTop + Control(i).Top + Control(i).Height - 1 THEN
                            __UI_BelowHoveringID = TempHover
                            TempHover = Control(i).ID
                            IF Control(i).HasVScrollbar AND __UI_IsDragging = False THEN
                                IF __UI_MouseLeft >= ContainerOffsetLeft + Control(i).Left + Control(i).Width - __UI_ScrollbarWidth THEN
                                    IF __UI_MouseTop <= Control(i).Top + ContainerOffsetTop + __UI_ScrollbarButtonHeight AND __UI_DraggingThumb = False THEN
                                        'Hovering "up" button
                                        Control(i).HoveringVScrollbarButton = 1
                                        Control(i).PreviousInputViewStart = 0
                                    ELSEIF __UI_MouseTop >= Control(i).Top + ContainerOffsetTop + Control(i).Height - __UI_ScrollbarButtonHeight AND __UI_DraggingThumb = False THEN
                                        'Hovering "down" button
                                        Control(i).HoveringVScrollbarButton = 2
                                        Control(i).PreviousInputViewStart = 0
                                    ELSEIF __UI_MouseTop >= ContainerOffsetTop + Control(i).ThumbTop AND __UI_MouseTop <= ContainerOffsetTop + Control(i).ThumbTop + Control(i).ThumbHeight THEN
                                        'Hovering the thumb
                                        Control(i).HoveringVScrollbarButton = 3
                                        Control(i).PreviousInputViewStart = 0
                                    ELSE
                                        'Hovering the track
                                        IF __UI_MouseTop < ContainerOffsetTop + Control(i).ThumbTop THEN
                                            'Above the thumb
                                            Control(i).HoveringVScrollbarButton = 4
                                        ELSE
                                            'Below the thumb
                                            Control(i).HoveringVScrollbarButton = 5
                                        END IF
                                        Control(i).PreviousInputViewStart = 0
                                    END IF
                                END IF
                            END IF
                        END IF
                    END IF
                ELSE
                    ContainerOffsetTop = 0
                    ContainerOffsetLeft = 0

                    IF __UI_MouseLeft >= Control(i).Left AND __UI_MouseLeft <= Control(i).Left + Control(i).Width - 1 AND __UI_MouseTop >= Control(i).Top AND __UI_MouseTop <= Control(i).Top + Control(i).Height - 1 THEN
                        __UI_BelowHoveringID = TempHover
                        TempHover = Control(i).ID

                        IF Control(i).HasVScrollbar AND __UI_IsDragging = False THEN
                            IF __UI_MouseLeft >= ContainerOffsetLeft + Control(i).Left + Control(i).Width - __UI_ScrollbarWidth THEN
                                IF __UI_MouseTop <= Control(i).Top + ContainerOffsetTop + __UI_ScrollbarButtonHeight AND __UI_DraggingThumb = False THEN
                                    'Hovering "up" button
                                    Control(i).HoveringVScrollbarButton = 1
                                    Control(i).PreviousInputViewStart = 0
                                ELSEIF __UI_MouseTop >= Control(i).Top + ContainerOffsetTop + Control(i).Height - __UI_ScrollbarButtonHeight AND __UI_DraggingThumb = False THEN
                                    'Hovering "down" button
                                    Control(i).HoveringVScrollbarButton = 2
                                    Control(i).PreviousInputViewStart = 0
                                ELSEIF __UI_MouseTop >= ContainerOffsetTop + Control(i).ThumbTop AND __UI_MouseTop <= ContainerOffsetTop + Control(i).ThumbTop + Control(i).ThumbHeight THEN
                                    'Hovering the thumb
                                    Control(i).HoveringVScrollbarButton = 3
                                    Control(i).PreviousInputViewStart = 0
                                ELSE
                                    'Hovering the track
                                    IF __UI_MouseTop < ContainerOffsetTop + Control(i).ThumbTop THEN
                                        'Above the thumb
                                        Control(i).HoveringVScrollbarButton = 4
                                        Control(i).PreviousInputViewStart = 0
                                    ELSE
                                        'Below the thumb
                                        Control(i).HoveringVScrollbarButton = 5
                                        Control(i).PreviousInputViewStart = 0
                                    END IF
                                END IF
                            END IF
                        END IF
                    END IF
                END IF
            END IF
        NEXT

        IF __UI_ActiveMenu > 0 THEN
            IF Control(TempHover).Type = __UI_Type_MenuPanel THEN
                'For an active menu, we'll detect individual menu items being hovered
                _FONT Control(TempHover).Font
                FOR i = 1 TO UBOUND(Control)
                    IF Control(i).ParentID = __UI_ParentMenu AND Control(i).Hidden = False THEN
                        IF __UI_MouseTop >= Control(__UI_ActiveMenu).Top + Control(i).Top AND __UI_MouseTop <= Control(__UI_ActiveMenu).Top + Control(i).Top + Control(i).Height - 1 THEN
                            TempHover = Control(i).ID
                            __UI_Focus = Control(i).ID
                            Control(__UI_ActiveMenu).Value = __UI_Focus
                            EXIT FOR 'as no menu items will overlap
                        END IF
                    END IF
                NEXT
            END IF
        END IF

        __UI_HoveringID = TempHover

        IF Control(__UI_HoveringID).Type = __UI_Type_Frame AND Control(__UI_BelowHoveringID).ParentID = Control(__UI_HoveringID).ID THEN
            'If a control was created before its container, the following line
            'will allow it to be properly hovered/focused/selected.
            SWAP __UI_HoveringID, __UI_BelowHoveringID
        END IF

        'Design mode specific hover:
        IF __UI_DesignMode AND __UI_IsResizing = False AND __UI_IsDragging = False THEN
            __UI_ResizeHandleHover = 0
            IF Control(__UI_HoveringID).ControlIsSelected AND Control(__UI_HoveringID).Type <> __UI_Type_MenuBar AND Control(__UI_HoveringID).Type <> __UI_Type_MenuItem THEN
                IF __UI_MouseLeft >= Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left + Control(__UI_HoveringID).Width - 8 AND __UI_MouseTop >= Control(__UI_HoveringID).Top + Control(Control(__UI_HoveringID).ParentID).Top + Control(__UI_HoveringID).Height / 2 - 4 AND __UI_MouseTop <= Control(__UI_HoveringID).Top + Control(Control(__UI_HoveringID).ParentID).Top + Control(__UI_HoveringID).Height / 2 + 4 THEN
                    __UI_ResizeHandleHover = 1 'Right
                ELSEIF __UI_MouseLeft >= Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left + Control(__UI_HoveringID).Width / 2 - 4 AND __UI_MouseLeft <= Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left + Control(__UI_HoveringID).Width / 2 + 4 AND __UI_MouseTop >= Control(__UI_HoveringID).Top + Control(Control(__UI_HoveringID).ParentID).Top + Control(__UI_HoveringID).Height / 2 - 4 AND __UI_MouseTop >= Control(__UI_HoveringID).Top + Control(Control(__UI_HoveringID).ParentID).Top + Control(__UI_HoveringID).Height - 8 THEN
                    __UI_ResizeHandleHover = 2 'Bottom
                ELSEIF __UI_MouseLeft <= Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left + 8 AND __UI_MouseTop >= Control(__UI_HoveringID).Top + Control(Control(__UI_HoveringID).ParentID).Top + Control(__UI_HoveringID).Height / 2 - 4 AND __UI_MouseTop <= Control(__UI_HoveringID).Top + Control(Control(__UI_HoveringID).ParentID).Top + Control(__UI_HoveringID).Height / 2 + 4 THEN
                    __UI_ResizeHandleHover = 3 'Left
                ELSEIF __UI_MouseLeft >= Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left + Control(__UI_HoveringID).Width / 2 - 4 AND __UI_MouseLeft <= Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left + Control(__UI_HoveringID).Width / 2 + 4 AND __UI_MouseTop <= Control(__UI_HoveringID).Top + Control(Control(__UI_HoveringID).ParentID).Top + 8 THEN
                    __UI_ResizeHandleHover = 4 'Top
                ELSEIF __UI_MouseLeft >= Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left + Control(__UI_HoveringID).Width - 8 AND __UI_MouseTop <= Control(__UI_HoveringID).Top + Control(Control(__UI_HoveringID).ParentID).Top + 8 THEN
                    __UI_ResizeHandleHover = 5 'Top-right
                ELSEIF __UI_MouseLeft <= Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left + 8 AND __UI_MouseTop <= Control(__UI_HoveringID).Top + Control(Control(__UI_HoveringID).ParentID).Top + 8 THEN
                    __UI_ResizeHandleHover = 6 'Top-left
                ELSEIF __UI_MouseLeft >= Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left + Control(__UI_HoveringID).Width - 8 AND __UI_MouseTop >= Control(__UI_HoveringID).Top + Control(Control(__UI_HoveringID).ParentID).Top + Control(__UI_HoveringID).Height - 8 THEN
                    __UI_ResizeHandleHover = 7 'Bottom-right
                ELSEIF __UI_MouseLeft <= Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left + 8 AND __UI_MouseTop >= Control(__UI_HoveringID).Top + Control(Control(__UI_HoveringID).ParentID).Top + Control(__UI_HoveringID).Height - 8 THEN
                    __UI_ResizeHandleHover = 8 'Bottom-left
                END IF
            END IF
        END IF

        IF Control(__UI_Focus).Type = __UI_Type_MenuBar AND Control(__UI_HoveringID).Type = __UI_Type_MenuBar THEN
            IF __UI_ActiveMenu = 0 THEN
                __UI_Focus = __UI_HoveringID
            END IF
        ELSEIF Control(__UI_Focus).Type = __UI_Type_MenuPanel AND Control(__UI_HoveringID).Type = __UI_Type_MenuBar AND __UI_ActiveMenuIsContextMenu = False AND __UI_DesignMode = False THEN
            IF __UI_ParentMenu <> __UI_HoveringID AND NOT Control(__UI_HoveringID).Disabled THEN
                __UI_ActivateMenu Control(__UI_HoveringID), False
                __UI_ForceRedraw = True
            ELSEIF Control(__UI_HoveringID).Disabled THEN
                __UI_DestroyControl Control(__UI_ActiveMenu)
                __UI_Focus = __UI_HoveringID
            END IF
        END IF
    END IF

    'Check if a tooltip must be enabled
    IF __UI_HoveringID <> __UI_LastHoveringID OR __UI_MouseButton1 OR __UI_MouseButton2 THEN
        __UI_TipTimer = TIMER
        __UI_ActiveTipID = 0
    ELSE
        IF __UI_HoveringID <> __UI_ActiveTipID AND __UI_HoveringID > 0 AND NOT __UI_IsDragging THEN
            IF TIMER - __UI_TipTimer >= __UI_ToolTipTimeOut THEN
                IF LEN(ToolTip(__UI_HoveringID)) > 0 THEN
                    __UI_ActiveTipID = __UI_HoveringID
                    __UI_ActiveTipTop = __UI_MouseTop + 16
                    __UI_ActiveTipLeft = __UI_MouseLeft
                END IF
            END IF
        END IF
    END IF

    'Keyboard input:
    __UI_KeyHit = _KEYHIT
    IF __UI_KeyHit THEN __UI_HasInput = True

    'Adjust the Resize Status of this form based on its CanResize property:
    IF Control(__UI_FormID).CanResize <> __UI_CurrentResizeStatus THEN
        __UI_CurrentResizeStatus = Control(__UI_FormID).CanResize
        IF __UI_CurrentResizeStatus THEN
            _RESIZE ON
        ELSE
            _RESIZE OFF
        END IF
    END IF

    'Resize event:
    '(Triggered either programatically or by directly resizing the form):
    DIM CheckResize AS _BYTE
    CheckResize = _RESIZE
    IF (CheckResize AND Control(__UI_FormID).CanResize) OR __UI_CurrentBackColor <> Control(__UI_FormID).BackColor OR Control(__UI_FormID).Width <> _WIDTH(0) OR Control(__UI_FormID).Height <> _HEIGHT(0) THEN
        __UI_AutoRefresh = False
        _DELAY .1
        IF CheckResize THEN
            Control(__UI_FormID).Width = _RESIZEWIDTH
            Control(__UI_FormID).Height = _RESIZEHEIGHT
        END IF
        IF Control(__UI_FormID).Width > 0 AND Control(__UI_FormID).Height > 0 THEN
            __UI_CurrentBackColor = Control(__UI_FormID).BackColor
            OldScreen& = _DEST
            SCREEN _NEWIMAGE(Control(__UI_FormID).Width, Control(__UI_FormID).Height, 32)
            _FREEIMAGE OldScreen&
            'Recreate the main form's canvas
            IF Control(__UI_FormID).Canvas <> 0 THEN _FREEIMAGE Control(__UI_FormID).Canvas
            Control(__UI_FormID).Canvas = _NEWIMAGE(Control(__UI_FormID).Width, Control(__UI_FormID).Height, 32)
            _DEST Control(__UI_FormID).Canvas
            COLOR Control(__UI_FormID).ForeColor, Control(__UI_FormID).BackColor
            CLS
            IF __UI_HasMenuBar = True THEN
                'Add menubar div to main form's canvas
                _FONT Control(__UI_FormID).Font
                LINE (0, uspacing& + 5 + 1)-STEP(Control(__UI_FormID).Width - 1, 0), Darken(Control(__UI_FormID).BackColor, 80)
                LINE (0, uspacing& + 5 + 2)-STEP(Control(__UI_FormID).Width - 1, 0), Darken(Control(__UI_FormID).BackColor, 120)
                __UI_RefreshMenuBar
            END IF
            _DEST 0

            IF LEN(__UI_CurrentTitle) THEN _TITLE __UI_CurrentTitle

            __UI_AutoRefresh = True
            __UI_HasInput = True
        END IF
    END IF

    'Update main window title if needed
    IF __UI_CurrentTitle <> Caption(__UI_FormID) THEN
        __UI_CurrentTitle = Caption(__UI_FormID)
        _TITLE __UI_CurrentTitle
        __UI_HasInput = True
    END IF

    __UI_LastInputReceived = TIMER
END SUB

'---------------------------------------------------------------------------------
SUB __UI_UpdateDisplay
    STATIC GridDrawn AS _BYTE, ActiveTipPanel AS LONG
    DIM i AS LONG, TempCaption$, TempColor~&, PrevDest AS LONG, TempParentID AS LONG
    DIM CaptionIndent AS INTEGER, OverlayisVisible AS _BYTE, OverlayReset AS _BYTE
    DIM ContainerOffsetLeft AS INTEGER, ContainerOffsetTop AS INTEGER
    DIM ControlState AS _BYTE '1 = Normal; 2 = Hover/focus; 3 = Mouse down; 4 = Disabled;

    IF __UI_AutoRefresh = False THEN EXIT SUB

    __UI_BeforeUpdateDisplay

    IF _SCREENX = -32000 AND _SCREENY = -32000 THEN
        'Window was minimized
        EXIT SUB
    END IF

    'ON ERROR GOTO __UI_ErrorHandler

    'Clear frames canvases and count its children;
    FOR i = 1 TO UBOUND(Control)
        IF Control(i).Type = __UI_Type_Frame THEN
            Control(i).Value = 0 'Reset children counter
            IF _WIDTH(Control(i).Canvas) <> Control(i).Width OR _HEIGHT(Control(i).Canvas) <> Control(i).Height THEN
                _FREEIMAGE Control(i).Canvas
                Control(i).Canvas = _NEWIMAGE(Control(i).Width, Control(i).Height, 32)
            END IF
            _DEST Control(i).Canvas
            COLOR , Control(i).BackColor
            CLS
        ELSE
            IF Control(i).ParentID > 0 AND Control(i).Type <> __UI_Type_MenuItem THEN
                'Increase container's children controls counter
                Control(Control(i).ParentID).Value = Control(Control(i).ParentID).Value + 1
            END IF
        END IF
    NEXT

    _DEST 0

    'IF __UI_IsDragging AND __UI_DraggingID > 0 AND __UI_DraggingID <> __UI_FormID THEN
    '    'Draw the alignment grid
    '    DIM GridX AS INTEGER, GridY AS INTEGER

    '    IF Control(__UI_DraggingID).ParentID > 0 AND Control(__UI_DraggingID).Type <> __UI_Type_MenuItem THEN
    '        _DEST Control(Control(__UI_DraggingID).ParentID).Canvas
    '        FOR GridX = 0 TO Control(Control(__UI_DraggingID).ParentID).Width STEP 10
    '            FOR GridY = 0 TO Control(Control(__UI_DraggingID).ParentID).Height STEP 10
    '                PSET (GridX, GridY), Control(Control(__UI_DraggingID).ParentID).ForeColor
    '            NEXT
    '        NEXT
    '    ELSE
    '        IF NOT GridDrawn THEN
    '            'Draw grid onto main window's canvas
    '            GridDrawn = True
    '            'Free the hardware bg image:
    '            _FREEIMAGE Control(__UI_FormID).Canvas
    '            'Create a new software one:
    '            Control(__UI_FormID).Canvas = _NEWIMAGE(Control(__UI_FormID).Width, Control(__UI_FormID).Height, 32)
    '            'Draw on it:
    '            _DEST Control(__UI_FormID).Canvas
    '            COLOR Control(__UI_FormID).ForeColor, Control(__UI_FormID).BackColor
    '            CLS
    '            FOR GridX = 0 TO Control(__UI_FormID).Width STEP 10
    '                FOR GridY = 0 TO Control(__UI_FormID).Height STEP 10
    '                    PSET (GridX, GridY), Control(__UI_FormID).ForeColor
    '                NEXT
    '            NEXT
    '            'Make it a hardware version of itself:
    '            _DEST 0
    '        END IF
    '    END IF
    '    _DEST 0
    'END IF

    IF (GridDrawn AND NOT __UI_IsDragging) OR (GridDrawn AND Control(__UI_DraggingID).ParentID > 0) OR __UI_ForceRedraw THEN
        'Restore main window hardware bg
        GridDrawn = False
        'Free the hardware bg image:
        _FREEIMAGE Control(__UI_FormID).Canvas
        'Create a new software one:
        Control(__UI_FormID).Canvas = _NEWIMAGE(Control(__UI_FormID).Width, Control(__UI_FormID).Height, 32)
        'Draw on it:
        _DEST Control(__UI_FormID).Canvas
        COLOR Control(__UI_FormID).ForeColor, Control(__UI_FormID).BackColor
        CLS
        IF __UI_HasMenuBar THEN
            _FONT Control(__UI_FormID).Font
            LINE (0, uspacing& + 5 + 1)-STEP(Control(__UI_FormID).Width - 1, 0), Darken(Control(__UI_FormID).BackColor, 80)
            LINE (0, uspacing& + 5 + 2)-STEP(Control(__UI_FormID).Width - 1, 0), Darken(Control(__UI_FormID).BackColor, 120)
        END IF
        _DEST 0
    END IF

    'Control drawing
    FOR i = 1 TO UBOUND(Control)
        IF Control(i).ID > 0 AND NOT Control(i).Hidden THEN
            'Direct the drawing to the appropriate canvas (main or container)
            IF Control(i).ParentID > 0 AND Control(i).Type <> __UI_Type_MenuItem THEN
                _DEST Control(Control(i).ParentID).Canvas
            ELSE
                _DEST 0
            END IF

            IF ((__UI_MouseIsDown AND i = __UI_MouseDownOnID) OR (__UI_KeyIsDown AND i = __UI_KeyDownOnID AND __UI_KeyDownOnID = __UI_Focus)) AND NOT Control(i).Disabled THEN
                ControlState = 3
            ELSEIF (i = __UI_HoveringID AND Control(i).Type = __UI_Type_MenuBar) THEN
                ControlState = 2
            ELSEIF (i = __UI_HoveringID AND Control(i).Type <> __UI_Type_MenuBar AND NOT Control(i).Disabled) THEN
                ControlState = 2
            ELSEIF Control(i).Disabled THEN
                ControlState = 4
            ELSE
                ControlState = 1
            END IF

            SELECT CASE Control(i).Type
                CASE __UI_Type_Form
                    'Main window:
                    IF Control(i).Canvas < -1 THEN _PUTIMAGE (0, 0), Control(i).Canvas, 0
                CASE __UI_Type_Button
                    'Buttons
                    __UI_DrawButton Control(i), ControlState
                CASE __UI_Type_Label
                    'Labels
                    __UI_DrawLabel Control(i), ControlState
                CASE __UI_Type_RadioButton
                    'Radio buttons
                    __UI_DrawRadioButton Control(i), ControlState
                CASE __UI_Type_CheckBox
                    'Check boxes
                    __UI_DrawCheckBox Control(i), ControlState
                CASE __UI_Type_ProgressBar
                    'Progress bars
                    __UI_DrawProgressBar Control(i), ControlState
                CASE __UI_Type_TrackBar
                    'Track bars
                    __UI_StateHasChanged = False
                    __UI_DrawTrackBar Control(i), ControlState
                    IF __UI_StateHasChanged THEN __UI_ValueChanged i
                CASE __UI_Type_TextBox
                    'Text boxes
                    'IF Control(i).InputViewStart = 0 THEN Control(i).InputViewStart = 1

                    IF Control(i).TextIsSelected THEN
                        DIM s1 AS LONG, s2 AS LONG
                        DIM ss1 AS LONG, ss2 AS LONG

                        s1 = Control(i).SelectionStart
                        s2 = Control(i).Cursor
                        IF s1 > s2 THEN
                            SWAP s1, s2
                            IF Control(i).InputViewStart > 1 THEN
                                ss1 = s1 - Control(i).InputViewStart + 1
                            ELSE
                                ss1 = s1
                            END IF
                            ss2 = s2 - s1
                            IF ss1 + ss2 > Control(__UI_Focus).FieldArea THEN ss2 = Control(__UI_Focus).FieldArea - ss1
                        ELSE
                            ss1 = s1
                            ss2 = s2 - s1
                            IF ss1 < Control(i).InputViewStart THEN ss1 = 0: ss2 = s2 - Control(i).InputViewStart + 1
                            IF ss1 > Control(i).InputViewStart THEN ss1 = ss1 - Control(i).InputViewStart + 1: ss2 = s2 - s1
                        END IF

                        __UI_SelectedText = MID$(Text(i), s1 + 1, s2 - s1)
                        __UI_SelectionLength = LEN(__UI_SelectedText)
                    END IF

                    __UI_StateHasChanged = False
                    __UI_DrawTextBox Control(i), ControlState, ss1, ss2
                    IF __UI_StateHasChanged THEN __UI_TextChanged i
                CASE __UI_Type_ListBox
                    'List boxes
                    IF Control(i).InputViewStart <= 0 THEN Control(i).InputViewStart = 1

                    __UI_DrawListBox Control(i), ControlState
                CASE __UI_Type_DropdownList
                    'Dropdown lists
                    IF Control(i).Value = 0 THEN Control(i).Value = 1

                    __UI_DrawDropdownList Control(i), ControlState
                CASE __UI_Type_MenuBar
                    __UI_DrawMenuBar Control(i), ControlState
                CASE __UI_Type_PictureBox
                    __UI_DrawPictureBox Control(i), ControlState
            END SELECT
        END IF

        IF __UI_Snapped THEN
            IF OverlayReset = False THEN
                'Reset the helper canvas of the main form
                OverlayReset = True
                IF Control(__UI_FormID).HelperCanvas <> 0 THEN _FREEIMAGE Control(__UI_FormID).HelperCanvas
                Control(__UI_FormID).HelperCanvas = _NEWIMAGE(Control(__UI_FormID).Width, Control(__UI_FormID).Height, 32)
                _DEST Control(__UI_FormID).HelperCanvas
                CLS , _RGBA32(0, 0, 0, 0)
            ELSE
                _DEST Control(__UI_FormID).HelperCanvas
            END IF
            OverlayisVisible = True

            IF __UI_Snapped THEN
                IF __UI_SnappedY >= 0 THEN _
                    DIM X1 AS INTEGER, X2 AS INTEGER
                    'X1 = Control(__UI_SnappedYID).Left
                    'X2 = Control(__UI_DraggingID).Left
                    'IF X1 > X2 THEN SWAP X1, X2
                    'X2 = X2 - X1
                    X1 = 0
                    X2 = _WIDTH
                    LINE (X1, __UI_SnappedY)-STEP(X2, 0), Control(__UI_FormID).SelectedBackColor
                IF __UI_SnappedX >=0 THEN _
                    DIM Y1 AS INTEGER, Y2 AS INTEGER
                    'Y1 = Control(__UI_SnappedYID).Top
                    'Y2 = Control(__UI_DraggingID).Top
                    'IF Y1 > Y2 THEN SWAP Y1, Y2
                    'Y2 = Y2 - Y1
                    Y1 = 0
                    Y2 = _HEIGHT
                    LINE (__UI_SnappedX, Y1)-STEP(0, Y2), Control(__UI_FormID).SelectedBackColor
            END IF
            _DEST 0
        END IF

        IF Control(i).ControlIsSelected THEN
            IF OverlayReset = False THEN
                'Reset the helper canvas of the main form
                OverlayReset = True
                IF Control(__UI_FormID).HelperCanvas <> 0 THEN _FREEIMAGE Control(__UI_FormID).HelperCanvas
                Control(__UI_FormID).HelperCanvas = _NEWIMAGE(Control(__UI_FormID).Width, Control(__UI_FormID).Height, 32)
                _DEST Control(__UI_FormID).HelperCanvas
                CLS , _RGBA32(0, 0, 0, 0)
            ELSE
                _DEST Control(__UI_FormID).HelperCanvas
            END IF
            OverlayisVisible = True

            IF Control(i).Type = __UI_Type_MenuItem THEN
                TempParentID = Control(i).ParentID
                Control(i).ParentID = __UI_ActiveMenu
            ELSE
                TempParentID = 0
            END IF

            'Dotted outline:
            LINE (Control(i).Left + Control(Control(i).ParentID).Left - 2, Control(i).Top + Control(Control(i).ParentID).Top - 2)-STEP(Control(i).Width + 3, Control(i).Height + 3), _RGB32(0, 0, 0), B , 21845

            'Right resize handle:
            LINE (Control(i).Left + Control(Control(i).ParentID).Left + Control(i).Width - 8, Control(i).Top + Control(Control(i).ParentID).Top + Control(i).Height / 2 - 4)-STEP(7, 7), _RGB32(255, 255, 255), BF
            LINE (Control(i).Left + Control(Control(i).ParentID).Left + Control(i).Width - 8, Control(i).Top + Control(Control(i).ParentID).Top + Control(i).Height / 2 - 4)-STEP(7, 7), _RGB32(0, 0, 0), B

            'Left resize handle:
            LINE (Control(i).Left + Control(Control(i).ParentID).Left, Control(i).Top + Control(Control(i).ParentID).Top + Control(i).Height / 2 - 4)-STEP(7, 7), _RGB32(255, 255, 255), BF
            LINE (Control(i).Left + Control(Control(i).ParentID).Left, Control(i).Top + Control(Control(i).ParentID).Top + Control(i).Height / 2 - 4)-STEP(7, 7), _RGB32(0, 0, 0), B

            'Bottom resize handle:
            LINE (Control(i).Left + Control(Control(i).ParentID).Left + Control(i).Width / 2 - 4, Control(i).Top + Control(Control(i).ParentID).Top + Control(i).Height - 8)-STEP(7, 7), _RGB32(255, 255, 255), BF
            LINE (Control(i).Left + Control(Control(i).ParentID).Left + Control(i).Width / 2 - 4, Control(i).Top + Control(Control(i).ParentID).Top + Control(i).Height - 8)-STEP(7, 7), _RGB32(0, 0, 0), B

            'Bottom-right resize handle:
            LINE (Control(i).Left + Control(Control(i).ParentID).Left + Control(i).Width - 8, Control(i).Top + Control(Control(i).ParentID).Top + Control(i).Height - 8)-STEP(7, 7), _RGB32(255, 255, 255), BF
            LINE (Control(i).Left + Control(Control(i).ParentID).Left + Control(i).Width - 8, Control(i).Top + Control(Control(i).ParentID).Top + Control(i).Height - 8)-STEP(7, 7), _RGB32(0, 0, 0), B

            'Bottom-left resize handle:
            LINE (Control(i).Left + Control(Control(i).ParentID).Left, Control(i).Top + Control(Control(i).ParentID).Top + Control(i).Height - 8)-STEP(7, 7), _RGB32(255, 255, 255), BF
            LINE (Control(i).Left + Control(Control(i).ParentID).Left, Control(i).Top + Control(Control(i).ParentID).Top + Control(i).Height - 8)-STEP(7, 7), _RGB32(0, 0, 0), B

            'Top resize handle:
            LINE (Control(i).Left + Control(Control(i).ParentID).Left + Control(i).Width / 2 - 4, Control(i).Top + Control(Control(i).ParentID).Top)-STEP(7, 7), _RGB32(255, 255, 255), BF
            LINE (Control(i).Left + Control(Control(i).ParentID).Left + Control(i).Width / 2 - 4, Control(i).Top + Control(Control(i).ParentID).Top)-STEP(7, 7), _RGB32(0, 0, 0), B

            'Top-right resize handle:
            LINE (Control(i).Left + Control(Control(i).ParentID).Left + Control(i).Width - 8, Control(i).Top + Control(Control(i).ParentID).Top)-STEP(7, 7), _RGB32(255, 255, 255), BF
            LINE (Control(i).Left + Control(Control(i).ParentID).Left + Control(i).Width - 8, Control(i).Top + Control(Control(i).ParentID).Top)-STEP(7, 7), _RGB32(0, 0, 0), B

            'Top-left resize handle:
            LINE (Control(i).Left + Control(Control(i).ParentID).Left, Control(i).Top + Control(Control(i).ParentID).Top)-STEP(7, 7), _RGB32(255, 255, 255), BF
            LINE (Control(i).Left + Control(Control(i).ParentID).Left, Control(i).Top + Control(Control(i).ParentID).Top)-STEP(7, 7), _RGB32(0, 0, 0), B

            IF TempParentID > 0 THEN Control(i).ParentID = TempParentID
            _DEST 0
        END IF

        IF Control(i).ParentID > 0 AND Control(i).Type <> __UI_Type_MenuItem THEN
            'Check if no more controls will be drawn in this frame so it can be drawn too
            DIM CheckChildControls AS LONG, NoMoreChildren AS _BYTE, ThisParent AS LONG

            ThisParent = Control(i).ParentID
            NoMoreChildren = True
            FOR CheckChildControls = i + 1 TO UBOUND(Control)
                IF Control(CheckChildControls).ParentID = ThisParent THEN
                    NoMoreChildren = False
                    EXIT FOR
                END IF
            NEXT

            IF NoMoreChildren THEN
                'Draw frame
                __UI_DrawFrame Control(ThisParent)
            END IF
        END IF
    NEXT

    FOR i = 1 TO UBOUND(Control)
        IF Control(i).Type = __UI_Type_Frame AND Control(i).Value = 0 THEN
            'Draw frame without any children controls
            __UI_DrawFrame Control(i)
        END IF
    NEXT

    'Selection rectangle:
    IF __UI_DesignMode AND __UI_SelectionRectangle THEN
        IF OverlayReset = False THEN
            'Reset the helper canvas of the main form
            OverlayReset = True
            IF Control(__UI_FormID).HelperCanvas <> 0 THEN _FREEIMAGE Control(__UI_FormID).HelperCanvas
            Control(__UI_FormID).HelperCanvas = _NEWIMAGE(Control(__UI_FormID).Width, Control(__UI_FormID).Height, 32)
            _DEST Control(__UI_FormID).HelperCanvas
            CLS , _RGBA32(0, 0, 0, 0)
        ELSE
            _DEST Control(__UI_FormID).HelperCanvas
        END IF
        OverlayisVisible = True

        LINE(__UI_SelectionRectangleLeft, __UI_SelectionRectangleTop)-(__UI_MouseLeft,__UI_MouseTop), _RGBA32(0, 177, 255, 150), BF
        LINE(__UI_SelectionRectangleLeft, __UI_SelectionRectangleTop)-(__UI_MouseLeft,__UI_MouseTop), _RGB32(39, 188, 244), B
        'LINE(__UI_SelectionRectangleLeft, __UI_SelectionRectangleTop)-(__UI_MouseLeft,__UI_MouseTop), Control(__UI_FormID).SelectedBackColor, B, 255 'Dotted line
        _DEST 0
    END IF

    'Size and position indicator:
    IF __UI_TotalSelectedControls > 0 AND __UI_Snapped = False AND __UI_ShowPositionAndSize THEN
        IF Control(__UI_FormID).Width > 0 AND Control(__UI_FormID).Height > 0 THEN
            IF OverlayReset = False THEN
                'Reset the helper canvas of the main form
                OverlayReset = True
                IF Control(__UI_FormID).HelperCanvas <> 0 THEN _FREEIMAGE Control(__UI_FormID).HelperCanvas
                Control(__UI_FormID).HelperCanvas = _NEWIMAGE(Control(__UI_FormID).Width, Control(__UI_FormID).Height, 32)
                _DEST Control(__UI_FormID).HelperCanvas
                CLS , _RGBA32(0, 0, 0, 0)
            ELSE
                _DEST Control(__UI_FormID).HelperCanvas
            END IF

            i = __UI_FirstSelectedID
            IF Control(__UI_HoveringID).ControlIsSelected THEN i = __UI_HoveringID

            IF Control(i).Type <> __UI_Type_MenuBar AND Control(i).Type <> __UI_Type_MenuItem THEN
                OverlayisVisible = True
                DIM SizeAndPosition1$, SizeAndPosition2$, pw&
                DIM InfoLeft AS INTEGER, InfoTop AS INTEGER
                _FONT Control(__UI_FormID).Font
                'Calculate the info panel width
                SizeAndPosition1$ = LTRIM$(STR$(Control(i).Left)) + "," + LTRIM$(STR$(Control(i).Top))
                pw& = __UI_PrintWidth(SizeAndPosition1$)
                SizeAndPosition2$ = LTRIM$(STR$(Control(i).Width)) + "x" + LTRIM$(STR$(Control(i).Height))
                IF __UI_PrintWidth(SizeAndPosition2$) > pw& THEN pw& = __UI_PrintWidth(SizeAndPosition2$)

                'Calculate the info panel position
                InfoLeft = Control(Control(i).ParentID).Left + Control(i).Left
                IF InfoLeft < 0 THEN InfoLeft = 0
                IF InfoLeft + pw& + 4 > Control(__UI_FormID).Width THEN InfoLeft = Control(__UI_FormID).Width - (pw& + 4)

                InfoTop = Control(Control(i).ParentID).Top + Control(i).Top + Control(i).Height + 2
                IF InfoTop < 0 THEN InfoTop = 0
                IF InfoTop + uspacing& * 2 + 4 > Control(__UI_FormID).Height THEN InfoTop = Control(__UI_FormID).Height - (uspacing& * 2 + 4)

                'Reposition the panel if it intersects with the controls
                IF InfoLeft < Control(Control(i).ParentID).Left + Control(i).Left + Control(i).Width AND _
                    Control(Control(i).ParentID).Left + Control(i).Left < InfoLeft + pw& + 4 AND _
                    InfoTop < Control(Control(i).ParentID).Top + Control(i).Top + Control(i).Height + 2 AND _
                    Control(Control(i).ParentID).Top + Control(i).Top < InfoTop + uspacing& * 2 + 4 THEN
                    InfoTop = Control(Control(i).ParentID).Top + Control(i).Top - (uspacing& * 2 + 4)
                END IF

                'Reposition the panel if the mouse is where it'd be drawn
                IF __UI_MouseLeft >= InfoLeft AND __UI_MouseLeft <= InfoLeft + pw& + 4 AND _
                    __UI_MouseTop >= InfoTop AND __UI_MouseTop <= InfoTop + uspacing& * 2 + 4 THEN
                    InfoLeft = InfoLeft + Control(i).Width
                END IF

                'Draw the info panel
                __UI_ShadowBox InfoLeft, InfoTop, pw& + 4, uspacing& * 2 + 4, __UI_DefaultColor(__UI_Type_Form, 6), 40, 5

                'Print the info
                COLOR _RGB32(0, 0, 0)
                __UI_PrintString InfoLeft + 3, InfoTop + 3, SizeAndPosition1$
                __UI_PrintString InfoLeft + 3, InfoTop + 3 + uspacing&, SizeAndPosition2$
            END IF

            _DEST 0
        END IF
    END IF

    IF __UI_ActiveMenu > 0 THEN
        __UI_DrawMenuPanel Control(__UI_ActiveMenu), ControlState
    END IF

    IF OverlayisVisible THEN
        IF Control(__UI_FormID).HelperCanvas < -1 THEN
            __UI_MakeHardwareImage Control(__UI_FormID).HelperCanvas
            _PUTIMAGE , Control(__UI_FormID).HelperCanvas
        END IF
    END IF

    IF __UI_ActiveMenu > 0 AND LEFT$(Control(__UI_ParentMenu).Name, 5) = "__UI_" THEN
        __UI_DrawMenuPanel Control(__UI_ActiveMenu), ControlState
    END IF

    STATIC PanelWidth AS INTEGER, PanelHeight AS INTEGER
    IF __UI_ActiveTipID > 0 THEN
        IF __UI_ActiveTipID <> __UI_PreviousTipID OR ToolTip(__UI_ActiveTipID) <> __UI_TempTips(__UI_ActiveTipID) THEN
            __UI_PreviousTipID = __UI_ActiveTipID
            __UI_TempTips(__UI_ActiveTipID) = ToolTip(__UI_ActiveTipID)

            DIM ThisLine%, TextTop%, Temp&
            DIM FindLF AS LONG, TotalLines AS INTEGER, LongestLine AS INTEGER, TempLine$
            _FONT Control(__UI_FormID).Font

            TempCaption$ = __UI_WordWrap(ToolTip(__UI_ActiveTipID), Control(__UI_FormID).Width / 2, LongestLine, TotalLines)

            PanelWidth = LongestLine + 16
            IF TotalLines = 1 THEN
                PanelHeight = uspacing& + 8
            ELSE
                PanelHeight = (TotalLines * uspacing&) + 8
            END IF

            IF ActiveTipPanel <> 0 THEN _FREEIMAGE ActiveTipPanel
            ActiveTipPanel = _NEWIMAGE(PanelWidth, PanelHeight, 32)
            _DEST ActiveTipPanel
            _FONT Control(__UI_FormID).Font
            __UI_ShadowBox 0, 0, PanelWidth - 6, PanelHeight - 6, __UI_DefaultColor(__UI_Type_Form, 6), 40, 5
            COLOR __UI_DefaultColor(__UI_Type_Form, 1)

            IF TotalLines = 1 THEN
                __UI_PrintString _WIDTH \ 2 - __UI_PrintWidth(TempCaption$) \ 2 - 1.75, _HEIGHT \ 2 - uheight& \ 2 - 1.75, TempCaption$
            ELSE
                DO WHILE LEN(TempCaption$)
                    ThisLine% = ThisLine% + 1
                    TextTop% = 3 + ThisLine% * uspacing& - uspacing&

                    FindLF& = INSTR(TempCaption$, CHR$(1))
                    IF FindLF& > 0 THEN
                        TempLine$ = LEFT$(TempCaption$, FindLF& - 1)
                        TempCaption$ = MID$(TempCaption$, FindLF& + 1)
                    ELSE
                        TempLine$ = TempCaption$
                        TempCaption$ = ""
                        IF ThisLine% = 1 THEN TextTop% = ((_HEIGHT \ 2) - uspacing& \ 2)
                    END IF

                    __UI_PrintString 5, TextTop%, TempLine$
                LOOP
            END IF

            LINE (0, 0)-(_WIDTH - 6, _HEIGHT - 6), __UI_DefaultColor(__UI_Type_Form, 5), B
            __UI_MakeHardwareImage ActiveTipPanel
        END IF
        _DEST 0
        IF __UI_ActiveTipTop + PanelHeight > Control(__UI_FormID).Height THEN
            __UI_ActiveTipTop = Control(__UI_FormID).Height - PanelHeight
            IF __UI_ActiveTipTop < 0 THEN __UI_ActiveTipTop = 0
        END IF

        IF __UI_ActiveTipLeft + PanelWidth > Control(__UI_FormID).Width THEN
            __UI_ActiveTipLeft = Control(__UI_FormID).Width - PanelWidth
            IF __UI_ActiveTipLeft < 0 THEN __UI_ActiveTipLeft = 0
        END IF
        _PUTIMAGE (__UI_ActiveTipLeft, __UI_ActiveTipTop), ActiveTipPanel
    END IF

    IF __UI_IsDragging AND __UI_DraggingID > 0 AND __UI_DraggingID <> __UI_FormID AND __UI_TotalSelectedControls = 1 AND (_KEYDOWN(100305) = 0 AND _KEYDOWN(100306) = 0) AND __UI_SnapLines THEN
        STATIC DragTip AS LONG, TipPanelWidth AS INTEGER

        IF DragTip = 0 THEN
            _FONT Control(__UI_FormID).Font

            TempCaption$ = "Hold Ctrl to bypass snapping"

            TipPanelWidth = __UI_PrintWidth(TempCaption$) + 10
            PanelHeight = uspacing& + 5 + 5

            DragTip = _NEWIMAGE(TipPanelWidth, PanelHeight, 32)
            _DEST DragTip
            _FONT Control(__UI_FormID).Font
            __UI_ShadowBox 0, 0, TipPanelWidth - 6, PanelHeight - 6, __UI_DefaultColor(__UI_Type_Form, 6), 40, 5
            COLOR __UI_DefaultColor(__UI_Type_Form, 1)

            __UI_PrintString _WIDTH \ 2 - __UI_PrintWidth(TempCaption$) \ 2 - 1.75, _HEIGHT \ 2 - uspacing& \ 2 - 1.75, TempCaption$

            LINE (0, 0)-(_WIDTH - 6, _HEIGHT - 6), __UI_DefaultColor(__UI_Type_Form, 5), B
            __UI_MakeHardwareImage DragTip
        END IF
        _DEST 0
        _PUTIMAGE (_WIDTH \ 2 - TipPanelWidth \ 2, 0), DragTip
    END IF

    __UI_ForceRedraw = False

    STATIC WaitMessageSetup AS _BYTE, PrevWaitMessage AS STRING
    DIM NoInputMessage$
    IF TIMER - __UI_LastInputReceived > 2 THEN
        'Visually indicate that something is hogging the input routine
        IF __UI_WaitMessageHandle = 0 THEN
            __UI_WaitMessageHandle = _NEWIMAGE(_WIDTH(0), _HEIGHT(0), 32)
        ELSEIF _WIDTH(__UI_WaitMessageHandle) <> _WIDTH(0) OR _HEIGHT(__UI_WaitMessageHandle) <> _HEIGHT(0) THEN
            _FREEIMAGE __UI_WaitMessageHandle
            __UI_WaitMessageHandle = _NEWIMAGE(_WIDTH(0), _HEIGHT(0), 32)
        END IF

        IF WaitMessageSetup = False OR PrevWaitMessage <> __UI_WaitMessage THEN
            PrevWaitMessage = __UI_WaitMessage
            WaitMessageSetup = True
            PrevDest = _DEST
            _DEST __UI_WaitMessageHandle
            LINE (0, 0)-STEP(_WIDTH, _HEIGHT), _RGBA32(0, 0, 0, 170), BF
            _FONT Control(__UI_FormID).Font
            _PRINTMODE _KEEPBACKGROUND
            NoInputMessage$ = "Please wait..."
            COLOR _RGB32(0, 0, 0)
            __UI_PrintString _WIDTH / 2 - __UI_PrintWidth(NoInputMessage$) / 2 + 1, _HEIGHT \ 2 - _FONTWIDTH + 1, NoInputMessage$
            COLOR _RGB32(255, 255, 255)
            __UI_PrintString _WIDTH / 2 - __UI_PrintWidth(NoInputMessage$) / 2, _HEIGHT \ 2 - _FONTWIDTH, NoInputMessage$
            IF LEN(__UI_WaitMessage) > 0 THEN
                IF LEFT$(__UI_WaitMessage, 1) <> "(" THEN __UI_WaitMessage = "(" + __UI_WaitMessage + ")"
                COLOR _RGB32(0, 0, 0)
                __UI_PrintString _WIDTH / 2 - __UI_PrintWidth(NoInputMessage$) / 2 + 1, _HEIGHT \ 2 + 4, __UI_WaitMessage
                COLOR _RGB32(255, 255, 255)
                __UI_PrintString _WIDTH / 2 - __UI_PrintWidth(NoInputMessage$) / 2, _HEIGHT \ 2 + 3, __UI_WaitMessage
            END IF
            _DEST PrevDest
            __UI_MakeHardwareImage __UI_WaitMessageHandle
        END IF
        IF _EXIT THEN SYSTEM 'Can't force user to wait...
        _PUTIMAGE , __UI_WaitMessageHandle
    END IF

    _DISPLAY
END SUB

'---------------------------------------------------------------------------------
FUNCTION Darken~& (WhichColor~&, ByHowMuch%)
    Darken~& = _RGB32(_RED32(WhichColor~&) * (ByHowMuch% / 100), _GREEN32(WhichColor~&) * (ByHowMuch% / 100), _BLUE32(WhichColor~&) * (ByHowMuch% / 100))
END FUNCTION

SUB __UI_EventDispatcher
    STATIC __UI_LastMouseIconSet AS _BYTE
    STATIC __UI_PreviousMouseDownOnID AS LONG, __UI_LastMouseDownEvent AS DOUBLE
    STATIC __UI_MouseDownTop AS INTEGER, __UI_MouseDownLeft AS INTEGER
    STATIC __UI_JustOpenedMenu AS _BYTE
    STATIC ControlClipboard$
    STATIC OriginalDragX AS INTEGER, OriginalDragY AS INTEGER
    DIM i AS LONG, ThisItem%
    DIM ContainerOffsetLeft AS INTEGER, ContainerOffsetTop AS INTEGER

    IF __UI_DesignModeAlignCommand > 0 THEN
        SELECT CASE __UI_DesignModeAlignCommand
            CASE 201: __UI_HoveringID = __UI_GetID("__UI_PreviewMenuALIGNLEFT")
            CASE 202: __UI_HoveringID = __UI_GetID("__UI_PreviewMenuALIGNRIGHT")
            CASE 203: __UI_HoveringID = __UI_GetID("__UI_PreviewMenuALIGNTOPS")
            CASE 204: __UI_HoveringID = __UI_GetID("__UI_PreviewMenuALIGNBOTTOMS")
            CASE 205: __UI_HoveringID = __UI_GetID("__UI_PreviewMenuALIGNCENTERSV")
            CASE 206: __UI_HoveringID = __UI_GetID("__UI_PreviewMenuALIGNCENTERSH")
            CASE 207: __UI_HoveringID = __UI_GetID("__UI_PreviewMenuALIGNCENTERV")
            CASE 208: __UI_HoveringID = __UI_GetID("__UI_PreviewMenuALIGNCENTERH")
            CASE 209: __UI_HoveringID = __UI_GetID("__UI_PreviewMenuDISTRIBUTEV")
            CASE 210: __UI_HoveringID = __UI_GetID("__UI_PreviewMenuDISTRIBUTEH")
        END SELECT
        __UI_DesignModeAlignCommand = 0
        GOTO ProcessHotKey
    END IF

    IF __UI_HoveringID = 0 AND __UI_Focus = 0 THEN EXIT SUB

    IF Control(__UI_HoveringID).ParentID > 0 AND Control(__UI_HoveringID).Type <> __UI_Type_MenuItem THEN
        ContainerOffsetLeft = Control(Control(__UI_HoveringID).ParentID).Left
        ContainerOffsetTop = Control(Control(__UI_HoveringID).ParentID).Top
    END IF

    $IF WIN THEN
        'Alt+F4 - Windows
        IF ((_KEYDOWN(100308) OR _KEYDOWN(100307)) AND __UI_KeyHit = -15872) OR __UI_ExitTriggered THEN
            __UI_UnloadSignal = True
            __UI_BeforeUnload
            IF __UI_UnloadSignal THEN SYSTEM
        END IF
    $ELSE
        IF __UI_ExitTriggered THEN
        __UI_UnloadSignal = True
        __UI_BeforeUnload
        IF __UI_UnloadSignal THEN SYSTEM
        END IF
    $END IF

    'Hover actions
    IF __UI_LastHoveringID <> __UI_HoveringID OR __UI_HoveringID = __UI_ActiveDropdownList THEN
        'MouseEnter, MouseLeave
        IF __UI_LastHoveringID THEN __UI_MouseLeave __UI_LastHoveringID
        __UI_MouseEnter __UI_HoveringID

        STATIC LastMouseLeft AS INTEGER, LastMouseTop AS INTEGER
        IF NOT __UI_DraggingThumb AND __UI_HoveringID = __UI_ActiveDropdownList AND Control(__UI_HoveringID).HoveringVScrollbarButton = 0 AND LastMouseTop <> __UI_MouseTop THEN
            'Dropdown list items are preselected when hovered
            LastMouseTop = __UI_MouseTop
            IF Control(__UI_HoveringID).Font > 0 THEN _FONT Control(__UI_HoveringID).Font
            ThisItem% = ((__UI_MouseTop - (ContainerOffsetTop + Control(__UI_HoveringID).Top)) \ uspacing&) + Control(__UI_HoveringID).InputViewStart
            IF ThisItem% >= Control(__UI_HoveringID).Min AND ThisItem% <= Control(__UI_HoveringID).Max THEN
                Control(__UI_HoveringID).Value = ThisItem%
                IF Control(__UI_HoveringID).PreviousValue <> Control(__UI_HoveringID).Value THEN __UI_ValueChanged __UI_HoveringID
            END IF
        ELSEIF Control(__UI_HoveringID).Type = __UI_Type_MenuBar AND LastMouseLeft <> __UI_MouseLeft THEN
            LastMouseLeft = __UI_MouseLeft
            IF __UI_ActiveMenu > 0 AND __UI_ParentMenu <> Control(__UI_HoveringID).ID AND __UI_ParentMenu > 0 THEN
                IF __UI_ActiveMenuIsContextMenu = False AND __UI_DesignMode = False THEN
                    __UI_ActivateMenu Control(__UI_HoveringID), False
                    __UI_ForceRedraw = True
                END IF
            END IF
        END IF

        IF Control(__UI_Focus).Type = __UI_Type_MenuItem AND Control(__UI_HoveringID).Type <> __UI_Type_MenuItem THEN
            __UI_Focus = __UI_ActiveMenu
        END IF
    END IF

    $IF WIN OR MAC THEN
        IF __UI_ResizeHandleHover = 1 OR __UI_ResizeHandleHover = 3 THEN
            IF __UI_LastMouseIconSet <> 3 THEN
                __UI_LastMouseIconSet = 3
                _MOUSESHOW "horizontal"
            END IF
        ELSEIF __UI_ResizeHandleHover = 2 OR __UI_ResizeHandleHover = 4 THEN
            IF __UI_LastMouseIconSet <> 4 THEN
                __UI_LastMouseIconSet = 4
                _MOUSESHOW "vertical"
            END IF
        ELSEIF __UI_ResizeHandleHover = 5 OR __UI_ResizeHandleHover = 8 THEN
            IF __UI_LastMouseIconSet <> 5 THEN
                __UI_LastMouseIconSet = 5
                _MOUSESHOW "topright_bottomleft"
            END IF
        ELSEIF __UI_ResizeHandleHover = 6 OR __UI_ResizeHandleHover = 7 THEN
            IF __UI_LastMouseIconSet <> 6 THEN
                __UI_LastMouseIconSet = 6
                _MOUSESHOW "topleft_bottomright"
            END IF
        ELSEIF Control(__UI_HoveringID).Type = __UI_Type_TextBox AND NOT __UI_DesignMode THEN
            IF Control(__UI_HoveringID).HasVScrollbar AND __UI_MouseLeft >= Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left +Control(__UI_HoveringID).Width - __UI_ScrollbarWidth - 1 THEN
                IF __UI_LastMouseIconSet <> 0 THEN
                    __UI_LastMouseIconSet = 0
                    _MOUSESHOW "default"
                END IF
            ELSE
                IF __UI_LastMouseIconSet <> 2 THEN
                    __UI_LastMouseIconSet = 2
                    _MOUSESHOW "text"
                END IF
            END IF
        ELSE
            IF __UI_LastMouseIconSet <> 0 THEN
                __UI_LastMouseIconSet = 0
                _MOUSESHOW "default"
            END IF
        END IF
    $END IF

    'FocusIn, FocusOut
    DIM __UI_FocusSearch AS LONG
    IF __UI_KeyHit = 9 AND __UI_IsDragging = False THEN 'TAB
        IF __UI_DesignMode THEN

            __UI_FocusSearch = __UI_FirstSelectedID

            FOR i = 1 TO UBOUND(Control)
                Control(i).ControlIsSelected = False
            NEXT

            DO
                IF _KEYDOWN(100304) OR _KEYDOWN(100303) THEN
                    __UI_FocusSearch = __UI_FocusSearch - 1
                    IF __UI_FocusSearch < 1 THEN __UI_FocusSearch = UBOUND(Control)
                ELSE
                    __UI_FocusSearch = __UI_FocusSearch + 1
                    IF __UI_FocusSearch > UBOUND(Control) THEN __UI_FocusSearch = 0
                END IF
                IF __UI_FocusSearch = __UI_FirstSelectedID THEN
                    'Full circle. No controls can be selected at the moment
                    Control(__UI_FocusSearch).ControlIsSelected = True
                    EXIT DO
                END IF

                IF Control(__UI_FocusSearch).ID > 0 AND Control(__UI_FocusSearch).Type <> __UI_Type_Form AND Control(__UI_FocusSearch).Type <> __UI_Type_MenuPanel AND Control(__UI_FocusSearch).Type <> __UI_Type_Font AND UCASE$(LEFT$(Control(__UI_FocusSearch).Name, 5)) <> "__UI_" THEN
                    IF Control(__UI_FocusSearch).Type <> __UI_Type_MenuItem THEN
                        __UI_TotalSelectedControls = 1
                        __UI_FirstSelectedID = __UI_FocusSearch
                        Control(__UI_FocusSearch).ControlIsSelected = True
                        EXIT DO
                    ELSE
                        IF __UI_ParentMenu = Control(__UI_FocusSearch).ParentID THEN
                            __UI_TotalSelectedControls = 1
                            __UI_FirstSelectedID = __UI_FocusSearch
                            Control(__UI_FocusSearch).ControlIsSelected = True
                            EXIT DO
                        END IF
                    END IF
                END IF
            LOOP
        ELSE
            __UI_KeyboardFocus = True
            __UI_FocusSearch = __UI_Focus
            DO
                IF _KEYDOWN(100304) OR _KEYDOWN(100303) THEN
                    __UI_FocusSearch = __UI_FocusSearch - 1
                    IF __UI_FocusSearch < 1 THEN __UI_FocusSearch = UBOUND(Control)
                ELSE
                    __UI_FocusSearch = __UI_FocusSearch + 1
                    IF __UI_FocusSearch > UBOUND(Control) THEN __UI_FocusSearch = 0
                END IF
                IF __UI_FocusSearch = __UI_Focus THEN
                    'Full circle. No controls can have focus
                    EXIT DO
                END IF

                IF Control(__UI_FocusSearch).CanHaveFocus AND NOT Control(__UI_FocusSearch).Disabled THEN
                    IF __UI_Focus <> __UI_FocusSearch THEN __UI_FocusOut __UI_Focus
                    __UI_Focus = __UI_FocusSearch
                    __UI_FocusIn __UI_Focus
                    EXIT DO
                END IF
            LOOP
        END IF
    END IF

    'Any visible dropdown lists/menus will be destroyed when focus is lost
    IF __UI_DesignMode = False THEN
        IF __UI_ActiveDropdownList > 0 AND ((__UI_Focus <> __UI_ActiveDropdownList AND __UI_Focus <> __UI_ParentDropdownList) OR __UI_KeyHit = 27) THEN
            __UI_Focus = __UI_ParentDropdownList
            __UI_DestroyControl Control(__UI_ActiveDropdownList)
            __UI_KeyHit = 0
        ELSEIF __UI_ActiveMenu > 0 AND (__UI_Focus <> __UI_ActiveMenu AND __UI_Focus <> __UI_ParentMenu) THEN
            IF Control(__UI_Focus).Type <> __UI_Type_MenuItem THEN
                __UI_DestroyControl Control(__UI_ActiveMenu)
                __UI_ForceRedraw = True
            END IF
        END IF
    END IF

    'MouseWheel
    IF __UI_MouseWheel AND NOT __UI_DesignMode THEN
        IF (Control(__UI_HoveringID).Type = __UI_Type_ListBox AND NOT Control(__UI_HoveringID).Disabled) THEN
            Control(__UI_HoveringID).InputViewStart = Control(__UI_HoveringID).InputViewStart + __UI_MouseWheel
            IF Control(__UI_HoveringID).InputViewStart + Control(__UI_HoveringID).LastVisibleItem > Control(__UI_HoveringID).Max THEN
                Control(__UI_HoveringID).InputViewStart = Control(__UI_HoveringID).Max - Control(__UI_HoveringID).LastVisibleItem + 1
            END IF
        ELSEIF (__UI_ActiveDropdownList > 0 AND __UI_Focus = __UI_ActiveDropdownList AND __UI_ParentDropdownList = __UI_HoveringID) THEN
            Control(__UI_ActiveDropdownList).InputViewStart = Control(__UI_ActiveDropdownList).InputViewStart + __UI_MouseWheel
            IF Control(__UI_ActiveDropdownList).InputViewStart + Control(__UI_ActiveDropdownList).LastVisibleItem > Control(__UI_ActiveDropdownList).Max THEN
                Control(__UI_ActiveDropdownList).InputViewStart = Control(__UI_ActiveDropdownList).Max - Control(__UI_ActiveDropdownList).LastVisibleItem + 1
            END IF
        ELSEIF (Control(__UI_Focus).Type = __UI_Type_DropdownList AND NOT Control(__UI_Focus).Disabled) THEN
            Control(__UI_Focus).Value = Control(__UI_Focus).Value + __UI_MouseWheel
            IF Control(__UI_Focus).Value < 1 THEN Control(__UI_Focus).Value = 1
            IF Control(__UI_Focus).Value > Control(__UI_Focus).Max THEN Control(__UI_Focus).Value = Control(__UI_Focus).Max
            IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
        ELSEIF Control(__UI_Focus).Type = __UI_Type_TextBox AND Control(__UI_Focus).MultiLine THEN
            DIM TotalLines AS LONG
            TotalLines = __UI_CountLines(__UI_Focus)
            _FONT Control(__UI_Focus).Font
            IF TotalLines > Control(__UI_Focus).Height \ uspacing& THEN
                Control(__UI_Focus).FirstVisibleLine = Control(__UI_Focus).FirstVisibleLine + __UI_MouseWheel
                IF Control(__UI_Focus).FirstVisibleLine < 1 THEN Control(__UI_Focus).FirstVisibleLine = 1
                IF Control(__UI_Focus).FirstVisibleLine > TotalLines - Control(__UI_Focus).Height \ uspacing& + 1 THEN
                    Control(__UI_Focus).FirstVisibleLine = TotalLines - Control(__UI_Focus).Height \ uspacing& + 1
                END IF
            END IF
        END IF
    END IF

    'MouseDown, MouseUp, BeginDrag
    IF __UI_MouseButton2 THEN
        'Second mouse button is first pressed
        IF __UI_Mouse2IsDown = False THEN
            __UI_Mouse2IsDown = True
            __UI_Mouse2DownOnID = __UI_HoveringID
        ELSE
            'Second mouse button is still pressed
        END IF
    ELSE
        'Second mousebutton is released
        IF __UI_Mouse2IsDown THEN
            __UI_Mouse2IsDown = False
            __UI_Mouse2DownOnID = 0
            'Click (second mouse button)
            IF __UI_DesignMode THEN
                DIM RightClickSelect AS _BYTE
                RightClickSelect = True
                GOSUB DesignModeClickToSelect
                RightClickSelect = False
                IF __UI_TotalSelectedControls = 0 THEN
                    Control(__UI_GetID("__UI_PreviewMenuAlignLeft")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuAlignRight")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuAlignTops")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuAlignBottoms")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuAlignCenterV")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuAlignCenterH")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuAlignCentersV")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuAlignCentersH")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuDistributeV")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuDistributeH")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuCopy")).Disabled = True
                    Control(__UI_GetID("__UI_PreviewMenuDelete")).Disabled = True
                ELSEIF __UI_TotalSelectedControls = 1 THEN
                    Control(__UI_GetID("__UI_PreviewMenuAlignLeft")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuAlignRight")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuAlignTops")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuAlignBottoms")).Hidden = True
                    IF Control(__UI_FirstSelectedID).Type <> __UI_Type_MenuBar AND Control(__UI_FirstSelectedID).Type <> __UI_Type_MenuItem THEN
                        Control(__UI_GetID("__UI_PreviewMenuAlignCenterV")).Hidden = False
                        Control(__UI_GetID("__UI_PreviewMenuAlignCenterH")).Hidden = False
                    ELSE
                        Control(__UI_GetID("__UI_PreviewMenuAlignCenterV")).Hidden = True
                        Control(__UI_GetID("__UI_PreviewMenuAlignCenterH")).Hidden = True
                    END IF
                    Control(__UI_GetID("__UI_PreviewMenuAlignCentersV")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuAlignCentersH")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuDistributeV")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuDistributeH")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuCopy")).Disabled = False
                    Control(__UI_GetID("__UI_PreviewMenuDelete")).Disabled = False
                ELSEIF __UI_TotalSelectedControls = 2 THEN
                    Control(__UI_GetID("__UI_PreviewMenuAlignLeft")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignRight")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignTops")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignBottoms")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignCenterV")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignCenterH")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignCentersV")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignCentersH")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuDistributeV")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuDistributeH")).Hidden = True
                    Control(__UI_GetID("__UI_PreviewMenuCopy")).Disabled = False
                    Control(__UI_GetID("__UI_PreviewMenuDelete")).Disabled = False
                ELSE
                    Control(__UI_GetID("__UI_PreviewMenuAlignLeft")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignRight")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignTops")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignBottoms")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignCenterV")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignCenterH")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignCentersV")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuAlignCentersH")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuDistributeV")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuDistributeH")).Hidden = False
                    Control(__UI_GetID("__UI_PreviewMenuCopy")).Disabled = False
                    Control(__UI_GetID("__UI_PreviewMenuDelete")).Disabled = False
                END IF

                IF _CLIPBOARD$ = "InForm" + CHR$(1) THEN
                    Control(__UI_GetID("__UI_PreviewMenuPaste")).Disabled = False
                ELSE
                    Control(__UI_GetID("__UI_PreviewMenuPaste")).Disabled = True
                END IF

                IF Control(__UI_HoveringID).Type = __UI_Type_MenuBar THEN
                    Control(__UI_GetID("__UI_PreviewMenuCopy")).Disabled = True
                END IF

                IF __UI_HoveringID > 0 AND Control(__UI_HoveringID).Type <> __UI_Type_MenuItem AND Control(__UI_HoveringID).Type <> __UI_Type_MenuPanel THEN __UI_ActivateMenu Control(__UI_GetID("__UI_PreviewMenu")), False
                __UI_CantShowContextMenu = False

                IF __UI_ActiveMenu > 0 THEN
                    IF Control(__UI_ActiveMenu).Height > Control(__UI_FormID).Height OR Control(__UI_ActiveMenu).Width > Control(__UI_FormID).Width THEN
                        __UI_CantShowContextMenu = True
                    END IF
                END IF
            ELSEIF Control(__UI_HoveringID).ContextMenuID > 0 AND Control(__UI_HoveringID).Disabled = False THEN
                __UI_Focus = __UI_HoveringID
                __UI_PreviousFocus = __UI_Focus

                'Internal text field menu:
                IF Control(__UI_HoveringID).ContextMenuID = __UI_GetID("__UI_TextFieldMenu") THEN
                    IF Control(__UI_HoveringID).TextIsSelected THEN
                        Control(__UI_GetID("__UI_TextMenuCut")).Disabled = False
                        Control(__UI_GetID("__UI_TextMenuCopy")).Disabled = False
                        Control(__UI_GetID("__UI_TextMenuDelete")).Disabled = False
                    ELSE
                        Control(__UI_GetID("__UI_TextMenuCut")).Disabled = True
                        Control(__UI_GetID("__UI_TextMenuCopy")).Disabled = True
                        Control(__UI_GetID("__UI_TextMenuDelete")).Disabled = True
                    END IF

                    IF LEN(_CLIPBOARD$) > 0 THEN
                        Control(__UI_GetID("__UI_TextMenuPaste")).Disabled = False
                    ELSE
                        Control(__UI_GetID("__UI_TextMenuPaste")).Disabled = True
                    END IF
                END IF
                __UI_ActivateMenu Control(Control(__UI_HoveringID).ContextMenuID), False
            END IF
        END IF
    END IF

    IF __UI_MouseButton1 THEN
        'Mouse button is first pressed
        IF __UI_MouseIsDown = False THEN
            __UI_MouseDownTop = __UI_MouseTop
            __UI_MouseDownLeft = __UI_MouseLeft
            IF __UI_DesignMode THEN
                IF LEFT$(Control(__UI_HoveringID).Name, 5) = "__UI_" THEN GOTO ProcessClick
                DesignModeClickToSelect:
                IF RightClickSelect AND (Control(__UI_HoveringID).Type = __UI_Type_MenuPanel OR LEFT$(Control(__UI_HoveringID).Name, 5) = "__UI_") THEN RETURN
                IF __UI_ActiveMenu > 0 AND Control(__UI_HoveringID).Type <> __UI_Type_MenuPanel THEN
                    IF Control(__UI_Focus).Type <> __UI_Type_MenuItem THEN
                        __UI_DestroyControl Control(__UI_ActiveMenu)
                        __UI_ForceRedraw = True
                    END IF
                END IF

                IF _KEYDOWN(100304) OR _KEYDOWN(100303) THEN
                    IF Control(__UI_HoveringID).Type <> __UI_Type_Frame AND Control(__UI_HoveringID).Type <> __UI_Type_Form AND Control(__UI_HoveringID).Type <> __UI_Type_Font AND Control(__UI_HoveringID).Type <> __UI_Type_MenuItem AND Control(__UI_HoveringID).Type <> __UI_Type_MenuPanel AND Control(__UI_HoveringID).Type <> __UI_Type_ContextMenu AND Control(__UI_HoveringID).Type <> __UI_Type_MenuBar THEN
                        IF Control(__UI_HoveringID).ControlIsSelected = False AND Control(__UI_HoveringID).ParentID = Control(__UI_FirstSelectedID).ParentID AND Control(__UI_FirstSelectedID).Type <> __UI_Type_Frame THEN
                            Control(__UI_HoveringID).ControlIsSelected = True
                            __UI_TotalSelectedControls = __UI_TotalSelectedControls + 1
                        END IF
                    END IF
                ELSE
                    IF Control(__UI_HoveringID).Type = __UI_Type_MenuPanel AND LEFT$(Control(__UI_ParentMenu).Name, 5) <> "__UI_" THEN
                        DIM TempValue AS LONG
                        TempValue = __UI_NewControl(__UI_Type_MenuItem, "", 0, 0, 0, 0, __UI_ParentMenu)
                        SetCaption TempValue, RTRIM$(Control(TempValue).Name)
                        __UI_ActivateMenu Control(__UI_ParentMenu), False
                        FOR i = 1 TO UBOUND(Control)
                            Control(i).ControlIsSelected = False
                        NEXT
                        Control(TempValue).ControlIsSelected = True
                        __UI_TotalSelectedControls = 1
                        __UI_FirstSelectedID = TempValue
                    ELSEIF Control(__UI_HoveringID).Type = __UI_Type_Form AND __UI_MouseTop <= (uspacing& + 5) THEN
                        IF __UI_HasMenuBar THEN
                            TempValue = __UI_NewControl(__UI_Type_MenuBar, "", 0, 0, 0, 0, 0)
                            SetCaption TempValue, RTRIM$(Control(TempValue).Name)
                            FOR i = 1 TO UBOUND(Control)
                                Control(i).ControlIsSelected = False
                            NEXT
                            Control(TempValue).ControlIsSelected = True
                            __UI_RefreshMenuBar
                            __UI_PrevMouseLeft = -1: __UI_PrevMouseTop = -1
                            __UI_TotalSelectedControls = 1
                            __UI_FirstSelectedID = TempValue
                            __UI_ActivateMenu Control(TempValue), False
                            __UI_HoveringID = TempValue
                        END IF
                    ELSE
                        IF Control(__UI_HoveringID).ControlIsSelected = False THEN
                            FOR i = 1 TO UBOUND(Control)
                                Control(i).ControlIsSelected = False
                            NEXT
                            __UI_TotalSelectedControls = 0
                            __UI_FirstSelectedID = 0
                            IF Control(__UI_HoveringID).Type <> __UI_Type_Form AND Control(__UI_HoveringID).Type <> __UI_Type_Font AND Control(__UI_HoveringID).Type <> __UI_Type_ContextMenu AND Control(__UI_HoveringID).Type <> __UI_Type_MenuPanel THEN
                                Control(__UI_HoveringID).ControlIsSelected = True
                                __UI_TotalSelectedControls = 1
                                __UI_FirstSelectedID = __UI_HoveringID
                                IF Control(__UI_HoveringID).Type = __UI_Type_MenuBar THEN
                                    __UI_ActivateMenu Control(__UI_HoveringID), False
                                    __UI_JustOpenedMenu = True
                                END IF
                            END IF
                            IF Control(__UI_HoveringID).Type = __UI_Type_Form THEN __UI_Click 0 'Force the preview to inform it was manipulated
                        ELSE
                            IF Control(__UI_FirstSelectedID).Type = __UI_Type_Frame AND (TIMER - __UI_LastMouseDownEvent < .5 AND (__UI_MouseTop = __UI_MouseDownTop AND __UI_MouseLeft = __UI_MouseDownLeft)) THEN
                                'Select all controls inside a frame
                                GOTO SelectAllInFrame
                            END IF
                        END IF
                    END IF
                END IF
                IF RightClickSelect THEN RETURN
            ELSEIF Control(__UI_HoveringID).CanHaveFocus AND NOT Control(__UI_HoveringID).Disabled THEN
                STATIC JustEnteredTextBox AS DOUBLE
                IF __UI_Focus <> __UI_HoveringID THEN
                    __UI_FocusOut __UI_Focus
                    __UI_Focus = __UI_HoveringID
                    IF Control(__UI_Focus).Type = __UI_Type_TextBox THEN JustEnteredTextBox = TIMER
                    __UI_FocusIn __UI_Focus
                END IF
            ELSE
                IF Control(__UI_HoveringID).Type = __UI_Type_MenuBar AND __UI_ActiveMenu > 0 AND __UI_HoveringID = __UI_ParentMenu THEN
                    __UI_Focus = __UI_PreviousFocus
                ELSEIF Control(__UI_HoveringID).Type = __UI_Type_MenuBar AND __UI_ActiveMenu = 0 THEN
                    __UI_ActivateMenu Control(__UI_HoveringID), False
                    __UI_JustOpenedMenu = True
                ELSEIF Control(__UI_HoveringID).Type = __UI_Type_MenuItem THEN
                    'Do nothing until mouseup (click)
                ELSE
                    IF __UI_Focus > 0 THEN __UI_FocusOut __UI_Focus
                    __UI_Focus = 0
                END IF
            END IF
            __UI_MouseIsDown = True
            __UI_MouseDownOnID = __UI_HoveringID

            IF __UI_DesignMode AND __UI_MouseDownOnID = __UI_FormID THEN
                __UI_SelectionRectangle = True
                __UI_SelectionRectangleTop = __UI_MouseTop
                __UI_SelectionRectangleLeft = __UI_MouseLeft
            ELSE
                __UI_SelectionRectangle = False
            END IF

            IF NOT __UI_DesignMode THEN
                IF Control(__UI_Focus).Type = __UI_Type_TextBox AND NOT Control(__UI_Focus).Disabled THEN
                    _FONT Control(__UI_Focus).Font
                    IF Control(__UI_HoveringID).HoveringVScrollbarButton = 1 OR Control(__UI_HoveringID).HoveringVScrollbarButton = 2 OR Control(__UI_HoveringID).HoveringVScrollbarButton = 4 OR Control(__UI_HoveringID).HoveringVScrollbarButton = 5 THEN
                        __UI_MouseDownOnScrollbar = TIMER
                    ELSEIF Control(__UI_HoveringID).HoveringVScrollbarButton = 3 THEN
                        IF NOT __UI_DraggingThumb THEN
                            __UI_DraggingThumb = True
                            __UI_ThumbDragTop = __UI_MouseTop
                            __UI_DraggingThumbOnID = __UI_HoveringID
                        END IF
                    ELSE
                        IF TIMER - JustEnteredTextBox =< .3 THEN
                            IF Control(__UI_Focus).Multiline THEN
                                GOTO PositionCursorMultilineTB
                            ELSE
                                'Single-line textbox contents are selected when first focused.
                                Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus))
                                Control(__UI_Focus).SelectionStart = 0
                                Control(__UI_Focus).TextIsSelected = True
                            END IF
                        ELSE
                            STATIC WholeWordSelection AS _BYTE, WholeWordCursor AS LONG, WholeWordSelStart AS LONG
                            Control(__UI_Focus).TextIsSelected = False
                            __UI_SelectedText = ""
                            __UI_SelectionLength = 0
                            WholeWordSelection = False
                            WholeWordCursor = 0
                            WholeWordSelStart = 0
                            IF Control(__UI_Focus).Multiline AND Control(__UI_Focus).HoveringVScrollbarButton = 0 THEN
                                PositionCursorMultilineTB:
                                'Multi-line textbox click (position cursor)
                                'Calculate which line was clicked
                                DIM ThisLine$, ThisLineLen AS LONG, ThisLineStart AS LONG

                                TotalLines = __UI_CountLines(__UI_Focus)
                                Control(__UI_Focus).CurrentLine = Control(__UI_Focus).FirstVisibleLine - 1 + (__UI_MouseTop - Control(__UI_Focus).Top - Control(Control(__UI_Focus).ParentID).Top) / uspacing&
                                IF Control(__UI_Focus).CurrentLine > TotalLines THEN Control(__UI_Focus).CurrentLine = TotalLines
                                IF Control(__UI_Focus).CurrentLine = 0 THEN Control(__UI_Focus).CurrentLine = 1
                                ThisLine$ = __UI_GetTextBoxLine(__UI_Focus, Control(__UI_Focus).CurrentLine, ThisLineStart)
                                ThisLineLen = LEN(ThisLine$)

                                'Print the text offscreen just to fill the right variables
                                __UI_PrintString _WIDTH + 10, _HEIGHT + 10, ThisLine$

                                'New cursor position:
                                FOR i = 1 TO __UI_LastRenderedCharCount
                                    IF (__UI_MouseLeft - Control(__UI_Focus).Left - Control(Control(__UI_Focus).ParentID).Left) >= __UI_ThisLineChars(i - 1) AND (__UI_MouseLeft - Control(__UI_Focus).Left - Control(Control(__UI_Focus).ParentID).Left) <= __UI_ThisLineChars(i) THEN
                                        Control(__UI_Focus).Cursor = ThisLineStart + i - 2
                                        EXIT FOR
                                    END IF
                                NEXT

                                IF i > __UI_LastRenderedCharCount THEN Control(__UI_Focus).Cursor = ThisLineStart + ThisLineLen - 1
                                Control(__UI_Focus).SelectionStart = Control(__UI_Focus).Cursor
                            ELSE
                                'Position cursor in single-line textbox:
                                STATIC LastCursorReposition#, LastCursorID AS LONG, LastCursor AS LONG
                                STATIC JustSelectedAWord#, ContinuedSelection AS _BYTE

                                IF TIMER - LastCursorReposition# < .3 AND LastCursorID = __UI_Focus AND i <= __UI_LastRenderedCharCount AND LastCursor = Control(__UI_Focus).Cursor THEN
                                    'Double click on this textbox, same position.
                                    'Attempt to select this "word", with "word" being
                                    'any block of characters separated by a space, comma, or similar.
                                    CONST SEP$ = " ,.?!;:()=+-*/"

                                    IF INSTR(SEP$, MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1, 1)) = 0 THEN
                                        RepositionCursorWholeWord:
                                        DO
                                            Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor - 1
                                            IF Control(__UI_Focus).Cursor = 0 THEN EXIT DO
                                        LOOP WHILE INSTR(SEP$, MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1, 1)) = 0
                                        Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor + 1

                                        IF ContinuedSelection THEN RETURN

                                        RepositionSelStartWholeWord:
                                        DO
                                            Control(__UI_Focus).SelectionStart = Control(__UI_Focus).SelectionStart + 1
                                            IF Control(__UI_Focus).SelectionStart = LEN(Text(__UI_Focus)) THEN EXIT DO
                                        LOOP WHILE INSTR(SEP$, MID$(Text(__UI_Focus), Control(__UI_Focus).SelectionStart + 1, 1)) = 0

                                        DO
                                            'Select extra spaces to the right until another character is found,
                                            'for easy "whole word" replacement/deletion
                                            IF Control(__UI_Focus).SelectionStart = LEN(Text(__UI_Focus)) THEN EXIT DO
                                            IF MID$(Text(__UI_Focus), Control(__UI_Focus).SelectionStart + 1, 1) = " " THEN
                                                Control(__UI_Focus).SelectionStart = Control(__UI_Focus).SelectionStart + 1
                                            ELSE
                                                EXIT DO
                                            END IF
                                        LOOP

                                        IF ContinuedSelection THEN RETURN

                                        Control(__UI_Focus).TextIsSelected = True
                                        JustSelectedAWord# = TIMER
                                        WholeWordSelection = True
                                        WholeWordCursor = Control(__UI_Focus).Cursor
                                        WholeWordSelStart = Control(__UI_Focus).SelectionStart
                                    END IF
                                ELSE
                                    IF TIMER - JustSelectedAWord# > .3 THEN
                                        Control(__UI_Focus).TextIsSelected = False
                                        __UI_SelectedText = ""
                                        __UI_SelectionLength = 0

                                        'Print the text offscreen just to fill the right variables
                                        __UI_PrintString _WIDTH + 10, _HEIGHT + 10, Text(__UI_Focus)

                                        'Single-line textbox click
                                        FOR i = 1 TO __UI_LastRenderedCharCount
                                            IF (__UI_MouseLeft - Control(__UI_Focus).Left - Control(Control(__UI_Focus).ParentID).Left + Control(__UI_Focus).InputViewStart) >= __UI_ThisLineChars(i - 1) AND (__UI_MouseLeft - Control(__UI_Focus).Left - Control(Control(__UI_Focus).ParentID).Left) + Control(__UI_Focus).InputViewStart <= __UI_ThisLineChars(i) THEN
                                                Control(__UI_Focus).Cursor = i - 1
                                                EXIT FOR
                                            END IF
                                        NEXT

                                        IF i > __UI_LastRenderedCharCount THEN Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus))
                                        Control(__UI_Focus).SelectionStart = Control(__UI_Focus).Cursor
                                    END IF
                                END IF

                                LastCursorReposition# = TIMER
                                LastCursorID = __UI_Focus
                                LastCursor = Control(__UI_Focus).Cursor
                            END IF
                            __UI_IsSelectingText = True
                            __UI_IsSelectingTextOnID = __UI_Focus
                        END IF
                    END IF
                ELSEIF Control(__UI_HoveringID).Type = __UI_Type_ListBox AND NOT Control(__UI_HoveringID).Disabled THEN
                    IF Control(__UI_HoveringID).HoveringVScrollbarButton = 1 OR Control(__UI_HoveringID).HoveringVScrollbarButton = 2 OR Control(__UI_HoveringID).HoveringVScrollbarButton = 4 OR Control(__UI_HoveringID).HoveringVScrollbarButton = 5 THEN
                        __UI_MouseDownOnScrollbar = TIMER
                    ELSEIF Control(__UI_HoveringID).HoveringVScrollbarButton = 3 THEN
                        IF NOT __UI_DraggingThumb THEN
                            __UI_DraggingThumb = True
                            __UI_ThumbDragTop = __UI_MouseTop
                            __UI_DraggingThumbOnID = __UI_HoveringID
                        END IF
                    END IF
                END IF
            END IF
            __UI_MouseDown __UI_HoveringID
            __UI_LastMouseDownEvent = TIMER
        ELSE
            'Mouse button is still pressed
            IF __UI_DesignMode THEN
                IF __UI_ResizeHandleHover = 0 AND (__UI_MouseTop <> __UI_MouseDownTop OR __UI_MouseLeft <> __UI_MouseDownLeft) THEN
                    IF __UI_IsDragging = False AND __UI_SelectionRectangle = False THEN
                        __UI_IsDragging = True
                        __UI_DraggingID = __UI_HoveringID
                        FOR i = 1 TO UBOUND(Control)
                            IF Control(i).ControlIsSelected AND Control(i).Type = __UI_Type_Frame THEN
                                'Frames can't be dragged with other controls
                                __UI_DraggingID = i
                                FOR i = 1 TO UBOUND(Control)
                                    IF i <> __UI_DraggingID THEN
                                        IF Control(i).ControlIsSelected THEN
                                            Control(i).ControlIsSelected = False
                                            __UI_TotalSelectedControls = __UI_TotalSelectedControls - 1
                                        END IF
                                    END IF
                                NEXT
                                EXIT FOR
                            END IF
                        NEXT
                        IF Control(__UI_FirstSelectedID).Type = __UI_Type_MenuBar OR Control(__UI_FirstSelectedID).Type = __UI_Type_MenuItem THEN
                            __UI_DraggingID = 0
                            __UI_IsDragging = False
                            __UI_MouseDownOnID = 0
                        ELSE
                            __UI_MouseDownOnID = 0
                            __UI_DragY = __UI_MouseTop
                            __UI_DragX = __UI_MouseLeft
                            OriginalDragX = __UI_DragX - Control(__UI_DraggingID).Left - Control(Control(__UI_DraggingID).ParentID).Left
                            OriginalDragY = __UI_DragY - Control(__UI_DraggingID).Top - Control(Control(__UI_DraggingID).ParentID).Top
                            IF __UI_TotalSelectedControls > 1 THEN
                                FOR i = 1 TO UBOUND(Control)
                                    IF i <> __UI_DraggingID THEN
                                        Control(i).LeftOffsetFromFirstSelected = Control(__UI_DraggingID).Left - Control(i).Left
                                        Control(i).TopOffsetFromFirstSelected = Control(__UI_DraggingID).Top - Control(i).Top
                                    END IF
                                NEXT
                            END IF
                        END IF
                    END IF
                ELSE
                    IF __UI_IsResizing = False AND __UI_SelectionRectangle = False AND Control(__UI_FirstSelectedID).Type <> __UI_Type_MenuBar AND Control(__UI_FirstSelectedID).Type <> __UI_Type_MenuItem THEN
                        __UI_IsResizing = True
                        __UI_ResizingID = __UI_HoveringID
                        __UI_MouseDownOnID = 0
                        __UI_DragY = __UI_MouseTop
                        __UI_DragX = __UI_MouseLeft
                    END IF
                END IF
            END IF

            IF TIMER - JustEnteredTextBox < .3 THEN JustEnteredTextBox = TIMER

            IF __UI_IsSelectingText THEN
                _FONT (Control(__UI_IsSelectingTextOnID).Font)
                IF NOT Control(__UI_IsSelectingTextOnID).Multiline THEN
                    'Print the text offscreen just to fill the right variables
                    __UI_PrintString _WIDTH + 10, _HEIGHT + 10, Text(__UI_Focus)
                    IF NOT WholeWordSelection THEN
                        'Single line selection, char by char


                        IF __UI_MouseLeft > Control(__UI_Focus).Left + Control(Control(__UI_Focus).ParentID).Left AND __UI_MouseLeft < Control(__UI_Focus).Left + Control(Control(__UI_Focus).ParentID).Left + Control(__UI_Focus).Width THEN
                            FOR i = 1 TO __UI_LastRenderedCharCount
                                IF (__UI_MouseLeft - Control(__UI_Focus).Left - Control(Control(__UI_Focus).ParentID).Left + Control(__UI_Focus).InputViewStart) >= __UI_ThisLineChars(i - 1) AND (__UI_MouseLeft - Control(__UI_Focus).Left - Control(Control(__UI_Focus).ParentID).Left) + Control(__UI_Focus).InputViewStart <= __UI_ThisLineChars(i) THEN
                                    Control(__UI_Focus).Cursor = i - 1
                                    EXIT FOR
                                END IF
                            NEXT
                            IF i > __UI_LastRenderedCharCount THEN Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus))
                        ELSEIF __UI_MouseLeft < Control(__UI_Focus).Left + Control(Control(__UI_Focus).ParentID).Left THEN
                            Control(__UI_Focus).Cursor = 0
                        ELSEIF __UI_MouseLeft > Control(__UI_Focus).Left + Control(Control(__UI_Focus).ParentID).Left + Control(__UI_Focus).Width THEN
                            Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus))
                        END IF

                        IF Control(__UI_IsSelectingTextOnID).Cursor <> Control(__UI_IsSelectingTextOnID).SelectionStart THEN
                            Control(__UI_IsSelectingTextOnID).TextIsSelected = True
                        ELSE
                            Control(__UI_IsSelectingTextOnID).TextIsSelected = False
                        END IF
                    ELSE
                        'Single line selection, word by word
                        DIM TempCursor AS LONG

                        IF __UI_MouseLeft > Control(__UI_Focus).Left + Control(Control(__UI_Focus).ParentID).Left AND __UI_MouseLeft < Control(__UI_Focus).Left + Control(Control(__UI_Focus).ParentID).Left + Control(__UI_Focus).Width THEN
                            FOR i = 1 TO __UI_LastRenderedCharCount
                                IF (__UI_MouseLeft - Control(__UI_Focus).Left - Control(Control(__UI_Focus).ParentID).Left + Control(__UI_Focus).InputViewStart) >= __UI_ThisLineChars(i - 1) AND (__UI_MouseLeft - Control(__UI_Focus).Left - Control(Control(__UI_Focus).ParentID).Left) + Control(__UI_Focus).InputViewStart <= __UI_ThisLineChars(i) THEN
                                    TempCursor = i - 1
                                    EXIT FOR
                                END IF
                            NEXT
                        ELSEIF __UI_MouseLeft < Control(__UI_Focus).Left + Control(Control(__UI_Focus).ParentID).Left THEN
                            TempCursor = 0
                        ELSEIF __UI_MouseLeft > Control(__UI_Focus).Left + Control(Control(__UI_Focus).ParentID).Left + Control(__UI_Focus).Width THEN
                            TempCursor = LEN(Text(__UI_Focus))
                        END IF

                        ContinuedSelection = True
                        IF TempCursor < WholeWordCursor THEN Control(__UI_Focus).Cursor = TempCursor: GOSUB RepositionCursorWholeWord
                        IF TempCursor > WholeWordSelStart THEN Control(__UI_Focus).SelectionStart = TempCursor: GOSUB RepositionSelStartWholeWord
                        IF TempCursor > WholeWordCursor AND TempCursor < WholeWordSelStart THEN Control(__UI_Focus).Cursor = WholeWordCursor: Control(__UI_Focus).SelectionStart = WholeWordSelStart

                        ContinuedSelection = False
                    END IF
                ELSE
                    'Multi-line textbox click
                    'Calculate current line
                    TotalLines = __UI_CountLines(__UI_IsSelectingTextOnID)
                    Control(__UI_IsSelectingTextOnID).CurrentLine = Control(__UI_IsSelectingTextOnID).FirstVisibleLine - 1 + (__UI_MouseTop - Control(__UI_IsSelectingTextOnID).Top - Control(Control(__UI_IsSelectingTextOnID).ParentID).Top) / uspacing&
                    IF Control(__UI_IsSelectingTextOnID).CurrentLine > TotalLines THEN Control(__UI_IsSelectingTextOnID).CurrentLine = TotalLines
                    IF Control(__UI_IsSelectingTextOnID).CurrentLine = 0 THEN Control(__UI_IsSelectingTextOnID).CurrentLine = 1
                    ThisLine$ = __UI_GetTextBoxLine(__UI_IsSelectingTextOnID, Control(__UI_IsSelectingTextOnID).CurrentLine, ThisLineStart)
                    ThisLineLen = LEN(ThisLine$)
                    __UI_PrintString _WIDTH + 10, _HEIGHT + 10, ThisLine$

                    'New cursor position:
                    FOR i = 1 TO __UI_LastRenderedCharCount
                        IF (__UI_MouseLeft - Control(__UI_IsSelectingTextOnID).Left - Control(Control(__UI_IsSelectingTextOnID).ParentID).Left) >= __UI_ThisLineChars(i - 1) AND (__UI_MouseLeft - Control(__UI_IsSelectingTextOnID).Left - Control(Control(__UI_IsSelectingTextOnID).ParentID).Left) <= __UI_ThisLineChars(i) THEN
                            Control(__UI_IsSelectingTextOnID).Cursor = ThisLineStart + i - 2
                            EXIT FOR
                        END IF
                    NEXT

                    IF i > __UI_LastRenderedCharCount THEN Control(__UI_IsSelectingTextOnID).Cursor = ThisLineStart + ThisLineLen - 1

                    IF Control(__UI_IsSelectingTextOnID).Cursor <> Control(__UI_IsSelectingTextOnID).SelectionStart THEN
                        Control(__UI_IsSelectingTextOnID).TextIsSelected = True
                    END IF
                END IF
            END IF

            IF NOT __UI_SelectionRectangle THEN
                IF __UI_MouseDownOnID <> __UI_HoveringID AND __UI_MouseDownOnID > 0 THEN
                    IF Control(__UI_HoveringID).Type = __UI_Type_MenuItem OR Control(__UI_HoveringID).Type = __UI_Type_MenuPanel THEN
                        __UI_MouseDownOnID = __UI_HoveringID
                    ELSE
                        __UI_PreviousMouseDownOnID = __UI_MouseDownOnID
                        __UI_MouseDownOnID = 0
                    END IF
                ELSEIF __UI_HoveringID = __UI_PreviousMouseDownOnID AND __UI_PreviousMouseDownOnID > 0 THEN
                    __UI_MouseDownOnID = __UI_PreviousMouseDownOnID
                    __UI_PreviousMouseDownOnID = 0
                ELSEIF __UI_MouseDownOnID = __UI_HoveringID THEN
                    IF Control(__UI_MouseDownOnID).Type = __UI_Type_ListBox THEN
                        IF NOT Control(__UI_MouseDownOnID).Disabled AND Control(__UI_MouseDownOnID).HoveringVScrollbarButton = 1 AND TIMER - __UI_MouseDownOnScrollbar > .3 THEN
                            'Mousedown on "up" button
                            Control(__UI_MouseDownOnID).InputViewStart = Control(__UI_MouseDownOnID).InputViewStart - 1
                        ELSEIF NOT Control(__UI_MouseDownOnID).Disabled AND Control(__UI_MouseDownOnID).HoveringVScrollbarButton = 2 AND TIMER - __UI_MouseDownOnScrollbar > .3 THEN
                            'Mousedown on "down" button
                            IF Control(__UI_MouseDownOnID).InputViewStart + Control(__UI_MouseDownOnID).LastVisibleItem <= Control(__UI_MouseDownOnID).Max THEN
                                Control(__UI_MouseDownOnID).InputViewStart = Control(__UI_MouseDownOnID).InputViewStart + 1
                            END IF
                        ELSEIF NOT Control(__UI_MouseDownOnID).Disabled AND Control(__UI_MouseDownOnID).HoveringVScrollbarButton = 4 AND TIMER - __UI_MouseDownOnScrollbar < .3 THEN
                            'Mousedown on "track" area above the thumb
                            Control(__UI_MouseDownOnID).InputViewStart = Control(__UI_MouseDownOnID).InputViewStart - (Control(__UI_MouseDownOnID).LastVisibleItem - 1)
                        ELSEIF NOT Control(__UI_MouseDownOnID).Disabled AND Control(__UI_MouseDownOnID).HoveringVScrollbarButton = 5 AND TIMER - __UI_MouseDownOnScrollbar < .3 THEN
                            'Mousedown on "track" area below the thumb
                            Control(__UI_MouseDownOnID).InputViewStart = Control(__UI_MouseDownOnID).InputViewStart + (Control(__UI_MouseDownOnID).LastVisibleItem - 1)
                            IF Control(__UI_MouseDownOnID).InputViewStart > Control(__UI_MouseDownOnID).Max - Control(__UI_MouseDownOnID).LastVisibleItem - 1 THEN
                                Control(__UI_MouseDownOnID).InputViewStart = Control(__UI_MouseDownOnID).Max - Control(__UI_MouseDownOnID).LastVisibleItem - 1
                            END IF
                        END IF
                    ELSEIF Control(__UI_MouseDownOnID).Type = __UI_Type_TextBox THEN
                        _FONT Control(__UI_MouseDownOnID).Font
                        IF NOT Control(__UI_MouseDownOnID).Disabled AND Control(__UI_MouseDownOnID).HoveringVScrollbarButton = 1 AND TIMER - __UI_MouseDownOnScrollbar > .3 THEN
                            'Mousedown on "up" button
                            Control(__UI_MouseDownOnID).FirstVisibleLine = Control(__UI_MouseDownOnID).FirstVisibleLine - 1
                            IF Control(__UI_MouseDownOnID).FirstVisibleLine < 0 THEN Control(__UI_MouseDownOnID).FirstVisibleLine = 1
                        ELSEIF NOT Control(__UI_MouseDownOnID).Disabled AND Control(__UI_MouseDownOnID).HoveringVScrollbarButton = 2 AND TIMER - __UI_MouseDownOnScrollbar > .3 THEN
                            'Mousedown on "down" button
                            IF Control(__UI_MouseDownOnID).FirstVisibleLine < __UI_CountLines(__UI_MouseDownOnID) - Control(__UI_MouseDownOnID).Height \ uspacing& + 1 THEN
                                Control(__UI_MouseDownOnID).FirstVisibleLine = Control(__UI_MouseDownOnID).FirstVisibleLine + 1
                            END IF
                        ELSEIF NOT Control(__UI_MouseDownOnID).Disabled AND Control(__UI_MouseDownOnID).HoveringVScrollbarButton = 4 AND TIMER - __UI_MouseDownOnScrollbar < .3 THEN
                            'Mousedown on "track" area above the thumb
                            Control(__UI_MouseDownOnID).InputViewStart = Control(__UI_MouseDownOnID).InputViewStart - (Control(__UI_MouseDownOnID).LastVisibleItem - 1)
                        ELSEIF NOT Control(__UI_MouseDownOnID).Disabled AND Control(__UI_MouseDownOnID).HoveringVScrollbarButton = 5 AND TIMER - __UI_MouseDownOnScrollbar < .3 THEN
                            'Mousedown on "track" area below the thumb
                            Control(__UI_MouseDownOnID).InputViewStart = Control(__UI_MouseDownOnID).InputViewStart + (Control(__UI_MouseDownOnID).LastVisibleItem - 1)
                            IF Control(__UI_MouseDownOnID).InputViewStart > Control(__UI_MouseDownOnID).Max - Control(__UI_MouseDownOnID).LastVisibleItem - 1 THEN
                                Control(__UI_MouseDownOnID).InputViewStart = Control(__UI_MouseDownOnID).Max - Control(__UI_MouseDownOnID).LastVisibleItem - 1
                            END IF
                        END IF
                    END IF

                    IF Control(__UI_MouseDownOnID).Type = __UI_Type_TrackBar AND NOT Control(__UI_MouseDownOnID).Disabled THEN
                        Control(__UI_HoveringID).Value = __UI_MAP((__UI_MouseLeft - (ContainerOffsetLeft + Control(__UI_HoveringID).Left)), 0, Control(__UI_HoveringID).Width, Control(__UI_HoveringID).Min, Control(__UI_HoveringID).Max)
                        IF Control(__UI_HoveringID).Value < Control(__UI_HoveringID).Min THEN
                            Control(__UI_HoveringID).Value = Control(__UI_HoveringID).Min
                        END IF
                        IF Control(__UI_HoveringID).Value > Control(__UI_HoveringID).Max THEN
                            Control(__UI_HoveringID).Value = Control(__UI_HoveringID).Max
                        END IF
                        IF Control(__UI_HoveringID).PreviousValue <> Control(__UI_HoveringID).Value THEN __UI_ValueChanged __UI_MouseDownOnID
                    END IF
                END IF
            END IF

            IF __UI_MouseDownOnID = 0 AND Control(__UI_PreviousMouseDownOnID).Type = __UI_Type_TrackBar AND NOT Control(__UI_PreviousMouseDownOnID).Disabled THEN
                Control(__UI_PreviousMouseDownOnID).Value = __UI_MAP((__UI_MouseLeft - (Control(Control(__UI_PreviousMouseDownOnID).ParentID).Left + Control(__UI_PreviousMouseDownOnID).Left)), 0, Control(__UI_PreviousMouseDownOnID).Width, Control(__UI_PreviousMouseDownOnID).Min, Control(__UI_PreviousMouseDownOnID).Max)
                IF Control(__UI_PreviousMouseDownOnID).Value > Control(__UI_PreviousMouseDownOnID).Max THEN Control(__UI_PreviousMouseDownOnID).Value = Control(__UI_PreviousMouseDownOnID).Max
                IF Control(__UI_PreviousMouseDownOnID).Value < Control(__UI_PreviousMouseDownOnID).Min THEN Control(__UI_PreviousMouseDownOnID).Value = Control(__UI_PreviousMouseDownOnID).Min
                IF Control(__UI_PreviousMouseDownOnID).PreviousValue <> Control(__UI_PreviousMouseDownOnID).Value THEN __UI_ValueChanged __UI_PreviousMouseDownOnID
            END IF

        END IF
    ELSE
        'Mouse button is released
        IF __UI_MouseIsDown THEN
            IF __UI_IsDragging THEN
                __UI_IsDragging = False
                __UI_DraggingID = 0
                __UI_Snapped = 0
                __UI_ForceRedraw = True
            END IF
            IF __UI_IsResizing THEN
                __UI_IsResizing = False
                __UI_ResizingID = 0
            END IF
            IF __UI_DraggingThumb THEN
                __UI_DraggingThumb = False
                __UI_DraggingThumbOnID = 0
            END IF

            'Fire __UI_MouseUp
            IF __UI_PreviousMouseDownOnID > 0 THEN
                __UI_MouseUp __UI_PreviousMouseDownOnID
            ELSE
                IF __UI_MouseDownOnID > 0 THEN __UI_MouseUp __UI_MouseDownOnID
            END IF

            'Click
            IF NOT __UI_DesignMode AND __UI_MouseDownOnID = __UI_HoveringID AND __UI_HoveringID > 0 THEN
                IF NOT Control(__UI_HoveringID).Disabled THEN
                    SELECT CASE Control(__UI_HoveringID).Type
                        CASE __UI_Type_RadioButton
                            SetRadioButtonValue __UI_HoveringID
                        CASE __UI_Type_CheckBox
                            Control(__UI_HoveringID).Value = NOT Control(__UI_HoveringID).Value
                        CASE __UI_Type_TextBox
                            DIM TempNewCursor AS LONG
                            STATIC LastTextBoxClick AS DOUBLE, LastTextBoxClickID AS LONG

                            IF Control(__UI_HoveringID).HasVScrollbar AND __UI_MouseLeft >= Control(__UI_HoveringID).Left + Control(__UI_HoveringID).Width - 25 + ContainerOffsetLeft THEN
                                'Control has a vertical scrollbar and it's been clicked
                                IF __UI_MouseTop >= Control(__UI_HoveringID).Top + ContainerOffsetTop AND NOT Control(__UI_HoveringID).Disabled AND __UI_MouseTop <= Control(__UI_HoveringID).Top + ContainerOffsetTop + __UI_ScrollbarButtonHeight THEN
                                    'Click on "up" button
                                    Control(__UI_MouseDownOnID).FirstVisibleLine = Control(__UI_MouseDownOnID).FirstVisibleLine - 1
                                    IF Control(__UI_MouseDownOnID).FirstVisibleLine < 0 THEN Control(__UI_MouseDownOnID).FirstVisibleLine = 1
                                ELSEIF __UI_MouseTop >= Control(__UI_HoveringID).VScrollbarButton2Top + ContainerOffsetTop AND NOT Control(__UI_HoveringID).Disabled THEN
                                    'Click on "down" button
                                    IF Control(__UI_MouseDownOnID).FirstVisibleLine < __UI_CountLines(__UI_MouseDownOnID) - Control(__UI_MouseDownOnID).Height \ uspacing& + 1 THEN
                                        Control(__UI_MouseDownOnID).FirstVisibleLine = Control(__UI_MouseDownOnID).FirstVisibleLine + 1
                                    END IF
                                END IF
                            ELSE
                                IF TIMER - JustEnteredTextBox > .3 THEN
                                    _FONT (Control(__UI_HoveringID).Font)
                                    'IF NOT Control(__UI_HoveringID).Multiline THEN
                                    '    'Single-line textbox
                                    '    TempNewCursor = ((__UI_MouseLeft - (Control(__UI_HoveringID).Left + Control(Control(__UI_HoveringID).ParentID).Left)) / _FONTWIDTH) + (Control(__UI_HoveringID).InputViewStart - 1)
                                    '    IF __UI_HoveringID = LastTextBoxClickID AND TIMER - LastTextBoxClick < .3 AND TempNewCursor = Control(__UI_HoveringID).Cursor THEN
                                    '        'Double click in a textbox to select it all
                                    '        IF LEN(Text(__UI_HoveringID)) > 0 THEN
                                    '            Control(__UI_HoveringID).Cursor = LEN(Text(__UI_HoveringID))
                                    '            Control(__UI_HoveringID).SelectionStart = 0
                                    '            Control(__UI_HoveringID).TextIsSelected = True
                                    '        END IF
                                    '    ELSE
                                    '        Control(__UI_HoveringID).Cursor = TempNewCursor
                                    '        IF Control(__UI_HoveringID).Cursor > LEN(Text(__UI_HoveringID)) THEN Control(__UI_HoveringID).Cursor = LEN(Text(__UI_HoveringID))
                                    '    END IF
                                    '    LastTextBoxClick = TIMER
                                    '    LastTextBoxClickID = __UI_HoveringID
                                    'ELSE
                                    '    'Multiline textbox
                                    'END IF
                                END IF
                            END IF
                        CASE __UI_Type_ListBox
                            IF Control(__UI_HoveringID).HasVScrollbar AND __UI_MouseLeft >= Control(__UI_HoveringID).Left + Control(__UI_HoveringID).Width - 25 + ContainerOffsetLeft THEN
                                'Control has a vertical scrollbar and it's been clicked
                                IF __UI_MouseTop >= Control(__UI_HoveringID).Top + ContainerOffsetTop AND NOT Control(__UI_HoveringID).Disabled AND __UI_MouseTop <= Control(__UI_HoveringID).Top + ContainerOffsetTop + __UI_ScrollbarButtonHeight THEN
                                    'Click on "up" button
                                    Control(__UI_HoveringID).InputViewStart = Control(__UI_HoveringID).InputViewStart - 1
                                ELSEIF __UI_MouseTop >= Control(__UI_HoveringID).VScrollbarButton2Top + ContainerOffsetTop AND NOT Control(__UI_HoveringID).Disabled THEN
                                    'Click on "down" button
                                    IF Control(__UI_HoveringID).InputViewStart + Control(__UI_HoveringID).LastVisibleItem <= Control(__UI_HoveringID).Max THEN
                                        Control(__UI_HoveringID).InputViewStart = Control(__UI_HoveringID).InputViewStart + 1
                                    END IF
                                END IF
                            ELSE
                                _FONT Control(__UI_HoveringID).Font
                                ThisItem% = ((__UI_MouseTop - (ContainerOffsetTop + Control(__UI_HoveringID).Top)) \ uspacing&) + Control(__UI_HoveringID).InputViewStart
                                IF ThisItem% >= Control(__UI_HoveringID).Min AND ThisItem% <= Control(__UI_HoveringID).Max THEN
                                    Control(__UI_HoveringID).Value = ThisItem%
                                ELSE
                                    Control(__UI_HoveringID).Value = 0
                                END IF

                                IF __UI_HoveringID = __UI_ActiveDropdownList THEN
                                    __UI_Focus = __UI_ParentDropdownList
                                    Control(__UI_ParentDropdownList).Value = Control(__UI_ActiveDropdownList).Value
                                    IF Control(__UI_ParentDropdownList).PreviousValue <> Control(__UI_ParentDropdownList).Value THEN __UI_ValueChanged __UI_ParentDropdownList
                                    __UI_DestroyControl Control(__UI_ActiveDropdownList)
                                ELSE
                                    IF Control(__UI_HoveringID).PreviousValue <> Control(__UI_HoveringID).Value THEN __UI_ValueChanged __UI_HoveringID
                                END IF
                            END IF
                        CASE __UI_Type_DropdownList
                            IF __UI_ActiveDropdownList = 0 THEN
                                __UI_ActivateDropdownlist Control(__UI_HoveringID)
                            ELSE
                                __UI_DestroyControl Control(__UI_ActiveDropdownList)
                            END IF
                        CASE __UI_Type_MenuBar
                            IF __UI_ActiveMenu > 0 AND NOT __UI_JustOpenedMenu THEN
                                __UI_Focus = __UI_PreviousFocus
                            END IF
                        CASE __UI_Type_MenuItem
                            __UI_Focus = __UI_PreviousFocus
                            __UI_DestroyControl Control(__UI_ActiveMenu)
                            __UI_ForceRedraw = True
                    END SELECT
                    __UI_LastMouseClick = TIMER
                    __UI_JustOpenedMenu = False
                    __UI_MouseDownOnID = 0

                    ProcessClick:
                    IF RTRIM$(Control(Control(__UI_HoveringID).ParentID).Name) = "__UI_TextFieldMenu" OR RTRIM$(Control(Control(__UI_HoveringID).ParentID).Name) = "__UI_PreviewMenu" THEN
                        'Internal context menus - Text field/Design mode options
                        IF RTRIM$(Control(Control(__UI_HoveringID).ParentID).Name) = "__UI_TextFieldMenu" THEN
                            __UI_Focus = __UI_PreviousFocus
                        ELSEIF RTRIM$(Control(Control(__UI_HoveringID).ParentID).Name) = "__UI_PreviewMenu" THEN
                            __UI_DestroyControl Control(__UI_ActiveMenu)
                        END IF

                        ProcessHotkey:
                        IF UCASE$(LEFT$(Control(__UI_HoveringID).Name, 16)) = "__UI_PREVIEWMENU" THEN __UI_KeyPress 216
                        SELECT CASE UCASE$(RTRIM$(Control(__UI_HoveringID).Name))
                            CASE "__UI_TEXTMENUCUT"
                                IF LEN(__UI_SelectedText) > 0 THEN
                                    _CLIPBOARD$ = __UI_SelectedText
                                    __UI_DeleteSelection
                                END IF
                            CASE "__UI_TEXTMENUCOPY"
                                IF LEN(__UI_SelectedText) > 0 THEN _CLIPBOARD$ = __UI_SelectedText
                            CASE "__UI_TEXTMENUPASTE"
                                DIM ContextMenuPaste AS _BYTE
                                ContextMenuPaste = True
                                GOSUB PasteIntoTextBox
                            CASE "__UI_TEXTMENUDELETE"
                                __UI_DeleteSelection
                            CASE "__UI_TEXTMENUSELECT"
                                IF LEN(Text(__UI_Focus)) > 0 THEN
                                    Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus))
                                    Control(__UI_Focus).SelectionStart = 0
                                    Control(__UI_Focus).TextIsSelected = True
                                END IF
                            CASE "__UI_PREVIEWMENUALIGNLEFT"
                                IF __UI_TotalSelectedControls > 1 THEN
                                    DIM LeftMost AS INTEGER
                                    LeftMost = Control(__UI_FormID).Width
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            IF Control(i).Left < LeftMost THEN LeftMost = Control(i).Left
                                        END IF
                                    NEXT
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            __UI_Click 0 'Force the preview to inform it was edited
                                            Control(i).Left = LeftMost
                                        END IF
                                    NEXT
                                END IF
                            CASE "__UI_PREVIEWMENUALIGNRIGHT"
                                IF __UI_TotalSelectedControls > 1 THEN
                                    DIM RightMost AS INTEGER
                                    RightMost = 0
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            IF Control(i).Left + Control(i).Width - 1 > RightMost THEN RightMost = Control(i).Left + Control(i).Width - 1
                                        END IF
                                    NEXT
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            __UI_Click 0 'Force the preview to inform it was edited
                                            Control(i).Left = RightMost - (Control(i).Width - 1)
                                        END IF
                                    NEXT
                                END IF
                            CASE "__UI_PREVIEWMENUALIGNCENTERV"
                                IF __UI_TotalSelectedControls = 1 THEN
                                    IF Control(__UI_FirstSelectedID).ParentID = 0 THEN
                                        Control(__UI_FirstSelectedID).Top = Control(__UI_FormID).Height / 2 - Control(__UI_FirstSelectedID).Height / 2
                                    ELSE
                                        Control(__UI_FirstSelectedID).Top = Control(Control(__UI_FirstSelectedID).ParentID).Height / 2 - Control(__UI_FirstSelectedID).Height / 2
                                    END IF
                                ELSEIF __UI_TotalSelectedControls > 1 THEN
                                    DIM TopMost AS INTEGER, BottomMost AS INTEGER, SelectionHeight AS INTEGER
                                    DIM TopDifference AS INTEGER, NewTopMost AS INTEGER
                                    IF Control(__UI_FirstSelectedID).ParentID = 0 THEN
                                        TopMost = Control(__UI_FormID).Height
                                    ELSE
                                        TopMost = Control(Control(__UI_FirstSelectedID).ParentID).Height
                                    END IF
                                    BottomMost = 0
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            __UI_Click 0 'Force the preview to inform it was edited
                                            IF Control(i).Top < TopMost THEN TopMost = Control(i).Top
                                            IF Control(i).Top + Control(i).Height - 1 > BottomMost THEN BottomMost = Control(i).Top + Control(i).Height - 1
                                        END IF
                                    NEXT
                                    SelectionHeight = BottomMost - TopMost
                                    IF Control(__UI_FirstSelectedID).ParentID = 0 THEN
                                        NewTopMost = Control(__UI_FormID).Height / 2 - SelectionHeight / 2
                                    ELSE
                                        NewTopMost = Control(Control(__UI_FirstSelectedID).ParentID).Height / 2 - SelectionHeight / 2
                                    END IF
                                    TopDifference = TopMost - NewTopMost
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            __UI_Click 0 'Force the preview to inform it was edited
                                            Control(i).Top = Control(i).Top - TopDifference
                                        END IF
                                    NEXT
                                END IF
                            CASE "__UI_PREVIEWMENUALIGNCENTERH"
                                IF __UI_TotalSelectedControls = 1 THEN
                                    IF Control(__UI_FirstSelectedID).ParentID = 0 THEN
                                        Control(__UI_FirstSelectedID).Left = Control(__UI_FormID).Width / 2 - Control(__UI_FirstSelectedID).Width / 2
                                    ELSE
                                        Control(__UI_FirstSelectedID).Left = Control(Control(__UI_FirstSelectedID).ParentID).Width / 2 - Control(__UI_FirstSelectedID).Width / 2
                                    END IF
                                ELSEIF __UI_TotalSelectedControls > 1 THEN
                                    DIM SelectionWidth AS INTEGER
                                    DIM LeftDifference AS INTEGER, NewLeftMost AS INTEGER
                                    IF Control(__UI_FirstSelectedID).ParentID = 0 THEN
                                        LeftMost = Control(__UI_FormID).Width
                                    ELSE
                                        LeftMost = Control(Control(__UI_FirstSelectedID).ParentID).Width
                                    END IF
                                    RightMost = 0
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            IF Control(i).Left < LeftMost THEN LeftMost = Control(i).Left
                                            IF Control(i).Left + Control(i).Width - 1 > RightMost THEN RightMost = Control(i).Left + Control(i).Width - 1
                                        END IF
                                    NEXT
                                    SelectionWidth = RightMost - LeftMost
                                    IF Control(__UI_FirstSelectedID).ParentID = 0 THEN
                                        NewLeftMost = Control(__UI_FormID).Width / 2 - SelectionWidth / 2
                                    ELSE
                                        NewLeftMost = Control(Control(__UI_FirstSelectedID).ParentID).Width / 2 - SelectionWidth / 2
                                    END IF
                                    LeftDifference = LeftMost - NewLeftMost
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            __UI_Click 0 'Force the preview to inform it was edited
                                            Control(i).Left = Control(i).Left - LeftDifference
                                        END IF
                                    NEXT
                                END IF
                            CASE "__UI_PREVIEWMENUALIGNCENTERSV"
                                IF __UI_TotalSelectedControls > 1 THEN
                                    IF Control(__UI_FirstSelectedID).ParentID = 0 THEN
                                        TopMost = Control(__UI_FormID).Height
                                    ELSE
                                        TopMost = Control(Control(__UI_FirstSelectedID).ParentID).Height
                                    END IF
                                    BottomMost = 0
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            IF Control(i).Top < TopMost THEN TopMost = Control(i).Top
                                            IF Control(i).Top + Control(i).Height - 1 > BottomMost THEN BottomMost = Control(i).Top + Control(i).Height - 1
                                        END IF
                                    NEXT
                                    SelectionHeight = BottomMost - TopMost
                                    NewTopMost = TopMost + SelectionHeight / 2
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            __UI_Click 0 'Force the preview to inform it was edited
                                            Control(i).Top = NewTopMost - Control(i).Height / 2
                                        END IF
                                    NEXT
                                END IF
                            CASE "__UI_PREVIEWMENUALIGNCENTERSH"
                                IF __UI_TotalSelectedControls > 1 THEN
                                    IF Control(__UI_FirstSelectedID).ParentID = 0 THEN
                                        LeftMost = Control(__UI_FormID).Width
                                    ELSE
                                        LeftMost = Control(Control(__UI_FirstSelectedID).ParentID).Width
                                    END IF
                                    RightMost = 0
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            IF Control(i).Left < LeftMost THEN LeftMost = Control(i).Left
                                            IF Control(i).Left + Control(i).Width - 1 > RightMost THEN RightMost = Control(i).Left + Control(i).Width - 1
                                        END IF
                                    NEXT
                                    SelectionWidth = RightMost - LeftMost
                                    NewLeftMost = LeftMost + SelectionWidth / 2
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            __UI_Click 0 'Force the preview to inform it was edited
                                            Control(i).Left = NewLeftMost - Control(i).Width / 2
                                        END IF
                                    NEXT
                                END IF
                            CASE "__UI_PREVIEWMENUALIGNTOPS"
                                IF __UI_TotalSelectedControls > 1 THEN
                                    TopMost = Control(__UI_FormID).Height
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            IF Control(i).Top < TopMost THEN TopMost = Control(i).Top
                                        END IF
                                    NEXT
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            __UI_Click 0 'Force the preview to inform it was edited
                                            Control(i).Top = TopMost
                                        END IF
                                    NEXT
                                END IF
                            CASE "__UI_PREVIEWMENUALIGNBOTTOMS"
                                IF __UI_TotalSelectedControls > 1 THEN
                                    BottomMost = 0
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            IF Control(i).Top + Control(i).Height - 1 > BottomMost THEN BottomMost = Control(i).Top + Control(i).Height - 1
                                        END IF
                                    NEXT
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected THEN
                                            __UI_Click 0 'Force the preview to inform it was edited
                                            Control(i).Top = BottomMost - (Control(i).Height - 1)
                                        END IF
                                    NEXT
                                END IF
                            CASE "__UI_PREVIEWMENUDISTRIBUTEH"
                                'Build a sublist containing the selected controls in the order they
                                'are currently placed horizontally:
                                REDIM SubList(1 TO __UI_TotalSelectedControls) AS LONG
                                DIM FindLefts AS INTEGER, NextControlToDistribute AS LONG
                                DIM TotalSpace AS INTEGER, BinSize AS INTEGER

                                __UI_AutoRefresh = False
                                FOR FindLefts = 0 TO Control(__UI_FormID).Width - 1
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected AND Control(i).Left = FindLefts THEN
                                            IF NextControlToDistribute > 0 THEN
                                                IF SubList(NextControlToDistribute) <> i THEN
                                                    NextControlToDistribute = NextControlToDistribute + 1
                                                    SubList(NextControlToDistribute) = i
                                                    EXIT FOR
                                                END IF
                                            ELSE
                                                NextControlToDistribute = NextControlToDistribute + 1
                                                SubList(NextControlToDistribute) = i
                                                EXIT FOR
                                            END IF
                                        END IF
                                    NEXT
                                    IF NextControlToDistribute = __UI_TotalSelectedControls THEN EXIT FOR
                                NEXT

                                TotalSpace = (Control(SubList(__UI_TotalSelectedControls)).Left + Control(SubList(__UI_TotalSelectedControls)).Width) - Control(SubList(1)).Left
                                FOR i = 1 TO __UI_TotalSelectedControls
                                    TotalSpace = TotalSpace - Control(SubList(i)).Width
                                NEXT

                                BinSize = TotalSpace \ (__UI_TotalSelectedControls - 1)
                                FindLefts = Control(SubList(1)).Left - BinSize
                                FOR i = 1 TO __UI_TotalSelectedControls
                                    __UI_Click 0 'Force the preview to inform it was edited
                                    FindLefts = FindLefts + BinSize
                                    Control(SubList(i)).Left = FindLefts
                                    FindLefts = FindLefts + Control(SubList(i)).Width
                                NEXT

                                __UI_AutoRefresh = True
                                __UI_ForceRedraw = True
                            CASE "__UI_PREVIEWMENUDISTRIBUTEV"
                                'Build a sublist containing the selected controls in the order they
                                'are currently placed vertically:
                                REDIM SubList(1 TO __UI_TotalSelectedControls) AS LONG
                                DIM FindTops AS INTEGER

                                __UI_AutoRefresh = False
                                FOR FindTops = 0 TO Control(__UI_FormID).Height - 1
                                    FOR i = 1 TO UBOUND(Control)
                                        IF Control(i).ControlIsSelected AND Control(i).Top = FindTops THEN
                                            IF NextControlToDistribute > 0 THEN
                                                IF SubList(NextControlToDistribute) <> i THEN
                                                    NextControlToDistribute = NextControlToDistribute + 1
                                                    SubList(NextControlToDistribute) = i
                                                    EXIT FOR
                                                END IF
                                            ELSE
                                                NextControlToDistribute = NextControlToDistribute + 1
                                                SubList(NextControlToDistribute) = i
                                                EXIT FOR
                                            END IF
                                        END IF
                                    NEXT
                                    IF NextControlToDistribute = __UI_TotalSelectedControls THEN EXIT FOR
                                NEXT

                                TotalSpace = (Control(SubList(__UI_TotalSelectedControls)).Top + Control(SubList(__UI_TotalSelectedControls)).Height) - Control(SubList(1)).Top
                                FOR i = 1 TO __UI_TotalSelectedControls
                                    TotalSpace = TotalSpace - Control(SubList(i)).Height
                                NEXT

                                BinSize = TotalSpace \ (__UI_TotalSelectedControls - 1)
                                FindTops = Control(SubList(1)).Top - BinSize
                                FOR i = 1 TO __UI_TotalSelectedControls
                                    __UI_Click 0 'Force the preview to inform it was edited
                                    FindTops = FindTops + BinSize
                                    Control(SubList(i)).Top = FindTops
                                    FindTops = FindTops + Control(SubList(i)).Height
                                NEXT

                                __UI_AutoRefresh = True
                                __UI_ForceRedraw = True
                            CASE "__UI_PREVIEWMENUCOPY": GOTO ControlCopy
                            CASE "__UI_PREVIEWMENUPASTE": GOTO ControlPaste
                            CASE "__UI_PREVIEWMENUDELETE": GOTO ControlDelete
                            CASE "__UI_PREVIEWMENUSELECT": GOTO ControlSelect
                        END SELECT
                        __UI_KeyPress __UI_Focus
                    ELSE
                        __UI_Click __UI_HoveringID
                    END IF
                ELSE
                    IF __UI_ActiveMenu > 0 THEN
                        __UI_DestroyControl Control(__UI_ActiveMenu)
                        __UI_Focus = __UI_PreviousFocus
                        __UI_ForceRedraw = True
                    END IF
                END IF
            END IF
            __UI_IsSelectingText = False
            __UI_IsSelectingTextOnID = 0
            __UI_MouseIsDown = False
            __UI_MouseDownOnID = 0
            __UI_PreviousMouseDownOnID = 0
            __UI_SelectionRectangle = False
        END IF
    END IF

    'Drag update
    IF __UI_IsDragging AND __UI_DraggingID = __UI_FormID THEN __UI_IsDragging = False

    __UI_Snapped = False
    __UI_SnappedX = -1
    __UI_SnappedY = -1

    DIM SetNewParent AS _BYTE, LeftOffset AS INTEGER, TopOffset AS INTEGER
    IF __UI_IsDragging AND __UI_DraggingID > 0 THEN
        __UI_Click 0 'Force the preview to inform it was edited
        IF Control(__UI_DraggingID).Type <> __UI_Type_Frame THEN
            IF Control(__UI_BelowHoveringID).Type = __UI_Type_Frame OR Control(__UI_HoveringID).Type = __UI_Type_Frame THEN
                IF Control(__UI_HoveringID).Type = __UI_Type_Frame THEN __UI_BelowHoveringID = __UI_HoveringID
                IF Control(__UI_FirstSelectedID).ParentID <> __UI_BelowHoveringID THEN
                    SetNewParent = True
                    LeftOffset = Control(__UI_BelowHoveringID).Left
                    TopOffset = Control(__UI_BelowHoveringID).Top
                END IF
            ELSEIF Control(__UI_BelowHoveringID).Type = __UI_Type_Form OR __UI_BelowHoveringID = 0 THEN
                IF Control(__UI_FirstSelectedID).ParentID > 0 THEN
                    LeftOffset = Control(Control(__UI_FirstSelectedID).ParentID).Left
                    TopOffset = Control(Control(__UI_FirstSelectedID).ParentID).Top
                    __UI_BelowHoveringID = 0
                    SetNewParent = True
                END IF
            END IF
        END IF

        FOR i = 1 TO UBOUND(Control)
            IF Control(i).ControlIsSelected THEN
                Control(i).Top = Control(i).Top + (__UI_MouseTop - __UI_DragY)
                Control(i).Left = Control(i).Left + (__UI_MouseLeft - __UI_DragX)

                IF SetNewParent THEN
                    Control(i).ParentID = __UI_BelowHoveringID
                    Control(i).ParentName = Control(__UI_BelowHoveringID).Name
                    IF __UI_BelowHoveringID = 0 THEN
                        Control(i).Top = Control(i).Top + TopOffset
                        Control(i).Left = Control(i).Left + LeftOffset
                    ELSE
                        Control(i).Top = Control(i).Top - TopOffset
                        Control(i).Left = Control(i).Left - LeftOffset
                    END IF
                END IF
            END IF
        NEXT

        IF (_KEYDOWN(100305) = 0 AND _KEYDOWN(100306) = 0) AND __UI_SnapLines THEN
            'How far the mouse is from the currently being dragged control:
            DIM MouseXOffset AS INTEGER, MouseYOffset AS INTEGER
            'How distant from the neighboring snapped control's edge we are:
            DIM XSnapOffset AS INTEGER, YSnapOffset AS INTEGER
            'Last snap coordinates, for priority comparison:
            DIM PrevXSnapOffset AS INTEGER, PrevYSnapOffset AS INTEGER
            'Identify which nearby control is closer
            DIM ClosestNeighborX AS INTEGER, ClosestNeighborY AS INTEGER

            'Look for a control nearby to which this one may be aligned automatically

            PrevXSnapOffset = 10
            PrevYSnapOffset = 10
            ClosestNeighborX = Control(__UI_FormID).Width
            ClosestNeighborY = Control(__UI_FormID).Height

            MouseYOffset = ABS(__UI_MouseTop - (Control(__UI_DraggingID).Top + Control(Control(__UI_DraggingID).ParentID).Top + OriginalDragY))
            MouseXOffset = ABS(__UI_MouseLeft - (Control(__UI_DraggingID).Left + Control(Control(__UI_DraggingID).ParentID).Left + OriginalDragX))
            FOR i = 1 TO UBOUND(Control)
                IF Control(i).ParentID = Control(__UI_DraggingID).ParentID AND Control(i).Type > 0 AND _
                    i <> __UI_DraggingID AND Control(i).Type <> __UI_Type_ContextMenu AND Control(i).Type <> __UI_Type_Form AND Control(i).Type <> __UI_Type_Font AND Control(i).Type <> __UI_Type_MenuItem AND Control(i).Type <> __UI_Type_MenuBar AND Control(i).Type <> __UI_Type_MenuPanel AND _
                    Control(i).ControlIsSelected = False THEN

                    'Tops:
                    YSnapOffset = ABS((Control(i).Top + Control(Control(i).ParentID).Top) - (Control(__UI_DraggingID).Top + Control(Control(__UI_DraggingID).ParentID).Top))
                    IF YSnapOffset < 5 AND YSnapOffset < PrevYSnapOffset AND MouseYOffset < 10 THEN
                        PrevYSnapOffset = YSnapOffset
                        Control(__UI_DraggingID).Top = Control(i).Top + Control(Control(i).ParentID).Top
                        __UI_Snapped = True
                        __UI_SnappedY = Control(i).Top + Control(Control(i).ParentID).Top
                        __UI_SnappedYID = i
                    END IF

                    'Middles:
                    YSnapOffset = ABS((Control(i).Top + Control(i).Height / 2 + Control(Control(i).ParentID).Top) - (Control(__UI_DraggingID).Top + Control(__UI_DraggingID).Height / 2 + Control(Control(__UI_DraggingID).ParentID).Top))
                    IF YSnapOffset < 5 AND YSnapOffset < PrevYSnapOffset AND MouseYOffset < 10 THEN
                        PrevYSnapOffset = YSnapOffset
                        Control(__UI_DraggingID).Top = Control(i).Top + Control(i).Height / 2 - Control(__UI_DraggingID).Height / 2 + Control(Control(i).ParentID).Top
                        __UI_Snapped = True
                        __UI_SnappedY = Control(i).Top + Control(i).Height / 2 + Control(Control(i).ParentID).Top
                        __UI_SnappedYID = i
                    END IF

                    'Bases:
                    YSnapOffset = ABS((Control(i).Top + Control(i).Height + Control(Control(i).ParentID).Top) - (Control(__UI_DraggingID).Top + Control(__UI_DraggingID).Height + Control(Control(__UI_DraggingID).ParentID).Top))
                    IF YSnapOffset < 5 AND YSnapOffset < PrevYSnapOffset AND MouseYOffset < 10 THEN
                        PrevYSnapOffset = YSnapOffset
                        Control(__UI_DraggingID).Top = Control(i).Top + Control(i).Height - Control(__UI_DraggingID).Height + Control(Control(i).ParentID).Top
                        __UI_Snapped = True
                        __UI_SnappedY = Control(i).Top + Control(i).Height + Control(Control(i).ParentID).Top
                        __UI_SnappedYID = i
                    END IF

                    'Lefts:
                    XSnapOffset = ABS((Control(i).Left + Control(Control(i).ParentID).Left) - (Control(__UI_DraggingID).Left + Control(Control(__UI_DraggingID).ParentID).Left))
                    IF XSnapOffset < 5 AND XSnapOffset < PrevXSnapOffset AND MouseXOffset < 10 THEN
                        PrevXSnapOffset = XSnapOffset
                        Control(__UI_DraggingID).Left = Control(i).Left + Control(Control(i).ParentID).Left
                        __UI_Snapped = True
                        __UI_SnappedX = Control(i).Left + Control(Control(i).ParentID).Left
                        __UI_SnappedXID = i
                    END IF

                    'Centers:
                    XSnapOffset = ABS((Control(i).Left + Control(i).Width / 2 + Control(Control(i).ParentID).Left) - (Control(__UI_DraggingID).Left + Control(__UI_DraggingID).Width / 2 + Control(Control(__UI_DraggingID).ParentID).Left))
                    IF XSnapOffset < 5 AND XSnapOffset < PrevXSnapOffset AND MouseXOffset < 10 THEN
                        PrevXSnapOffset = XSnapOffset
                        Control(__UI_DraggingID).Left = Control(i).Left + Control(i).Width / 2 - Control(__UI_DraggingID).Width / 2 + Control(Control(i).ParentID).Left
                        __UI_Snapped = True
                        __UI_SnappedX = Control(i).Left + Control(i).Width / 2 + Control(Control(i).ParentID).Left
                        __UI_SnappedXID = i
                    END IF

                    'Rights:
                    XSnapOffset = ABS((Control(i).Left + Control(i).Width + Control(Control(i).ParentID).Left) - (Control(__UI_DraggingID).Left + Control(__UI_DraggingID).Width + Control(Control(__UI_DraggingID).ParentID).Left))
                    IF XSnapOffset < 5 AND XSnapOffset < PrevXSnapOffset AND MouseXOffset < 10 THEN
                        PrevXSnapOffset = XSnapOffset
                        Control(__UI_DraggingID).Left = Control(i).Left + Control(i).Width - Control(__UI_DraggingID).Width + Control(Control(i).ParentID).Left
                        __UI_Snapped = True
                        __UI_SnappedX = Control(i).Left + Control(i).Width + Control(Control(i).ParentID).Left
                        __UI_SnappedXID = i
                    END IF
                END IF
            NEXT
        END IF

        IF (_KEYDOWN(100305) OR _KEYDOWN(100306)) THEN __UI_Snapped = False: __UI_SnappedX = -1: __UI_SnappedY=-1

        IF __UI_SnappedX = -1 THEN Control(__UI_DraggingID).Left = __UI_MouseLeft - OriginalDragX
        IF __UI_SnappedY = -1 THEN Control(__UI_DraggingID).Top = __UI_MouseTop - OriginalDragY

        Control(__UI_DraggingID).Left = Control(__UI_DraggingID).Left - Control(Control(__UI_DraggingID).ParentID).Left
        Control(__UI_DraggingID).Top = Control(__UI_DraggingID).Top - Control(Control(__UI_DraggingID).ParentID).Top

        IF __UI_TotalSelectedControls > 1 THEN
            FOR i = 1 TO UBOUND(Control)
                IF Control(i).ControlIsSelected AND i <> __UI_DraggingID THEN
                    Control(i).Left = Control(__UI_DraggingID).Left - Control(i).LeftOffsetFromFirstSelected
                    Control(i).Top = Control(__UI_DraggingID).Top - Control(i).TopOffsetFromFirstSelected
                END IF
            NEXT
        END IF

        __UI_DragY = __UI_MouseTop
        __UI_DragX = __UI_MouseLeft

        END IF
    IF __UI_IsResizing AND __UI_ResizingID > 0 THEN
        __UI_Click 0 'Force the preview to inform it was edited
        __UI_ForceRedraw = True
        FOR i = 1 TO UBOUND(Control)
            IF Control(i).ControlIsSelected THEN
                'Right
                IF __UI_ResizeHandleHover = 1 THEN
                    IF __UI_ShiftIsDown THEN
                        Control(i).Width = Control(i).Width + (2 * (__UI_MouseLeft - __UI_DragX)): IF Control(i).Width < 4 THEN Control(i).Width = 4
                        IF Control(i).Width > 4 THEN Control(i).Left = Control(i).Left - (__UI_MouseLeft - __UI_DragX)
                    ELSE
                        Control(i).Width = Control(i).Width + (__UI_MouseLeft - __UI_DragX): IF Control(i).Width < 4 THEN Control(i).Width = 4
                    END IF
                END IF
                'Bottom
                IF __UI_ResizeHandleHover = 2 THEN
                    IF __UI_ShiftIsDown THEN
                        Control(i).Height = Control(i).Height + (2 * (__UI_MouseTop - __UI_DragY)): IF Control(i).Height < 4 THEN Control(i).Height = 4
                        IF Control(i).Height > 4 THEN Control(i).Top = Control(i).Top - (__UI_MouseTop - __UI_DragY)
                    ELSE
                        Control(i).Height = Control(i).Height + (__UI_MouseTop - __UI_DragY): IF Control(i).Height < 4 THEN Control(i).Height = 4
                    END IF
                END IF
                'Left
                IF __UI_ResizeHandleHover = 3 THEN
                    IF __UI_ShiftIsDown THEN
                        Control(i).Width = Control(i).Width - (2 * (__UI_MouseLeft - __UI_DragX)): IF Control(i).Width < 4 THEN Control(i).Width = 4
                        IF Control(i).Width > 4 THEN Control(i).Left = Control(i).Left + (__UI_MouseLeft - __UI_DragX)
                    ELSE
                        Control(i).Width = Control(i).Width - (__UI_MouseLeft - __UI_DragX): IF Control(i).Width < 4 THEN Control(i).Width = 4 ELSE Control(i).Left = Control(i).Left + (__UI_MouseLeft - __UI_DragX)
                    END IF
                END IF
                'Top
                IF __UI_ResizeHandleHover = 4 THEN
                    IF __UI_ShiftIsDown THEN
                        Control(i).Height = Control(i).Height - (2 * (__UI_MouseTop - __UI_DragY)): IF Control(i).Height < 4 THEN Control(i).Height = 4
                        IF Control(i).Height > 4 THEN Control(i).Top = Control(i).Top + (__UI_MouseTop - __UI_DragY)
                    ELSE
                        Control(i).Height = Control(i).Height - (__UI_MouseTop - __UI_DragY): IF Control(i).Height < 4 THEN Control(i).Height = 4 ELSE Control(i).Top = Control(i).Top + (__UI_MouseTop - __UI_DragY)
                    END IF
                END IF
                'Top-right
                IF __UI_ResizeHandleHover = 5 THEN
                    Control(i).Height = Control(i).Height - (__UI_MouseTop - __UI_DragY): IF Control(i).Height < 4 THEN Control(i).Height = 4 ELSE Control(i).Top = Control(i).Top + (__UI_MouseTop - __UI_DragY)
                    Control(i).Width = Control(i).Width + (__UI_MouseLeft - __UI_DragX): IF Control(i).Width < 4 THEN Control(i).Width = 4
                    IF Control(i).Type = __UI_Type_PictureBox AND LEN(Text(i)) > 0 THEN
                        'Resizing by corners keeps original aspect ratio
                        Control(i).Height = (_HEIGHT(Control(i).HelperCanvas) / _WIDTH(Control(i).HelperCanvas)) * Control(i).Width
                    END IF
                END IF
                'Top-left
                IF __UI_ResizeHandleHover = 6 THEN
                    Control(i).Height = Control(i).Height - (__UI_MouseTop - __UI_DragY): IF Control(i).Height < 4 THEN Control(i).Height = 4 ELSE Control(i).Top = Control(i).Top + (__UI_MouseTop - __UI_DragY)
                    Control(i).Width = Control(i).Width - (__UI_MouseLeft - __UI_DragX): IF Control(i).Width < 4 THEN Control(i).Width = 4 ELSE Control(i).Left = Control(i).Left + (__UI_MouseLeft - __UI_DragX)
                    IF Control(i).Type = __UI_Type_PictureBox AND LEN(Text(i)) > 0 THEN
                        'Resizing by corners keeps original aspect ratio
                        Control(i).Height = (_HEIGHT(Control(i).HelperCanvas) / _WIDTH(Control(i).HelperCanvas)) * Control(i).Width
                    END IF
                END IF
                'Bottom-right
                IF __UI_ResizeHandleHover = 7 THEN
                    Control(i).Height = Control(i).Height + (__UI_MouseTop - __UI_DragY): IF Control(i).Height < 4 THEN Control(i).Height = 4
                    Control(i).Width = Control(i).Width + (__UI_MouseLeft - __UI_DragX): IF Control(i).Width < 4 THEN Control(i).Width = 4
                    IF Control(i).Type = __UI_Type_PictureBox AND LEN(Text(i)) > 0 THEN
                        'Resizing by corners keeps original aspect ratio
                        Control(i).Height = (_HEIGHT(Control(i).HelperCanvas) / _WIDTH(Control(i).HelperCanvas)) * Control(i).Width
                    END IF
                END IF
                'Bottom-left
                IF __UI_ResizeHandleHover = 8 THEN
                    Control(i).Height = Control(i).Height + (__UI_MouseTop - __UI_DragY): IF Control(i).Height < 4 THEN Control(i).Height = 4
                    Control(i).Width = Control(i).Width - (__UI_MouseLeft - __UI_DragX): IF Control(i).Width < 4 THEN Control(i).Width = 4 ELSE Control(i).Left = Control(i).Left + (__UI_MouseLeft - __UI_DragX)
                    IF Control(i).Type = __UI_Type_PictureBox AND LEN(Text(i)) > 0 THEN
                        'Resizing by corners keeps original aspect ratio
                        Control(i).Height = (_HEIGHT(Control(i).HelperCanvas) / _WIDTH(Control(i).HelperCanvas)) * Control(i).Width
                    END IF
                END IF
            END IF
        NEXT
        __UI_DragY = __UI_MouseTop
        __UI_DragX = __UI_MouseLeft
    END IF
    IF __UI_DraggingThumb = True THEN
        IF Control(__UI_DraggingThumbOnID).Type = __UI_Type_ListBox THEN
            IF __UI_MouseTop >= Control(__UI_DraggingThumbOnID).Top + Control(Control(__UI_DraggingThumbOnID).ParentID).Top + __UI_ScrollbarButtonHeight AND __UI_MouseTop <= Control(__UI_DraggingThumbOnID).Top + Control(Control(__UI_DraggingThumbOnID).ParentID).Top + Control(__UI_DraggingThumbOnID).Height - __UI_ScrollbarButtonHeight THEN
                'Dragging in the track area
                Control(__UI_DraggingThumbOnID).InputViewStart = Control(__UI_DraggingThumbOnID).InputViewStart + ((__UI_MouseTop - __UI_ThumbDragTop) * Control(__UI_DraggingThumbOnID).VScrollbarRatio)
                IF Control(__UI_DraggingThumbOnID).InputViewStart + Control(__UI_DraggingThumbOnID).LastVisibleItem - 1 > Control(__UI_DraggingThumbOnID).Max THEN Control(__UI_DraggingThumbOnID).InputViewStart = Control(__UI_DraggingThumbOnID).Max - Control(__UI_DraggingThumbOnID).LastVisibleItem + 1
                __UI_ThumbDragTop = __UI_MouseTop
            ELSEIF __UI_MouseTop < Control(__UI_DraggingThumbOnID).Top + Control(Control(__UI_DraggingThumbOnID).ParentID).Top + __UI_ScrollbarButtonHeight THEN
                'Dragging above the track area
                Control(__UI_DraggingThumbOnID).InputViewStart = 1
            ELSEIF __UI_MouseTop > Control(__UI_DraggingThumbOnID).Top + Control(Control(__UI_DraggingThumbOnID).ParentID).Top + Control(__UI_DraggingThumbOnID).Height - __UI_ScrollbarButtonHeight THEN
                'Dragging below the track area
                Control(__UI_DraggingThumbOnID).InputViewStart = Control(__UI_DraggingThumbOnID).Max - Control(__UI_DraggingThumbOnID).LastVisibleItem + 1
            END IF
        ELSEIF Control(__UI_DraggingThumbOnID).Type = __UI_Type_TextBox THEN
            _FONT Control(__UI_DraggingThumbOnID).Font
            IF __UI_MouseTop >= Control(__UI_DraggingThumbOnID).Top + Control(Control(__UI_DraggingThumbOnID).ParentID).Top + __UI_ScrollbarButtonHeight AND __UI_MouseTop <= Control(__UI_DraggingThumbOnID).Top + Control(Control(__UI_DraggingThumbOnID).ParentID).Top + Control(__UI_DraggingThumbOnID).Height - __UI_ScrollbarButtonHeight THEN
                'Dragging in the track area
                Control(__UI_DraggingThumbOnID).FirstVisibleLine = Control(__UI_DraggingThumbOnID).FirstVisibleLine + ((__UI_MouseTop - __UI_ThumbDragTop) * Control(__UI_DraggingThumbOnID).VScrollbarRatio)
                __UI_ThumbDragTop = __UI_MouseTop
            ELSEIF __UI_MouseTop < Control(__UI_DraggingThumbOnID).Top + Control(Control(__UI_DraggingThumbOnID).ParentID).Top + __UI_ScrollbarButtonHeight THEN
                'Dragging above the track area
                Control(__UI_DraggingThumbOnID).FirstVisibleLine = 1
            ELSEIF __UI_MouseTop > Control(__UI_DraggingThumbOnID).Top + Control(Control(__UI_DraggingThumbOnID).ParentID).Top + Control(__UI_DraggingThumbOnID).Height - __UI_ScrollbarButtonHeight THEN
                'Dragging below the track area
                Control(__UI_DraggingThumbOnID).FirstVisibleLine = __UI_CountLines(__UI_DraggingThumbOnID) - Control(__UI_DraggingThumbOnID).Height \ uspacing&
            END IF
        END IF
    END IF
    IF __UI_SelectionRectangle THEN
        DIM tsmx AS INTEGER, tmx AS INTEGER
        DIM tsmy AS INTEGER, tmy AS INTEGER
        tsmx = __UI_SelectionRectangleLeft: tmx = __UI_MouseLeft
        tsmy = __UI_SelectionRectangleTop: tmy = __UI_MouseTop
        IF tsmx > tmx THEN SWAP tsmx, tmx
        IF tsmy > tmy THEN SWAP tsmy, tmy
        'Check if the selection rectangle intersects with any control
        __UI_TotalSelectedControls = 0
        FOR i = 1 TO UBOUND(Control)
            Control(i).ControlIsSelected = False
            IF Control(i).Type <> __UI_Type_Form AND Control(i).Type <> __UI_Type_Font AND Control(i).Type <> __UI_Type_MenuBar AND Control(i).Type <> __UI_Type_MenuItem AND Control(i).Type <> __UI_Type_MenuPanel AND Control(i).Type <> __UI_Type_ContextMenu AND Control(i).ParentID = 0 THEN
                IF tsmx < Control(i).Left + Control(i).Width AND _
                    Control(i).Left < tmx AND _
                    tsmy < Control(i).Top + Control(i).Height AND _
                    Control(i).Top < tmy THEN
                    Control(i).ControlIsSelected = True
                    __UI_TotalSelectedControls = __UI_TotalSelectedControls + 1
                    IF __UI_TotalSelectedControls = 1 THEN __UI_FirstSelectedID = i
                END IF
            END IF
        NEXT
    END IF

    'Keyboard handler
    'Modifiers (Ctrl, Alt, Shift):
    IF __UI_KeyHit = 100303 OR __UI_KeyHit = 100304 THEN __UI_ShiftIsDown = True
    IF __UI_KeyHit = -100303 OR __UI_KeyHit = -100304 THEN __UI_ShiftIsDown = False
    IF __UI_KeyHit = 100305 OR __UI_KeyHit = 100306 THEN __UI_CtrlIsDown = True
    IF __UI_KeyHit = -100305 OR __UI_KeyHit = -100306 THEN __UI_CtrlIsDown = False
    IF __UI_KeyHit = 100307 OR __UI_KeyHit = 100308 THEN __UI_AltIsDown = True
    IF __UI_KeyHit = -100307 OR __UI_KeyHit = -100308 THEN __UI_AltIsDown = False

    'Alt:
    IF NOT __UI_DesignMode THEN
        IF __UI_AltIsDown AND Control(__UI_Focus).Type = __UI_Type_MenuBar THEN
            __UI_Focus = __UI_PreviousFocus
            __UI_AltIsDown = False
            __UI_ForceRedraw = True 'Trigger a global redraw
        ELSEIF __UI_AltIsDown AND __UI_ActiveMenu > 0 THEN
            __UI_Focus = __UI_PreviousFocus
            __UI_DestroyControl Control(__UI_ActiveMenu)
            __UI_ForceRedraw = True
            __UI_KeyHit = 0
            __UI_AltIsDown = False
        ELSEIF __UI_AltIsDown THEN
            IF NOT __UI_ShowHotKeys THEN
                __UI_ShowHotKeys = True
                __UI_ForceRedraw = True 'Trigger a global redraw
            END IF

            SELECT CASE __UI_KeyHit
                CASE 48 TO 57, 65 TO 90, 97 TO 122 'Alphanumeric
                    DIM j AS LONG

                    __UI_AltCombo$ = __UI_AltCombo$ + CHR$(__UI_KeyHit)

                    IF __UI_KeyHit >= 97 THEN __UI_KeyHit = __UI_KeyHit - 32 'Turn to capitals

                    IF __UI_KeyHit > 0 THEN
                        'Search for a matching hot key in controls
                        FOR i = 1 TO UBOUND(Control)
                            IF Control(i).HotKey = __UI_KeyHit AND NOT Control(i).Disabled AND Control(i).Type <> __UI_Type_MenuItem THEN
                                SELECT CASE Control(i).Type
                                    CASE __UI_Type_Button
                                        IF Control(i).CanHaveFocus THEN __UI_Focus = Control(i).ID
                                        __UI_Click Control(i).ID
                                    CASE __UI_Type_RadioButton
                                        IF Control(i).CanHaveFocus THEN __UI_Focus = Control(i).ID
                                        SetRadioButtonValue Control(i).ID
                                        __UI_Click Control(i).ID
                                    CASE __UI_Type_CheckBox
                                        IF Control(i).CanHaveFocus THEN __UI_Focus = Control(i).ID
                                        Control(i).Value = NOT Control(i).Value
                                        __UI_Click Control(i).ID
                                    CASE __UI_Type_Frame
                                        'Find the first children in this frame that can have focus
                                        FOR j = i + 1 TO UBOUND(Control)
                                            IF Control(j).ParentID = Control(i).ID AND Control(j).CanHaveFocus AND NOT Control(j).Disabled THEN
                                                __UI_Focus = Control(j).ID
                                                EXIT FOR
                                            END IF
                                        NEXT
                                    CASE __UI_Type_Label
                                        'Find the next control in the same container that can have focus
                                        FOR j = i + 1 TO UBOUND(Control)
                                            IF Control(j).ParentID = Control(i).ParentID AND Control(j).CanHaveFocus AND NOT Control(j).Disabled THEN
                                                __UI_Focus = Control(j).ID
                                                EXIT FOR
                                            END IF
                                        NEXT
                                    CASE __UI_Type_MenuBar
                                        IF __UI_ActiveMenu = 0 THEN
                                            __UI_PreviousFocus = __UI_Focus
                                            __UI_ActivateMenu Control(i), True
                                            __UI_ForceRedraw = True
                                            Control(__UI_ActiveMenu).Value = __UI_Focus
                                            __UI_KeyHit = 0
                                            __UI_AltIsDown = False
                                        END IF
                                END SELECT
                                EXIT FOR
                            END IF
                        NEXT
                    END IF
                    __UI_KeyHit = 0
            END SELECT
        ELSE
            IF __UI_ShowHotKeys THEN
                __UI_ShowHotKeys = False
                __UI_ForceRedraw = True 'Trigger a global redraw

                IF LEN(__UI_AltCombo$) THEN
                    'Numeric keypresses with alt pressed are converted into the proper ASCII character
                    'and inserted into the active textbox, if any.
                    IF VAL(__UI_AltCombo$) >= 32 AND VAL(__UI_AltCombo$) <= 254 THEN
                        __UI_KeyHit = VAL(__UI_AltCombo$)
                    END IF
                    __UI_AltCombo$ = ""
                ELSE
                    'Alt was released with no key having been pressed in the meantime,
                    'so the menubar will be activated, if it exists (unless a dropdown
                    'list was activated
                    IF __UI_HasMenuBar AND __UI_ActiveDropdownList = 0 THEN
                        __UI_PreviousFocus = __UI_Focus
                        __UI_Focus = __UI_FirstMenuBarControl
                    END IF
                END IF
            END IF
        END IF
    END IF

    'Control-specific keyboard handler:
    IF __UI_DesignMode THEN
        IF __UI_KeyHit = 27 THEN
            FOR i = 1 TO UBOUND(Control)
                Control(i).ControlIsSelected = False
            NEXT
            __UI_TotalSelectedControls = 0
            __UI_FirstSelectedID = 0
        END IF
    END IF

    IF __UI_Focus > 0 AND __UI_KeyHit <> 0 AND __UI_DesignMode = False THEN
        __UI_KeyPress __UI_Focus
        __UI_KeyboardFocus = True

        'Enter activates the selected/default button, if any
        IF __UI_IsDragging = False AND __UI_KeyHit = -13 AND NOT Control(__UI_Focus).Disabled THEN
            IF Control(__UI_Focus).Type = __UI_Type_Button OR Control(__UI_Focus).Type = __UI_Type_MenuItem THEN
                i = __UI_Focus
                IF Control(__UI_Focus).Type = __UI_Type_MenuItem THEN
                    __UI_Focus = __UI_PreviousFocus
                    __UI_DestroyControl Control(__UI_ActiveMenu)
                    __UI_ForceRedraw = True
                    __UI_KeyHit = 0
                END IF
                __UI_HoveringID = i
                GOTO ProcessClick
            ELSEIF Control(__UI_Focus).Type = __UI_Type_ListBox AND __UI_Focus = __UI_ActiveDropdownList THEN
                __UI_Focus = __UI_ParentDropdownList
                Control(__UI_ParentDropdownList).Value = Control(__UI_ActiveDropdownList).Value
                __UI_DestroyControl Control(__UI_ActiveDropdownList)
                IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
            ELSEIF Control(__UI_Focus).Type = __UI_Type_MenuBar THEN
                __UI_ActivateMenu Control(__UI_Focus), True
            ELSEIF Control(__UI_Focus).Type = __UI_Type_TextBox AND Control(__UI_Focus).Multiline THEN
                'Do nothing. Enter will add a new line to a multiline textbox (below).
            ELSEIF __UI_Focus <> __UI_DefaultButtonID AND __UI_DefaultButtonID > 0 THEN
                __UI_Click __UI_DefaultButtonID
            END IF
        ELSE
            SELECT CASE Control(__UI_Focus).Type
                CASE __UI_Type_TrackBar
                    SELECT CASE __UI_KeyHit
                        CASE 19200 'Left
                            IF Control(__UI_Focus).Value > Control(__UI_Focus).Min THEN
                                Control(__UI_Focus).Value = Control(__UI_Focus).Value - 1
                                IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
                            END IF
                        CASE 19712 'Right
                            IF Control(__UI_Focus).Value < Control(__UI_Focus).Max THEN
                                Control(__UI_Focus).Value = Control(__UI_Focus).Value + 1
                                IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
                            END IF
                        CASE 18176 'Home
                            Control(__UI_Focus).Value = Control(__UI_Focus).Min
                            IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
                        CASE 20224 'End
                            Control(__UI_Focus).Value = Control(__UI_Focus).Max
                            IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
                    END SELECT
                CASE __UI_Type_MenuBar
                    SELECT CASE __UI_KeyHit
                        CASE 48 TO 57, 65 TO 90, 97 TO 122 'Alphanumeric
                            IF __UI_KeyHit >= 97 THEN __UI_KeyHit = __UI_KeyHit - 32 'Turn to capitals
                            'Search for a matching hot key in menu bar items
                            FOR i = 1 TO UBOUND(Control)
                                IF Control(i).HotKey = __UI_KeyHit AND NOT Control(i).Disabled AND Control(i).Type = __UI_Type_MenuBar THEN
                                    IF __UI_ActiveMenu = 0 THEN
                                        __UI_ActivateMenu Control(i), True
                                        Control(__UI_ActiveMenu).Value = __UI_Focus
                                        __UI_ForceRedraw = True
                                        __UI_KeyHit = 0
                                    END IF
                                    EXIT FOR
                                END IF
                            NEXT
                        CASE 27 'Esc
                            __UI_Focus = __UI_PreviousFocus
                            __UI_KeyHit = 0
                        CASE 19200 'Left
                            __UI_Focus = __UI_PreviousMenuBarControl(__UI_Focus)
                        CASE 19712 'Right
                            __UI_Focus = __UI_NextMenuBarControl(__UI_Focus)
                        CASE 18432, 20480 'Up, down
                            __UI_ActivateMenu Control(__UI_Focus), True
                            __UI_KeyHit = 0
                    END SELECT
                CASE __UI_Type_MenuPanel, __UI_Type_MenuItem
                    HandleDesignMenu:
                    SELECT CASE __UI_KeyHit
                        CASE 48 TO 57, 65 TO 90, 97 TO 122 'Alphanumeric
                            IF __UI_KeyHit >= 97 THEN __UI_KeyHit = __UI_KeyHit - 32 'Turn to capitals
                            'Search for a matching hot key in menu bar items
                            FOR i = 1 TO UBOUND(Control)
                                IF Control(i).HotKey = __UI_KeyHit AND NOT Control(i).Disabled AND Control(i).Type = __UI_Type_MenuItem AND Control(i).ParentID = __UI_ParentMenu THEN
                                    __UI_Focus = __UI_PreviousFocus
                                    __UI_DestroyControl Control(__UI_ActiveMenu)
                                    __UI_ForceRedraw = True
                                    __UI_KeyHit = 0
                                    IF LEFT$(Control(i).Name, 5) = "__UI_" THEN
                                        __UI_HoveringID = i
                                        GOTO ProcessHotkey
                                    ELSE
                                        __UI_Click i
                                    END IF
                                    EXIT FOR
                                END IF
                            NEXT
                        CASE 27 'Esc
                            IF Control(__UI_ParentMenu).Type = __UI_Type_MenuBar THEN
                                __UI_Focus = __UI_ParentMenu
                            ELSE
                                __UI_Focus = __UI_PreviousFocus
                            END IF
                            __UI_DestroyControl Control(__UI_ActiveMenu)
                            __UI_KeyHit = 0
                        CASE 19200 'Left
                            IF __UI_ActiveMenuIsContextMenu = False THEN
                                __UI_ActivateMenu Control(__UI_PreviousMenuBarControl(__UI_ParentMenu)), True
                                __UI_ForceRedraw = True
                            END IF
                            __UI_KeyHit = 0
                        CASE 19712 'Right
                            IF __UI_ActiveMenuIsContextMenu = False THEN
                                __UI_ActivateMenu Control(__UI_NextMenuBarControl(__UI_ParentMenu)), True
                                __UI_ForceRedraw = True
                            END IF
                            __UI_KeyHit = 0
                        CASE 18432 'Up
                            __UI_Focus = __UI_PreviousMenuItem(__UI_Focus)
                            Control(__UI_ActiveMenu).Value = Control(__UI_Focus).ID
                        CASE 20480 'Down
                            __UI_Focus = __UI_NextMenuItem(__UI_Focus)
                            Control(__UI_ActiveMenu).Value = Control(__UI_Focus).ID
                    END SELECT
                CASE __UI_Type_Button, __UI_Type_RadioButton, __UI_Type_CheckBox
                    SELECT CASE __UI_KeyHit
                        CASE 32
                            'Emulate mouse down/click
                            IF __UI_IsDragging = False AND NOT Control(__UI_Focus).Disabled THEN
                                'Space bar down on a button
                                IF __UI_KeyIsDown = False AND __UI_KeyDownOnID = 0 THEN
                                    __UI_KeyDownOnID = __UI_Focus
                                    __UI_KeyIsDown = True
                                END IF
                            END IF
                        CASE -32
                            IF __UI_IsDragging = False AND NOT Control(__UI_Focus).Disabled THEN
                                'Space bar released and a button has focus
                                IF __UI_KeyIsDown AND __UI_Focus = __UI_KeyDownOnID THEN
                                    IF Control(__UI_KeyDownOnID).Type = __UI_Type_RadioButton THEN
                                        SetRadioButtonValue __UI_KeyDownOnID
                                    ELSEIF Control(__UI_KeyDownOnID).Type = __UI_Type_CheckBox THEN
                                        Control(__UI_KeyDownOnID).Value = NOT Control(__UI_KeyDownOnID).Value
                                    END IF
                                    __UI_KeyDownOnID = 0
                                    __UI_KeyIsDown = False
                                    __UI_Click __UI_Focus
                                END IF
                            END IF
                        CASE 18432, 20480 'Up, down
                            IF (Control(__UI_Focus).Type = __UI_Type_RadioButton OR Control(__UI_Focus).Type = __UI_Type_CheckBox) THEN
                                __UI_FocusSearch = __UI_Focus
                                DO
                                    IF _KEYDOWN(100304) OR _KEYDOWN(100303) THEN
                                        __UI_FocusSearch = (__UI_FocusSearch + UBOUND(Control) - 2) MOD UBOUND(Control) + 1
                                    ELSE
                                        __UI_FocusSearch = __UI_FocusSearch MOD UBOUND(Control) + 1
                                    END IF

                                    IF __UI_FocusSearch = __UI_Focus THEN
                                        'Full circle. No similar control can have focus
                                        EXIT DO
                                    END IF

                                    IF Control(__UI_FocusSearch).CanHaveFocus AND NOT Control(__UI_FocusSearch).Disabled AND Control(__UI_Focus).Type = Control(__UI_FocusSearch).Type THEN
                                        __UI_FocusOut __UI_Focus
                                        __UI_Focus = __UI_FocusSearch
                                        __UI_FocusIn __UI_Focus
                                        IF Control(__UI_FocusSearch).Type = __UI_Type_RadioButton THEN SetRadioButtonValue __UI_Focus
                                        EXIT DO
                                    END IF
                                LOOP
                            END IF
                    END SELECT
                CASE __UI_Type_ListBox, __UI_Type_DropdownList
                    DIM ThisItemTop%, CaptionIndent AS INTEGER
                    IF NOT Control(__UI_Focus).Disabled THEN
                        _FONT (Control(__UI_Focus).Font)
                        SELECT EVERYCASE __UI_KeyHit
                            CASE 32 TO 254 'Printable ASCII characters
                                DIM CurrentItem%
                                CurrentItem% = Control(__UI_Focus).Value
                                __UI_ListBoxSearchItem Control(__UI_Focus)
                                IF CurrentItem% <> Control(__UI_Focus).Value THEN
                                    'Adjust view:
                                    IF Control(__UI_Focus).Value < Control(__UI_Focus).InputViewStart THEN
                                        Control(__UI_Focus).InputViewStart = Control(__UI_Focus).Value
                                    ELSEIF Control(__UI_Focus).Value > Control(__UI_Focus).InputViewStart + Control(__UI_Focus).LastVisibleItem - 1 THEN
                                        Control(__UI_Focus).InputViewStart = Control(__UI_Focus).Value - Control(__UI_Focus).LastVisibleItem + 1
                                    END IF
                                END IF
                            CASE 18432 'Up
                                IF Control(__UI_Focus).Value > 1 THEN
                                    Control(__UI_Focus).Value = Control(__UI_Focus).Value - 1
                                    IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
                                END IF
                            CASE 20480 'Down
                                IF __UI_AltIsDown THEN
                                    IF Control(__UI_Focus).Type = __UI_Type_DropdownList THEN
                                        __UI_ActivateDropdownlist Control(__UI_Focus)
                                    END IF
                                ELSE
                                    IF Control(__UI_Focus).Value < Control(__UI_Focus).Max THEN
                                        Control(__UI_Focus).Value = Control(__UI_Focus).Value + 1
                                        IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
                                    END IF
                                END IF
                            CASE 18688 'Page up
                                Control(__UI_Focus).Value = Control(__UI_Focus).Value - Control(__UI_Focus).LastVisibleItem
                                IF Control(__UI_Focus).Value < 1 THEN Control(__UI_Focus).Value = 1
                                IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
                            CASE 20736 'Page down
                                IF Control(__UI_Focus).Value < Control(__UI_Focus).Max - Control(__UI_Focus).LastVisibleItem THEN
                                    Control(__UI_Focus).Value = Control(__UI_Focus).Value + Control(__UI_Focus).LastVisibleItem - 1
                                ELSE
                                    Control(__UI_Focus).Value = Control(__UI_Focus).Max
                                END IF
                                IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
                            CASE 18176 'Home
                                Control(__UI_Focus).Value = 1
                                IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
                            CASE 20224 'End
                                Control(__UI_Focus).Value = Control(__UI_Focus).Max
                                IF Control(__UI_Focus).PreviousValue <> Control(__UI_Focus).Value THEN __UI_ValueChanged __UI_Focus
                            CASE 18432, 20480, 18688, 20736, 18176, 20224
                                'Adjust view:
                                IF Control(__UI_Focus).Value < Control(__UI_Focus).InputViewStart THEN
                                    Control(__UI_Focus).InputViewStart = Control(__UI_Focus).Value
                                ELSEIF Control(__UI_Focus).Value > Control(__UI_Focus).InputViewStart + Control(__UI_Focus).LastVisibleItem - 1 THEN
                                    Control(__UI_Focus).InputViewStart = Control(__UI_Focus).Value - Control(__UI_Focus).LastVisibleItem + 1
                                END IF
                        END SELECT
                    END IF
                CASE __UI_Type_TextBox
                    DIM Clip$, FindLF&
                    DIM s1 AS LONG, s2 AS LONG
                    IF NOT Control(__UI_Focus).Disabled THEN
                        SELECT EVERYCASE __UI_KeyHit
                            CASE 32 TO 254 'Printable ASCII characters
                                IF __UI_KeyHit = ASC("v") OR __UI_KeyHit = ASC("V") THEN 'Paste from clipboard (Ctrl+V)
                                    IF __UI_CtrlIsDown THEN
                                        PasteIntoTextBox:
                                        IF Control(__UI_Focus).Multiline THEN
                                            Clip$ = Replace(_CLIPBOARD$, CHR$(13) + CHR$(10), CHR$(10), False, 0)
                                            IF LEN(Clip$) > 0 THEN
                                                IF NOT Control(__UI_Focus).TextIsSelected THEN
                                                    IF Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus)) THEN
                                                        Text(__UI_Focus) = Text(__UI_Focus) + Clip$
                                                        Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus))
                                                    ELSE
                                                        Text(__UI_Focus) = LEFT$(Text(__UI_Focus), Control(__UI_Focus).Cursor) + Clip$ + MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1)
                                                        Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor + LEN(Clip$)
                                                    END IF
                                                ELSE
                                                    's1 = Control(__UI_Focus).SelectionStart
                                                    's2 = Control(__UI_Focus).Cursor
                                                    'IF s1 > s2 THEN SWAP s1, s2
                                                    'Text(__UI_Focus) = LEFT$(Text(__UI_Focus), s1) + Clip$ + MID$(Text(__UI_Focus), s2 + 1)
                                                    'Control(__UI_Focus).Cursor = s1 + LEN(Clip$)
                                                    'Control(__UI_Focus).TextIsSelected = False
                                                    '__UI_SelectedText = ""
                                                    '__UI_SelectionLength = 0
                                                END IF
                                                __UI_TextChanged __UI_Focus
                                            END IF
                                            IF ContextMenuPaste THEN
                                                ContextMenuPaste = False
                                                RETURN
                                            END IF
                                            __UI_KeyHit = 0
                                        ELSE
                                            Clip$ = _CLIPBOARD$
                                            FindLF& = INSTR(Clip$, CHR$(13))
                                            IF FindLF& > 0 THEN Clip$ = LEFT$(Clip$, FindLF& - 1)
                                            FindLF& = INSTR(Clip$, CHR$(10))
                                            IF FindLF& > 0 THEN Clip$ = LEFT$(Clip$, FindLF& - 1)
                                            IF LEN(Clip$) > 0 THEN
                                                IF NOT Control(__UI_Focus).TextIsSelected THEN
                                                    IF Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus)) THEN
                                                        Text(__UI_Focus) = Text(__UI_Focus) + Clip$
                                                        Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus))
                                                    ELSE
                                                        Text(__UI_Focus) = LEFT$(Text(__UI_Focus), Control(__UI_Focus).Cursor) + Clip$ + MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1)
                                                        Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor + LEN(Clip$)
                                                    END IF
                                                ELSE
                                                    s1 = Control(__UI_Focus).SelectionStart
                                                    s2 = Control(__UI_Focus).Cursor
                                                    IF s1 > s2 THEN SWAP s1, s2
                                                    Text(__UI_Focus) = LEFT$(Text(__UI_Focus), s1) + Clip$ + MID$(Text(__UI_Focus), s2 + 1)
                                                    Control(__UI_Focus).Cursor = s1 + LEN(Clip$)
                                                    Control(__UI_Focus).TextIsSelected = False
                                                    __UI_SelectedText = ""
                                                    __UI_SelectionLength = 0
                                                END IF
                                                __UI_TextChanged __UI_Focus
                                            END IF
                                            IF ContextMenuPaste THEN
                                                ContextMenuPaste = False
                                                RETURN
                                            END IF
                                            __UI_KeyHit = 0
                                        END IF
                                    END IF
                                ELSEIF __UI_KeyHit = ASC("c") OR __UI_KeyHit = ASC("C") THEN 'Copy selection to clipboard (Ctrl+C)
                                    IF __UI_CtrlIsDown THEN
                                        IF LEN(__UI_SelectedText) > 0 THEN _CLIPBOARD$ = __UI_SelectedText
                                        __UI_KeyHit = 0
                                    END IF
                                ELSEIF __UI_KeyHit = ASC("x") OR __UI_KeyHit = ASC("X") THEN 'Cut selection to clipboard (Ctrl+X)
                                    IF __UI_CtrlIsDown THEN
                                        IF LEN(__UI_SelectedText) > 0 THEN
                                            _CLIPBOARD$ = __UI_SelectedText
                                            __UI_DeleteSelection
                                            __UI_TextChanged __UI_Focus
                                        END IF
                                        __UI_KeyHit = 0
                                    END IF
                                ELSEIF __UI_KeyHit = ASC("a") OR __UI_KeyHit = ASC("A") THEN 'Select all text (Ctrl+A)
                                    IF __UI_CtrlIsDown THEN
                                        Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus))
                                        Control(__UI_Focus).SelectionStart = 0
                                        Control(__UI_Focus).TextIsSelected = True
                                        __UI_KeyHit = 0
                                    END IF
                                END IF

                                IF __UI_KeyHit THEN
                                    IF __UI_KeyHit = 13 THEN __UI_KeyHit = 10
                                    IF Mask(__UI_Focus) = "" OR Control(__UI_Focus).Multiline THEN
                                        IF NOT Control(__UI_Focus).TextIsSelected THEN
                                            IF Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus)) THEN
                                                IF (Control(__UI_Focus).Max > 0 AND LEN(Text(__UI_Focus)) < Control(__UI_Focus).Max) OR Control(__UI_Focus).Max = 0 THEN
                                                    Text(__UI_Focus) = Text(__UI_Focus) + CHR$(__UI_KeyHit)
                                                    Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor + LEN(CHR$(__UI_KeyHit))
                                                END IF
                                            ELSE
                                                IF (Control(__UI_Focus).Max > 0 AND LEN(Text(__UI_Focus)) < Control(__UI_Focus).Max) OR Control(__UI_Focus).Max = 0 THEN
                                                    Text(__UI_Focus) = LEFT$(Text(__UI_Focus), Control(__UI_Focus).Cursor) + CHR$(__UI_KeyHit) + MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1)
                                                    Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor + 1
                                                END IF
                                            END IF
                                        ELSE
                                            s1 = Control(__UI_Focus).SelectionStart
                                            s2 = Control(__UI_Focus).Cursor
                                            IF s1 > s2 THEN SWAP s1, s2
                                            Text(__UI_Focus) = LEFT$(Text(__UI_Focus), s1) + CHR$(__UI_KeyHit) + MID$(Text(__UI_Focus), s2 + 1)
                                            Control(__UI_Focus).TextIsSelected = False
                                            __UI_SelectedText = ""
                                            __UI_SelectionLength = 0
                                            Control(__UI_Focus).Cursor = s1 + 1
                                        END IF
                                    ELSE
                                        'Masked input KeyHit:
                                        IF Control(__UI_Focus).TextIsSelected THEN
                                            __UI_DeleteSelectionMasked
                                        END IF
                                        DO
                                            SELECT CASE MID$(Mask(__UI_Focus), Control(__UI_Focus).Cursor + 1, 1)
                                                CASE "0", "9", "#"
                                                    IF __UI_KeyHit >= 48 AND __UI_KeyHit <= 57 THEN
                                                        MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1, 1) = CHR$(__UI_KeyHit)
                                                        Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor + 1
                                                        EXIT DO
                                                    END IF
                                                CASE ELSE
                                                    IF Control(__UI_Focus).Cursor < LEN(Mask(__UI_Focus)) THEN
                                                        Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor + 1
                                                    ELSE
                                                        EXIT DO
                                                    END IF
                                            END SELECT
                                        LOOP
                                    END IF

                                    __UI_TextChanged __UI_Focus
                                END IF
                            CASE 8 'Backspace
                                IF Mask(__UI_Focus) = "" OR Control(__UI_Focus).Multiline THEN
                                    IF LEN(Text(__UI_Focus)) > 0 THEN
                                        IF NOT Control(__UI_Focus).TextIsSelected THEN
                                            IF Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus)) THEN
                                                IF Control(__UI_Focus).Multiline AND RIGHT$(Text(__UI_Focus), 1) = CHR$(10) THEN
                                                    Control(__UI_Focus).CurrentLine = Control(__UI_Focus).CurrentLine - 1
                                                END IF
                                                Text(__UI_Focus) = LEFT$(Text(__UI_Focus), LEN(Text(__UI_Focus)) - 1)
                                                Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor - 1
                                            ELSEIF Control(__UI_Focus).Cursor >= 1 THEN
                                                IF Control(__UI_Focus).Multiline AND MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor, 1) = CHR$(10) THEN
                                                    Control(__UI_Focus).CurrentLine = Control(__UI_Focus).CurrentLine - 1
                                                END IF
                                                Text(__UI_Focus) = LEFT$(Text(__UI_Focus), Control(__UI_Focus).Cursor - 1) + MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1)
                                                Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor - 1
                                            END IF
                                        ELSE
                                            __UI_DeleteSelection
                                        END IF
                                        __UI_TextChanged __UI_Focus
                                    END IF
                                ELSE
                                    'Masked input Backspace:
                                    IF NOT Control(__UI_Focus).TextIsSelected THEN
                                        IF Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus)) THEN
                                            Text(__UI_Focus) = LEFT$(Text(__UI_Focus), LEN(Text(__UI_Focus)) - 1)
                                            Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor - 1
                                        ELSEIF Control(__UI_Focus).Cursor >= 1 THEN
                                            IF Control(__UI_Focus).Multiline AND MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor, 1) = CHR$(10) THEN
                                                Control(__UI_Focus).CurrentLine = Control(__UI_Focus).CurrentLine - 1
                                            END IF
                                            Text(__UI_Focus) = LEFT$(Text(__UI_Focus), Control(__UI_Focus).Cursor - 1) + MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1)
                                            Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor - 1
                                        END IF

                                        Text(__UI_Focus) = __UI_MaskToText$(__UI_Focus)
                                    ELSE
                                        __UI_DeleteSelectionMasked
                                    END IF
                                    __UI_TextChanged __UI_Focus
                                END IF
                            CASE 21248 'Delete
                                IF LEN(Mask(__UI_Focus)) = 0 THEN
                                    IF NOT Control(__UI_Focus).TextIsSelected THEN
                                        IF LEN(Text(__UI_Focus)) > 0 THEN
                                            IF Control(__UI_Focus).Cursor = 0 THEN
                                                Text(__UI_Focus) = RIGHT$(Text(__UI_Focus), LEN(Text(__UI_Focus)) - 1)
                                            ELSEIF Control(__UI_Focus).Cursor > 0 AND Control(__UI_Focus).Cursor <= LEN(Text(__UI_Focus)) - 1 THEN
                                                Text(__UI_Focus) = LEFT$(Text(__UI_Focus), Control(__UI_Focus).Cursor) + MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 2)
                                            END IF
                                            __UI_TextChanged __UI_Focus
                                        END IF
                                    ELSE
                                        __UI_DeleteSelection
                                        __UI_TextChanged __UI_Focus
                                    END IF
                                ELSE
                                    'Masked input Delete:
                                    IF NOT Control(__UI_Focus).TextIsSelected THEN
                                        IF LEN(Text(__UI_Focus)) > 0 THEN
                                            IF Control(__UI_Focus).Cursor < LEN(Text(__UI_Focus)) THEN
                                                MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1, 1) = MID$(__UI_EmptyMask$(__UI_Focus), Control(__UI_Focus).Cursor + 1, 1)
                                                __UI_TextChanged __UI_Focus
                                            END IF
                                        END IF
                                    ELSE
                                        __UI_DeleteSelectionMasked
                                        __UI_TextChanged __UI_Focus
                                    END IF
                                END IF
                            CASE 19200 'Left arrow key
                                __UI_CheckSelection __UI_Focus
                                IF __UI_CtrlIsDown THEN
                                    IF Control(__UI_Focus).Cursor > 0 THEN
                                        'Go back until we hit a nonseparator character
                                        DO
                                            Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor - 1
                                            IF Control(__UI_Focus).Cursor = 0 THEN EXIT DO
                                        LOOP UNTIL INSTR(SEP$, MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1, 1)) = 0

                                        'Find the beginning of a word
                                        DO
                                            Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor - 1
                                            IF Control(__UI_Focus).Cursor = 0 THEN EXIT DO
                                        LOOP WHILE INSTR(SEP$, MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1, 1)) = 0

                                        Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor + 1
                                    END IF
                                ELSE
                                    IF Control(__UI_Focus).Cursor > 0 THEN Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor - 1
                                END IF
                                IF MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1, 1) = CHR$(10) THEN Control(__UI_Focus).CurrentLine = Control(__UI_Focus).CurrentLine - 1
                            CASE 19712 'Right arrow key
                                __UI_CheckSelection __UI_Focus
                                IF __UI_CtrlIsDown THEN
                                    IF Control(__UI_Focus).Cursor < LEN(Text(__UI_Focus)) THEN
                                        DO
                                            Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor + 1
                                            IF Control(__UI_Focus).Cursor > LEN(Text(__UI_Focus)) THEN EXIT DO
                                        LOOP WHILE INSTR(SEP$, MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor + 1, 1)) = 0
                                        Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor + 1
                                    END IF
                                ELSE
                                    IF Control(__UI_Focus).Cursor < LEN(Text(__UI_Focus)) THEN Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor + 1
                                END IF
                                IF MID$(Text(__UI_Focus), Control(__UI_Focus).Cursor, 1) = CHR$(10) THEN Control(__UI_Focus).CurrentLine = Control(__UI_Focus).CurrentLine + 1
                            CASE 18432 'Up arrow key
                                IF Control(__UI_Focus).Multiline THEN
                                    IF Control(__UI_Focus).CurrentLine > 1 THEN
                                        Control(__UI_Focus).CurrentLine = Control(__UI_Focus).CurrentLine - 1
                                    END IF
                                END IF
                            CASE 20480 'Down arrow key
                                IF Control(__UI_Focus).Multiline THEN
                                    IF Control(__UI_Focus).CurrentLine < __UI_CountLines(__UI_Focus) THEN
                                        Control(__UI_Focus).CurrentLine = Control(__UI_Focus).CurrentLine + 1
                                    END IF
                                END IF
                            CASE 18432, 20480 'For both up and down keys
                                IF Control(__UI_Focus).Multiline THEN
                                    ThisLineLen = LEN(__UI_GetTextBoxLine(__UI_Focus, Control(__UI_Focus).CurrentLine, ThisLineStart))
                                    Control(__UI_Focus).Cursor = ThisLineStart + Control(__UI_Focus).VisibleCursor - 1
                                    IF Control(__UI_Focus).Cursor > ThisLineStart + ThisLineLen - 1 THEN
                                        Control(__UI_Focus).Cursor = ThisLineStart + ThisLineLen - 1
                                    END IF
                                END IF
                            CASE 18176 'Home
                                __UI_CheckSelection __UI_Focus
                                IF Control(__UI_Focus).Multiline THEN
                                    IF __UI_CtrlIsDown THEN
                                        Control(__UI_Focus).Cursor = 0
                                        Control(__UI_Focus).CurrentLine = 1
                                    ELSE
                                        Control(__UI_Focus).Cursor = Control(__UI_Focus).Cursor - Control(__UI_Focus).VisibleCursor
                                    END IF
                                ELSE
                                    Control(__UI_Focus).Cursor = 0
                                END IF
                            CASE 20224 'End
                                __UI_CheckSelection __UI_Focus
                                IF Control(__UI_Focus).Multiline THEN
                                    IF __UI_CtrlIsDown THEN
                                        Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus))
                                        Control(__UI_Focus).CurrentLine = __UI_CountLines(__UI_Focus)
                                    ELSE
                                        ThisLineLen = LEN(__UI_GetTextBoxLine(__UI_Focus, Control(__UI_Focus).CurrentLine, ThisLineStart))
                                        Control(__UI_Focus).Cursor = ThisLineStart + ThisLineLen - 1
                                    END IF
                                ELSE
                                    Control(__UI_Focus).Cursor = LEN(Text(__UI_Focus))
                                END IF
                        END SELECT
                        IF Control(__UI_Focus).Multiline THEN
                            _FONT Control(__UI_Focus).Font
                            IF Control(__UI_Focus).CurrentLine < Control(__UI_Focus).FirstVisibleLine THEN
                                Control(__UI_Focus).FirstVisibleLine = Control(__UI_Focus).CurrentLine
                            ELSEIF Control(__UI_Focus).CurrentLine + 1 > Control(__UI_Focus).FirstVisibleLine + Control(__UI_Focus).Height \ uspacing& THEN
                                Control(__UI_Focus).FirstVisibleLine = Control(__UI_Focus).CurrentLine - Control(__UI_Focus).Height \ uspacing& + 1
                            END IF
                        END IF
                    END IF
            END SELECT
        END IF
    ELSEIF __UI_DesignMode AND __UI_KeyHit <> 0 THEN 'No buttons will respond while in design mode
        'But the design menu must respond:
        IF __UI_ActiveMenu > 0 AND LEFT$(Control(__UI_ParentMenu).Name, 5) = "__UI_" THEN GOTO HandleDesignMenu

        SELECT CASE  __UI_Keyhit
            CASE ASC("Z"), ASC("z")
                IF __UI_CtrlIsDown THEN
                    __UI_KeyPress 214
                END IF
            CASE ASC("Y"), ASC("y")
                IF __UI_CtrlIsDown THEN
                    __UI_KeyPress 215
                END IF
            CASE ASC("A"), ASC("a")
                IF __UI_CtrlIsDown THEN
                    ControlSelect:
                    IF __UI_TotalSelectedControls = 1 AND Control(__UI_FirstSelectedID).Type = __UI_Type_Frame THEN
                        SelectAllInFrame:
                        DIM ThisContainer AS LONG
                        ThisContainer =  Control(__UI_FirstSelectedID).ID
                        Control(__UI_FirstSelectedID).ControlIsSelected = False
                        __UI_TotalSelectedControls = 0
                        FOR i = 1 TO UBOUND(Control)
                            IF Control(i).Type <> __UI_Type_Frame AND Control(i).Type <> __UI_Type_Form AND Control(i).Type <> __UI_Type_Font AND Control(i).Type <> __UI_Type_MenuBar AND Control(i).Type <> __UI_Type_MenuItem AND Control(i).Type <> __UI_Type_MenuPanel AND Control(i).Type <> __UI_Type_ContextMenu AND Control(i).Type <> __UI_Type_MenuItem THEN
                                IF Control(i).ID > 0 AND Control(i).ParentID = ThisContainer THEN
                                    Control(i).ControlIsSelected = True
                                    __UI_TotalSelectedControls = __UI_TotalSelectedControls + 1
                                    IF __UI_TotalSelectedControls = 1 THEN __UI_FirstSelectedID = Control(i).ID
                                END IF
                            END IF
                        NEXT
                    ELSE
                        __UI_TotalSelectedControls = 0
                        FOR i = 1 TO UBOUND(Control)
                            IF Control(i).Type <> __UI_Type_Frame AND Control(i).Type <> __UI_Type_Form AND Control(i).Type <> __UI_Type_Font AND Control(i).Type <> __UI_Type_MenuBar AND Control(i).Type <> __UI_Type_MenuItem AND Control(i).Type <> __UI_Type_MenuPanel AND Control(i).Type <> __UI_Type_ContextMenu AND Control(i).Type <> __UI_Type_MenuItem THEN
                                IF Control(i).ID > 0 AND Control(i).ParentID = 0 THEN
                                    Control(i).ControlIsSelected = True
                                    __UI_TotalSelectedControls = __UI_TotalSelectedControls + 1
                                    IF __UI_TotalSelectedControls = 1 THEN __UI_FirstSelectedID = Control(i).ID
                                END IF
                            END IF
                        NEXT
                    END IF
                END IF
            CASE ASC("C"), ASC("c")
                IF __UI_CtrlIsDown AND __UI_TotalSelectedControls > 0 THEN
                    ControlCopy:
                    DIM CopyDone AS _BYTE
                    ControlClipboard$ = MKL$(__UI_TotalSelectedControls)
                    FOR i = 1 TO UBOUND(Control)
                        IF Control(i).ControlIsSelected AND Control(i).Type <> __UI_Type_Frame AND Control(i).Type <> __UI_Type_MenuBar AND Control(i).Type <> __UI_Type_MenuItem THEN
                            ControlClipboard$ = ControlClipboard$ + MKL$(i)
                            CopyDone = True
                        END IF
                    NEXT
                    IF CopyDone THEN _CLIPBOARD$ = "InForm" + CHR$(1)
                END IF
            CASE ASC("V"), ASC("v")
                IF __UI_CtrlIsDown THEN
                    ControlPaste:
                    __UI_Click 0 'Force the preview to inform it was edited
                    Clip$ = _CLIPBOARD$
                    IF Clip$ = "InForm" + CHR$(1) THEN
                        DIM PasteID AS LONG, ThisControl AS LONG, FirstToBeSelected AS LONG
                        DIM TempCanvas AS LONG, TempTop AS INTEGER, TempLeft AS INTEGER
                        DIM TempName$, OriginalIndex$, c$

                        j = CVL(MID$(ControlClipboard$, 1, 4))

                        IF __UI_TotalSelectedControls = 1 THEN
                            TempTop = Control(__UI_FirstSelectedID).Top + 20
                            TempLeft = Control(__UI_FirstSelectedID).Left + 20
                        ELSE
                            TempTop = -1
                            TempLeft = -1
                        END IF

                        FOR i = 1 TO UBOUND(Control)
                            Control(i).ControlIsSelected = False
                        NEXT

                        __UI_AutoRefresh = False
                        _DELAY .1
                        Clip$ = MID$(ControlClipboard$, 5)
                        FOR i = 1 TO j
                            ThisControl = CVL(MID$(Clip$, (i * 4 - 3), 4))
                            IF Control(ThisControl).ID > 0 AND Control(ThisControl).Type <> __UI_Type_Frame THEN
                                PasteID = __UI_NewControl(Control(ThisControl).Type, "", Control(ThisControl).Width, Control(ThisControl).Height, 0, 0, 0)
                                TempCanvas = Control(PasteID).Canvas
                                Control(PasteID) = Control(ThisControl)
                                Control(PasteID).ID = 0
                                DO WHILE __UI_GetID(Control(PasteID).Name) > 0
                                    TempName$ = RTRIM$(Control(PasteID).Name)
                                    c$ = RIGHT$(TempName$, 1)
                                    IF ASC(c$) >= 48 AND ASC(c$) <= 57 THEN
                                        'Update this control's name by the ID # assigned to it, if any
                                        OriginalIndex$ = c$
                                        TempName$ = LEFT$(TempName$, LEN(TempName$) - 1)
                                        DO
                                            c$ = RIGHT$(TempName$, 1)
                                            IF ASC(c$) >= 48 AND ASC(c$) <= 57 THEN
                                                OriginalIndex$ = c$ + OriginalIndex$
                                                TempName$ = LEFT$(TempName$, LEN(TempName$) - 1)
                                                IF LEN(TempName$) = 0 THEN EXIT DO
                                            ELSE
                                                EXIT DO
                                            END IF
                                        LOOP
                                    ELSE
                                        OriginalIndex$ = "1"
                                    END IF
                                    Control(PasteID).Name = TempName$ + LTRIM$(STR$(VAL(OriginalIndex$) + 1))
                                LOOP
                                Control(PasteID).ID = PasteID
                                Control(PasteID).ParentID = 0
                                Caption(PasteID) = Caption(ThisControl)
                                Text(PasteID) = Text(ThisControl)
                                ToolTip(PasteID) = ToolTip(ThisControl)
                                Control(PasteID).Canvas = TempCanvas
                                IF Control(ThisControl).HelperCanvas <> 0 THEN
                                    Control(PasteID).HelperCanvas = _COPYIMAGE(Control(ThisControl).HelperCanvas, 32)
                                END IF
                                IF j = 1 AND TempTop + TempLeft >= 0 THEN
                                    Control(PasteID).Top = TempTop
                                    Control(PasteID).Left = TempLeft
                                ELSE
                                    Control(PasteID).Top = Control(PasteID).Top + 20
                                    Control(PasteID).Left = Control(PasteID).Left + 20
                                END IF
                                Control(PasteID).ControlIsSelected = True

                                IF i = 1 THEN FirstToBeSelected = PasteID
                            END IF
                        NEXT
                        __UI_TotalSelectedControls = j
                        __UI_FirstSelectedID =  FirstToBeSelected
                        __UI_ForceRedraw = True
                        __UI_AutoRefresh = True
                    END IF
                    __UI_KeyPress 216
                END IF
            CASE 21248 'Delete
                ControlDelete:
                FOR i = UBOUND(Control) TO 1 STEP -1
                    IF Control(i).ControlIsSelected THEN
                        __UI_Click 0 'Force the preview to inform it was edited
                        IF Control(i).Type = __UI_Type_Frame THEN
                            'Remove controls from container before deleting it
                            FOR j = 1 TO UBOUND(Control)
                                IF Control(j).ParentID = Control(i).ID THEN
                                    Control(j).ParentID = 0
                                    Control(j).Top = Control(j).Top + Control(i).Top
                                    Control(j).Left = Control(j).Left + Control(i).Left
                                END IF
                            NEXT
                        END IF
                        IF Control(i).Type = __UI_Type_MenuBar THEN
                            DIM MustRefreshMenuBar AS _BYTE
                            MustRefreshMenuBar = True
                            FOR j = 1 TO UBOUND(Control)
                                IF Control(j).ParentID = i THEN
                                    __UI_DestroyControl Control(j)
                                END IF
                            NEXT
                        END IF
                        IF __UI_ActiveMenu > 0 AND __UI_ParentMenu = Control(i).ID THEN
                            __UI_DestroyControl Control(__UI_ActiveMenu)
                        END IF
                        __UI_DestroyControl Control(i)
                        IF MustRefreshMenuBar THEN __UI_RefreshMenuBar
                        __UI_ForceRedraw = True
                        __UI_TotalSelectedControls = __UI_TotalSelectedControls - 1
                    END IF
                NEXT
                __UI_KeyPress 216
            CASE 19200 'Left arrow key
                FOR i = 1 TO UBOUND(Control)
                    IF Control(i).ControlIsSelected AND Control(i).Type <> __UI_Type_MenuBar AND Control(i).Type <> __UI_Type_MenuItem THEN
                        __UI_Click 0 'Force the preview to inform it was edited
                        IF __UI_ShiftIsDown THEN
                            Control(i).Width = Control(i).Width - 1
                            __UI_IsResizing = True
                            __UI_ResizingID = i
                        ELSE
                            Control(i).Left = Control(i).Left - 1
                        END IF
                    END IF
                NEXT
                __UI_KeyPress 216
            CASE 19712 'Right arrow key
                FOR i = 1 TO UBOUND(Control)
                    IF Control(i).ControlIsSelected AND Control(i).Type <> __UI_Type_MenuBar AND Control(i).Type <> __UI_Type_MenuItem THEN
                        __UI_Click 0 'Force the preview to inform it was edited
                        IF __UI_ShiftIsDown THEN
                            Control(i).Width = Control(i).Width + 1
                            __UI_IsResizing = True
                            __UI_ResizingID = i
                        ELSE
                            Control(i).Left = Control(i).Left + 1
                        END IF
                    END IF
                NEXT
                __UI_KeyPress 216
            CASE 18432 'Up arrow key
                FOR i = 1 TO UBOUND(Control)
                    IF Control(i).ControlIsSelected AND Control(i).Type <> __UI_Type_MenuBar AND Control(i).Type <> __UI_Type_MenuItem THEN
                        __UI_Click 0 'Force the preview to inform it was edited
                        IF __UI_ShiftIsDown THEN
                            __UI_IsResizing = True
                            __UI_ResizingID = i
                            Control(i).Height = Control(i).Height - 1
                        ELSE
                            Control(i).Top = Control(i).Top - 1
                        END IF
                    END IF
                NEXT
                __UI_KeyPress 216
            CASE 20480 'Down arrow key
                FOR i = 1 TO UBOUND(Control)
                    IF Control(i).ControlIsSelected AND Control(i).Type <> __UI_Type_MenuBar AND Control(i).Type <> __UI_Type_MenuItem THEN
                        __UI_Click 0 'Force the preview to inform it was edited
                        IF __UI_ShiftIsDown THEN
                            Control(i).Height = Control(i).Height + 1
                            __UI_IsResizing = True
                            __UI_ResizingID = i
                        ELSE
                            Control(i).Top = Control(i).Top + 1
                        END IF
                    END IF
                NEXT
                __UI_KeyPress 216
        END SELECT
        IF __UI_ActiveMenu > 0 THEN __UI_ActivateMenu Control(__UI_ParentMenu), False
    ELSEIF __UI_KeyHit <> 0 THEN 'No control has focus
        'Enter activates the default button, if any
        IF __UI_IsDragging = False AND __UI_KeyHit = -13 AND __UI_DefaultButtonID > 0 THEN
            'Enter released and there is a default button
            __UI_Click __UI_DefaultButtonID
        END IF
    END IF

    __UI_LastHoveringID = __UI_HoveringID
END SUB

'---------------------------------------------------------------------------------
FUNCTION __UI_MaskToText$(id AS LONG)
    DIM i AS LONG
    DIM Text$

    Text$ = Text(id)
    IF LEN(Text$) < LEN(Mask(id)) THEN Text$ = Text$ + SPACE$(LEN(Mask(id)) - LEN(Text$))

    FOR i = 1 TO LEN(Mask(id))
        SELECT CASE MID$(Mask(id), i, 1)
            CASE "0", "9", "#"
                IF MID$(Text$, i, 1) <> MID$(Mask(id), i, 1) AND ASC(Text$, i) >= 48 AND ASC(Text$, i) <= 57 THEN
                    'Do nothing
                ELSEIF MID$(Text$, i, 1) <> MID$(Mask(id), i, 1) THEN
                    MID$(Text$, i, 1) = "_"
                END IF
            CASE ELSE
                MID$(Text$, i, 1) = MID$(Mask(id), i, 1)
        END SELECT
    NEXT

    __UI_MaskToText$ = Text$
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION RawText$(id AS LONG)
    DIM t$, c$, i AS INTEGER

    IF Mask(id) = "" THEN
        RawText$ = Text(id)
    ELSE
        FOR i = 1 TO LEN(Mask(id))
            c$ = MID$(Text(id), i, 1)
            SELECT CASE MID$(Mask(id), i, 1)
                CASE "0", "9", "#"
                    IF c$ <> "_" THEN
                        t$ = t$ + c$
                    ELSE
                        t$ = t$ + " "
                    END IF
            END SELECT
        NEXT
        RawText$ = t$
    END IF
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_EmptyMask$(id AS LONG)
    DIM i AS LONG
    DIM Text$

    FOR i = 1 TO LEN(Mask(id))
        SELECT CASE MID$(Mask(id), i, 1)
            CASE "0", "9", "#"
                Text$ = Text$ + "_"
            CASE ELSE
                Text$ = Text$ +  MID$(Mask(id), i, 1)
        END SELECT
    NEXT

    __UI_EmptyMask$ = Text$
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_GetID (ControlName$)
    DIM i AS LONG, ControlSearch$

    ControlSearch$ = UCASE$(RTRIM$(ControlName$))

    FOR i = 1 TO UBOUND(Control)
        IF Control(i).ID > 0 AND UCASE$(RTRIM$(Control(i).Name)) = ControlSearch$ THEN
            __UI_GetID = i
            EXIT FUNCTION
        END IF
    NEXT
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_GetFontID (FontHandle&)
    DIM i AS LONG

    FOR i = 1 TO UBOUND(Control)
        IF Control(i).Type = __UI_Type_Font AND Control(i).Value = FontHandle& THEN
            __UI_GetFontID = i
            EXIT FUNCTION
        END IF
    NEXT
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION SetFont& (NewFontFile AS STRING, NewFontSize AS INTEGER, TempNewFontAttributes AS STRING)
    DIM NextSlot AS LONG, i AS LONG, Temp$, NewFontAttributes AS STRING

    'If the passed font is already loaded, we'll just return its handle
    FOR NextSlot = 1 TO UBOUND(Control)
        IF Control(NextSlot).Type = __UI_Type_Font THEN
            IF UCASE$(Text(NextSlot)) = UCASE$(NewFontFile) AND Control(NextSlot).Max = NewFontSize AND UCASE$(Caption(NextSlot)) = UCASE$(NewFontAttributes) THEN
                SetFont& = Control(NextSlot).Value
                EXIT FUNCTION
            END IF
        END IF
    NEXT

    '-------------------------------------------------
    'The font isn't loaded, so we'll attempt to do so.

    'Increase the global count of fonts
    __UI_Type(__UI_Type_Font).Count = __UI_Type(__UI_Type_Font).Count + 1

    'Find an empty slot for the new font control
    FOR NextSlot = UBOUND(Control) TO 1 STEP -1
        IF Control(NextSlot).ID <> 0 THEN
            NextSlot = NextSlot + 1
            EXIT FOR
        ELSE
            IF NextSlot = 1 THEN NextSlot = UBOUND(Control) + 1: EXIT FOR
        END IF
    NEXT

    IF NextSlot = UBOUND(Control) + 1 THEN
        'No empty slots. We must increase Control() and its helper arrays
        REDIM _PRESERVE Control(0 TO NextSlot + 99) AS __UI_ControlTYPE
        REDIM _PRESERVE Caption(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE __UI_TempCaptions(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE Text(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE __UI_TempTexts(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE Mask(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE __UI_TempMask(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE ToolTip(0 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE __UI_TempTips(0 TO NextSlot + 99) AS STRING
    END IF

    'Initialize new control
    Control(NextSlot).ID = NextSlot
    Control(NextSlot).Type = __UI_Type_Font
    Control(NextSlot).Name = "Font" + LTRIM$(STR$(__UI_Type(__UI_Type_Font).Count))

    IF NewFontFile = "" THEN
        'Internal emulated fonts
        IF NewFontSize <> 8 AND NewFontSize <> 16 THEN
            Control(NextSlot).Value = 16
            Control(NextSlot).Max = 16
        ELSE
            Control(NextSlot).Value = NewFontSize
            Control(NextSlot).Max = NewFontSize
        END IF
        SetFont& = Control(NextSlot).Value
    ELSE
        'Parse attributes
        IF INSTR(UCASE$(TempNewFontAttributes), "MONOSPACE") THEN NewFontAttributes = "MONOSPACE"
        IF INSTR(UCASE$(TempNewFontAttributes), "BOLD") THEN
            IF LEN(NewFontAttributes) > 0 THEN NewFontAttributes = NewFontAttributes + ","
            NewFontAttributes = NewFontAttributes + "BOLD"
        END IF
        IF INSTR(UCASE$(TempNewFontAttributes), "ITALIC") THEN
            IF LEN(NewFontAttributes) > 0 THEN NewFontAttributes = NewFontAttributes + ","
            NewFontAttributes = NewFontAttributes + "ITALIC"
        END IF
        IF INSTR(UCASE$(TempNewFontAttributes), "UNDERLINE") THEN
            IF LEN(NewFontAttributes) > 0 THEN NewFontAttributes = NewFontAttributes + ","
            NewFontAttributes = NewFontAttributes + "UNDERLINE"
        END IF
        IF INSTR(UCASE$(TempNewFontAttributes), "UNICODE") THEN
            IF LEN(NewFontAttributes) > 0 THEN NewFontAttributes = NewFontAttributes + ","
            NewFontAttributes = NewFontAttributes + "UNICODE"
        END IF
        IF INSTR(UCASE$(TempNewFontAttributes), "DONTBLEND") THEN
            IF LEN(NewFontAttributes) > 0 THEN NewFontAttributes = NewFontAttributes + ","
            NewFontAttributes = NewFontAttributes + "DONTBLEND"
        END IF

        Control(NextSlot).Value = _LOADFONT(NewFontFile, NewFontSize, NewFontAttributes)
        Control(NextSlot).Max = NewFontSize
        Text(NextSlot) = NewFontFile
        Caption(NextSlot) = UCASE$(NewFontAttributes)

        SetFont& = Control(NextSlot).Value

        'If loading the requested font fails, we default to _FONT 16
        IF Control(NextSlot).Value <= 0 THEN
            __UI_DestroyControl Control(NextSlot)
            SetFont& = 16
        END IF
    END IF
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_NewControl (ControlType AS INTEGER, ControlName AS STRING, NewWidth AS INTEGER, NewHeight AS INTEGER, NewLeft AS INTEGER, NewTop AS INTEGER, ParentID AS LONG)
    DIM NextSlot AS LONG, i AS LONG, Temp$, PrevDest AS LONG, TempCanvas AS LONG
    STATIC InternalMenus AS LONG

    IF ControlType = 0 THEN EXIT SUB

    'Increase the global count of controls of this type
    __UI_Type(ControlType).Count = __UI_Type(ControlType).Count + 1

    'Give control a generic name, if none is provided
    IF ControlType = __UI_Type_MenuItem AND LEFT$(ControlName, 5) = "__UI_" THEN InternalMenus = InternalMenus + 1
    IF ControlName = "" THEN
        IF ControlType = __UI_Type_MenuItem THEN
            ControlName = RTRIM$(__UI_Type(ControlType).Name) + LTRIM$(STR$(__UI_Type(ControlType).Count - InternalMenus))
        ELSE
            ControlName = RTRIM$(__UI_Type(ControlType).Name) + LTRIM$(STR$(__UI_Type(ControlType).Count))
        END IF
    END IF

    'Make sure this ControlName is unique:
    IF ControlType <> __UI_Type_Font THEN
        i = 1
        DO
            IF __UI_GetID(ControlName) = 0 THEN EXIT DO
            i = i + 1
            ControlName = ControlName + "_" + LTRIM$(STR$(i))
        LOOP
    END IF

    'Find an empty slot for the new control
    FOR NextSlot = UBOUND(Control) TO 1 STEP -1
        IF Control(NextSlot).ID <> 0 THEN
            NextSlot = NextSlot + 1
            EXIT FOR
        ELSE
            IF NextSlot = 1 THEN NextSlot = UBOUND(Control) + 1: EXIT FOR
        END IF
    NEXT

    IF NextSlot = UBOUND(Control) + 1 THEN
        'No empty slots. We must increase Control() and its helper arrays
        REDIM _PRESERVE Control(0 TO NextSlot + 99) AS __UI_ControlTYPE
        REDIM _PRESERVE Caption(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE __UI_TempCaptions(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE Text(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE __UI_TempTexts(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE Mask(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE __UI_TempMask(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE ToolTip(0 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE __UI_TempTips(0 TO NextSlot + 99) AS STRING
    END IF

    'Initialize new control
    Control(NextSlot).ID = NextSlot
    Control(NextSlot).Type = ControlType
    Control(NextSlot).Name = ControlName

    IF ControlType = __UI_Type_Form AND __UI_FormID = 0 THEN __UI_FormID = NextSlot

    Control(NextSlot).ParentID = ParentID
    Control(NextSlot).ParentName = Control(ParentID).Name
    IF (ControlType <> __UI_Type_Form AND ParentID = 0) THEN
        'Inherit main form's font
        Control(NextSlot).Font = Control(__UI_FormID).Font
    ELSEIF (ControlType <> __UI_Type_Frame AND ParentID > 0) THEN
        'Inherit container's font
        Control(NextSlot).Font = Control(ParentID).Font
    END IF

    Control(NextSlot).Width = NewWidth
    Control(NextSlot).Height = NewHeight
    Control(NextSlot).Left = NewLeft
    Control(NextSlot).Top = NewTop
    Control(NextSlot).ForeColor = __UI_DefaultColor(ControlType, 1)
    Control(NextSlot).BackColor = __UI_DefaultColor(ControlType, 2)
    Control(NextSlot).SelectedForeColor = __UI_DefaultColor(ControlType, 3)
    Control(NextSlot).SelectedBackColor = __UI_DefaultColor(ControlType, 4)
    Control(NextSlot).BorderColor = __UI_DefaultColor(ControlType, 5)

    IF ControlType = __UI_Type_MenuBar THEN
        IF _PIXELSIZE = 0 THEN
            'Temporarily create a 32bit screen for proper font handling, in case
            'we're still at form setup (SCREEN 0)
            TempCanvas = _NEWIMAGE(10, 10, 32)
            PrevDest = _DEST
            _DEST TempCanvas
        END IF

        IF Control(__UI_FormID).Font THEN _FONT Control(__UI_FormID).Font
        Control(NextSlot).Height = uspacing& + 5

        IF TempCanvas <> 0 THEN
            _DEST PrevDest
            _FREEIMAGE TempCanvas
        END IF

        IF __UI_HasMenuBar = False THEN
            __UI_HasMenuBar = True
            'Add menubar div to main form's canvas
            IF Control(__UI_FormID).Canvas <> 0 THEN _FREEIMAGE Control(__UI_FormID).Canvas
            Control(__UI_FormID).Canvas = _NEWIMAGE(Control(__UI_FormID).Width, Control(__UI_FormID).Height, 32)
            _DEST Control(__UI_FormID).Canvas
            COLOR Control(__UI_FormID).ForeColor, Control(__UI_FormID).BackColor
            CLS
            IF Control(__UI_FormID).Font THEN _FONT Control(__UI_FormID).Font
            LINE (0, uspacing& + 5 + 1)-STEP(Control(__UI_FormID).Width - 1, 0), Darken(Control(__UI_FormID).BackColor, 80)
            LINE (0, uspacing& + 5 + 2)-STEP(Control(__UI_FormID).Width - 1, 0), Darken(Control(__UI_FormID).BackColor, 120)
            _DEST 0
        END IF
    END IF

    IF ControlType = __UI_Type_Label THEN Control(NextSlot).VAlign = __UI_Middle

    IF ControlType = __UI_Type_TrackBar OR ControlType = __UI_Type_TextBox OR ControlType = __UI_Type_Button OR ControlType = __UI_Type_CheckBox OR ControlType = __UI_Type_RadioButton OR ControlType = __UI_Type_ListBox OR ControlType = __UI_Type_DropdownList THEN
        Control(NextSlot).CanHaveFocus = True
    END IF

    IF ControlType = __UI_Type_Frame THEN
        IF NewWidth = 0 THEN NewWidth = 10
        IF NewHeight = 0 THEN NewHeight = 10
        Control(NextSlot).Canvas = _NEWIMAGE(NewWidth, NewHeight, 32)
    END IF

    IF __UI_DesignMode THEN
        'Control(NextSlot).ContextMenuID = __UI_GetID("__UI_PreviewMenu")
    ELSE
        IF ControlType = __UI_Type_TextBox THEN
            'Programmer can assign any custom menus to his controls, later
            'but by default textboxes and other textfields will be
            'assigned the internal __UI_TextFieldMenu.
            Control(NextSlot).ContextMenuID = __UI_GetID("__UI_TextFieldMenu")
        END IF
    END IF

    IF ControlType = __UI_Type_ProgressBar THEN
        Control(NextSlot).Max = 100
        Caption(NextSlot) = "\#"
    END IF

    IF ControlType = __UI_Type_TrackBar THEN
        Control(NextSlot).Max = 10
        Control(NextSlot).Height = 40
    END IF

    IF ControlType = __UI_Type_Form THEN
        'Create main window bg:
        Control(__UI_FormID).Canvas = _NEWIMAGE(NewWidth, NewHeight, 32)
        _DEST Control(__UI_FormID).Canvas
        COLOR Control(__UI_FormID).ForeColor, Control(__UI_FormID).BackColor
        CLS
        _DEST 0
    END IF

    IF (ControlType = __UI_Type_PictureBox AND __UI_DesignMode) OR ControlType = __UI_Type_TextBox OR ControlType = __UI_Type_Frame OR ControlType = __UI_Type_ListBox OR ControlType = __UI_Type_DropdownList THEN
        Control(NextSlot).HasBorder = True
    END IF

    IF ControlType = __UI_Type_PictureBox THEN
        Control(NextSlot).HelperCanvas = _NEWIMAGE(NewWIdth, NewHeight, 32)
        Control(NextSlot).Stretch = True
    END IF

    __UI_NewControl = NextSlot
END FUNCTION

'---------------------------------------------------------------------------------
SUB __UI_DestroyControl (This AS __UI_ControlTYPE)
    DIM i AS LONG

    __UI_AutoRefresh = False

    IF This.ID > 0 THEN
        Caption(This.ID) = ""
        __UI_TempCaptions(This.ID) = ""
        Text(This.ID) = ""
        __UI_TempTexts(This.ID) = ""
        ToolTip(This.ID) = ""
        __UI_TempTips(This.ID) = ""

        IF This.Type = __UI_Type_ListBox THEN
            IF __UI_ActiveDropdownList = This.ID THEN
                __UI_ActiveDropdownList = 0
                __UI_ParentDropdownList = 0
            END IF
        ELSEIF This.Type = __UI_Type_MenuPanel THEN
            IF __UI_ActiveMenu = This.ID THEN
                __UI_ActiveMenu = 0
                __UI_ParentMenu = 0
            END IF
        END IF

        __UI_Type(This.Type).Count = __UI_Type(This.Type).Count - 1

        'Check if this was the last control using this font
        IF This.Font > 0 AND This.Font <> 8 AND This.Font <> 16 THEN
            FOR i = 1 TO UBOUND(Control)
                IF Control(i).Type <> __UI_Type_Font THEN
                    IF This.ID <> i AND This.Font = Control(i).Font THEN EXIT FOR
                END IF
            NEXT
            IF i > UBOUND(Control) THEN
                __UI_DestroyControl Control(__UI_GetFontID(This.Font))
                This.Font = 0
            END IF
        ELSE
            This.Font = 0
        END IF
    END IF

    This.ID = 0
    This.ParentID = 0
    This.PreviousParentID = 0
    This.ContextMenuID = 0
    This.Name = ""
    This.Top = 0
    This.Left = 0
    This.Width = 0
    This.Height = 0
    IF This.Canvas <> 0 THEN _FREEIMAGE This.Canvas: This.Canvas = 0
    IF This.HelperCanvas <> 0 THEN _FREEIMAGE This.HelperCanvas: This.HelperCanvas = 0
    This.TransparentColor = 0
    This.Stretch = False
    This.PreviousStretch = False
    This.BackColor = 0
    This.ForeColor = 0
    This.SelectedForeColor = 0
    This.SelectedBackColor = 0
    This.BackStyle = 0
    This.HasBorder = False
    This.Padding = 0
    This.Align = 0
    This.BorderColor = 0
    This.Value = 0
    This.Type = 0
    This.PreviousValue = 0
    This.Min = 0
    This.Max = 0
    This.Interval = 0
    This.HotKey = 0
    This.HotKeyOffset = 0
    This.HotKeyPosition = 0
    This.ShowPercentage = False
    This.InputViewStart = 0
    This.PreviousInputViewStart = 0
    This.LastVisibleItem = 0
    This.HasVScrollbar = False
    This.VScrollbarButton2Top = 0
    This.HoveringVScrollbarButton = 0
    This.ThumbHeight = 0
    This.ThumbTop = 0
    This.VScrollbarRatio = 0
    'This.HasHScrollbar = False
    'This.HScrollbarButton2Left = 0
    'This.HoveringHScrollbarButton = 0
    'This.LongestLine = 0
    'This.ThumbWidth = 0
    'This.ThumbLeft = 0
    'This.HScrollbarRatio = 0
    This.Cursor = 0
    This.PrevCursor = 0
    This.FieldArea = 0
    This.PreviousFieldArea = 0
    This.TextIsSelected = False
    This.Multiline = False
    This.FirstVisibleLine = 0
    This.PrevFirstVisibleLine = 0
    This.CurrentLine = 0
    This.PrevCurrentLine = 0
    This.VisibleCursor = 0
    This.PrevVisibleCursor = 0
    IF This.ControlIsSelected THEN This.ControlIsSelected = False: __UI_TotalSelectedControls = __UI_TotalSelectedControls - 1
    This.SelectionLength = 0
    This.SelectionStart = 0
    This.WordWrap = False
    This.CanResize = 0
    This.CanHaveFocus = False
    This.Disabled = False
    This.Hidden = False
    This.CenteredWindow = False
    This.ControlState = 0
    This.ChildrenRedrawn = False
    This.FocusState = 0

    __UI_HasMenuBar = (__UI_FirstMenuBarControl > 0)

    __UI_AutoRefresh = True
END SUB

'---------------------------------------------------------------------------------
SUB SetCaption (ThisID AS LONG, TempCaption$)
    DIM i AS LONG, FindSep%, NewCaption$, UsedList$, TempKey AS _UNSIGNED _BYTE
    DIM PrevFont AS LONG, TempCanvas AS LONG, PrevDest AS LONG

    IF ThisID = 0 THEN EXIT SUB

    NewCaption$ = TempCaption$

    'Parse for hotkey markers
    FindSep% = INSTR(NewCaption$, "&")
    IF FindSep% > 0 AND FindSep% < LEN(NewCaption$) THEN
        FOR i = 1 TO UBOUND(Control)
            'Check if this hot key isn't already assigned to another control
            IF Control(i).HotKey > 0 AND Control(i).Type <> __UI_Type_MenuItem THEN
                UsedList$ = UsedList$ + CHR$(Control(i).HotKey)
            END IF
        NEXT

        NewCaption$ = LEFT$(NewCaption$, FindSep% - 1) + MID$(NewCaption$, FindSep% + 1)
        TempKey = ASC(UCASE$(NewCaption$), FindSep%)
        IF INSTR(UsedList$, CHR$(TempKey)) = 0 THEN
            Control(ThisID).HotKey = TempKey
            Control(ThisID).HotKeyPosition = FindSep%

            PrevFont = _FONT

            IF _PIXELSIZE = 0 THEN
                'Temporarily create a 32bit screen for proper font handling, in case
                'we're still at form setup (SCREEN 0)
                TempCanvas = _NEWIMAGE(10, 10, 32)
                PrevDest = _DEST
                _DEST TempCanvas
            END IF

            _FONT (Control(ThisID).Font)
            Control(ThisID).HotKeyOffset = __UI_PrintWidth(LEFT$(NewCaption$, FindSep% - 1))

            IF TempCanvas <> 0 THEN
                _DEST PrevDest
                _FREEIMAGE TempCanvas
            END IF
            _FONT PrevFont
        ELSE
            Control(ThisID).HotKey = 0
        END IF
    ELSE
        Control(ThisID).HotKey = 0
    END IF

    'Replace \n for line breaks:
    NewCaption$ = Replace$(NewCaption$, "\n", CHR$(10), False, 0)

    Caption(ThisID) = NewCaption$
END SUB

'---------------------------------------------------------------------------------
SUB BeginDraw(ThisID AS LONG)
    IF Control(ThisID).Type <> __UI_Type_PictureBox THEN EXIT SUB
    _DEST Control(ThisID).HelperCanvas
END SUB

'---------------------------------------------------------------------------------
SUB EndDraw(ThisID AS LONG)
    IF Control(ThisID).Type <> __UI_Type_PictureBox THEN EXIT SUB
    _DEST 0
    Control(ThisID).PreviousValue = 0
END SUB

'---------------------------------------------------------------------------------
SUB LoadImage (This AS __UI_ControlTYPE, File$)
    DIM PrevDest AS LONG, ErrorMessage$
    STATIC NotFoundImage AS LONG

    IF This.HelperCanvas <> 0 THEN _FREEIMAGE This.HelperCanvas

    IF _FILEEXISTS(File$) THEN
        This.HelperCanvas = _LOADIMAGE(File$, 32)
        IF This.HelperCanvas = -1 THEN ErrorMessage$ = "Unable to load file:"
    ELSE
        ErrorMessage$ = "Missing image file:"
    END IF

    IF LEN(ErrorMessage$) THEN
        IF NotFoundImage = 0 THEN NotFoundImage = __UI_LoadThemeImage("notfound.png")

        PrevDest = _DEST
        This.HelperCanvas = _NEWIMAGE(This.Width, This.Height, 32)
        _DEST This.HelperCanvas
        _PRINTMODE _KEEPBACKGROUND
        _FONT (This.Font)
        CLS , _RGBA32(0, 0, 0, 0)
        'Place the "missing" icon
        _PUTIMAGE (This.Width / 2 - _WIDTH(NotFoundImage) / 2, This.Height / 2 - _HEIGHT(NotFoundImage) / 2), NotFoundImage

        COLOR This.ForeColor
        __UI_PrintString 5, 5, ErrorMessage$
        __UI_PrintString 5, 5 + uspacing&, File$
        _DEST PrevDest
        Text(This.ID) = ""
    ELSE
        IF This.Type = __UI_Type_PictureBox OR This.Type = __UI_Type_Button OR This.Type = __UI_Type_MenuItem THEN
            Text(This.ID) = File$
        END IF
    END IF
END SUB

'---------------------------------------------------------------------------------
SUB __UI_ClearColor (Image&, Left AS _UNSIGNED LONG, Top AS INTEGER)
    'This SUB may be invoked with two syntaxes:
    '   __UI_ClearColor Image&, Left, Top
    '   In which case the color at the (left,top) coordinate will be read and then cleared
    'OR
    '   __UI_ClearColor Image&, Color, -1
    '   In which case the 32bit color provided will be cleared

    DIM PrevSource AS LONG

    IF NOT Image& < -1 THEN EXIT SUB

    IF Top = -1 THEN
        _CLEARCOLOR Left, Image&
    ELSE
        PrevSource = _SOURCE
        _SOURCE Image&
        _CLEARCOLOR POINT(Left, Top), Image&
        _SOURCE PrevSource
    END IF
END SUB

'---------------------------------------------------------------------------------
SUB __UI_ClearHelperCanvasColor (This AS __UI_ControlTYPE, Left AS INTEGER, Top AS INTEGER)
    DIM PrevSource AS LONG

    IF NOT This.HelperCanvas < -1 THEN EXIT SUB

    PrevSource = _SOURCE
    _SOURCE This.HelperCanvas
    This.TransparentColor = POINT(Left, Top)
    _CLEARCOLOR This.TransparentColor, This.HelperCanvas
    _SOURCE PrevSource
END SUB

'---------------------------------------------------------------------------------
FUNCTION __UI_LoadThemeImage& (FileName$)
    'Contains portions of Dav's BIN2BAS
    'http://www.qbasicnews.com/dav/qb64.php

    DIM A$, i&, B$, C%, F$, C$, t%, B&, X$, btemp$, BASFILE$
    DIM MemoryBlock AS _MEM, TempImage AS LONG, NextSlot AS LONG
    DIM NewWidth AS INTEGER, NewHeight AS INTEGER

    'Check if this FileName$ has already been loaded
    FOR NextSlot = 1 TO UBOUND(__UI_ThemeImages)
        IF UCASE$(RTRIM$(__UI_ThemeImages(NextSlot).FileName)) = UCASE$(FileName$) THEN
            __UI_LoadThemeImage& = __UI_ThemeImages(NextSlot).Handle
            EXIT FUNCTION
        ELSEIF RTRIM$(__UI_ThemeImages(NextSlot).FileName) = "" THEN
            'Found an empty slot
        END IF
    NEXT

    A$ = __UI_ImageData$(FileName$)
    IF LEN(A$) = 0 THEN EXIT FUNCTION

    NewWidth = CVI(LEFT$(A$, 2))
    NewHeight = CVI(MID$(A$, 3, 2))
    A$ = MID$(A$, 5)

    FOR i& = 1 TO LEN(A$) STEP 4: B$ = MID$(A$, i&, 4)
        IF INSTR(1, B$, "%") THEN
            FOR C% = 1 TO LEN(B$): F$ = MID$(B$, C%, 1)
                IF F$ <> "%" THEN C$ = C$ + F$
            NEXT: B$ = C$
            END IF: FOR t% = LEN(B$) TO 1 STEP -1
            B& = B& * 64 + ASC(MID$(B$, t%)) - 48
            NEXT: X$ = "": FOR t% = 1 TO LEN(B$) - 1
            X$ = X$ + CHR$(B& AND 255): B& = B& \ 256
    NEXT: btemp$ = btemp$ + X$: NEXT
    BASFILE$ = btemp$

    TempImage = _NEWIMAGE(NewWidth, NewHeight, 32)
    MemoryBlock = _MEMIMAGE(TempImage)

    __UI_MemCopy MemoryBlock.OFFSET, _OFFSET(BASFILE$), LEN(BASFILE$)
    _MEMFREE MemoryBlock

    IF NextSlot > UBOUND(__UI_ThemeImages) THEN
        'No empty slots. We must increase __UI_ThemeImages()
        REDIM _PRESERVE __UI_ThemeImages(1 TO NextSlot + 99) AS __UI_ThemeImagesType
    END IF
    __UI_ThemeImages(NextSlot).FileName = FileName$
    __UI_ThemeImages(NextSlot).Handle = TempImage

    __UI_LoadThemeImage& = TempImage
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_SpecialCharsToCHR$ (Text$)
    DIM i AS LONG, Temp$

    Temp$ = CHR$(34)
    FOR i = 1 TO LEN(Text$)
        IF ASC(Text$, i) < 32 OR ASC(Text$, i) = 34 THEN
            Temp$ = Temp$ + CHR$(34) + " + CHR$(" + LTRIM$(STR$(ASC(Text$, i))) + ") + " + CHR$(34)
        ELSE
            Temp$ = Temp$ + MID$(Text$, i, 1)
        END IF
    NEXT
    __UI_SpecialCharsToCHR$ = Temp$ + CHR$(34)
END FUNCTION

'---------------------------------------------------------------------------------
SUB SetRadioButtonValue (id)
    'Radio buttons will change value of others in the same group
    DIM i AS LONG

    FOR i = 1 TO UBOUND(Control)
        IF Control(i).Type = __UI_Type_RadioButton AND Control(i).ParentID = Control(id).ParentID THEN
            Control(i).Value = False
        END IF
    NEXT
    Control(id).Value = True
END SUB

'---------------------------------------------------------------------------------
SUB __UI_CheckSelection (id)
    IF NOT Control(id).Multiline THEN
        IF __UI_ShiftIsDown THEN
            IF NOT Control(id).TextIsSelected THEN
                Control(id).TextIsSelected = True
                Control(id).SelectionStart = Control(id).Cursor
            END IF
        ELSE
            Control(id).TextIsSelected = False
            __UI_SelectedText = ""
            __UI_SelectionLength = 0
        END IF
    END IF
END SUB

'---------------------------------------------------------------------------------
SUB __UI_DeleteSelection
    DIM s1 AS LONG, s2 AS LONG

    IF NOT Control(__UI_Focus).Multiline THEN
        s1 = Control(__UI_Focus).SelectionStart
        s2 = Control(__UI_Focus).Cursor
        IF s1 > s2 THEN SWAP s1, s2
        Text(__UI_Focus) = LEFT$(Text(__UI_Focus), s1) + MID$(Text(__UI_Focus), s2 + 1)
        Control(__UI_Focus).TextIsSelected = False
        __UI_SelectedText = ""
        __UI_SelectionLength = 0
        Control(__UI_Focus).Cursor = s1
    END IF
END SUB

'---------------------------------------------------------------------------------
SUB __UI_DeleteSelectionMasked
    DIM s1 AS LONG, s2 AS LONG

    s1 = Control(__UI_Focus).SelectionStart
    s2 = Control(__UI_Focus).Cursor
    IF s1 > s2 THEN SWAP s1, s2
    MID$(Text(__UI_Focus), s1 + 1, s2 - s1) = MID$(__UI_EmptyMask$(__UI_Focus), s1 + 1, s2 - s1)
    Control(__UI_Focus).TextIsSelected = False
    __UI_SelectedText = ""
    __UI_SelectionLength = 0
    Control(__UI_Focus).Cursor = s1
END SUB

'---------------------------------------------------------------------------------
SUB __UI_CursorAdjustments(This AS LONG)
    DIM i AS LONG, ThisLineStart AS LONG, ThisLineLen AS LONG
    IF NOT Control(This).Multiline AND Control(This).Type = __UI_Type_TextBox THEN
        IF Control(This).VisibleCursor >= Control(This).Width THEN Control(This).InputViewStart = Control(This).InputViewStart + Control(This).Width / 4
        IF Control(This).VisibleCursor <= 0 THEN Control(This).InputViewStart = Control(This).InputViewStart - Control(This).Width / 4
        IF Control(This).InputViewStart < 0 THEN Control(This).InputViewStart = 0
    ELSEIF Control(This).Multiline AND Control(This).Type = __UI_Type_TextBox THEN
        'ThisLineLen = LEN(__UI_GetTextBoxLine(This, Control(This).CurrentLine, ThisLineStart))
        'IF Control(This).VisibleCursor > ThisLineLen THEN Control(This).VisibleCursor = ThisLineLen
        'IF Control(This).VisibleCursor > Control(This).PrevVisibleCursor THEN
        '    IF Control(This).VisibleCursor - Control(This).InputViewStart + 2 > Control(This).FieldArea THEN Control(This).InputViewStart = (Control(This).VisibleCursor - Control(This).FieldArea) + 2
        'ELSEIF Control(This).VisibleCursor < Control(This).PrevVisibleCursor THEN
        '    IF Control(This).VisibleCursor < Control(This).InputViewStart - 1 THEN Control(This).InputViewStart = Control(This).VisibleCursor
        'END IF
        'IF Control(This).InputViewStart < 1 THEN Control(This).InputViewStart = 1
    END IF
END SUB

'---------------------------------------------------------------------------------
FUNCTION Replace$ (TempText$, SubString$, NewString$, CaseSensitive AS _BYTE, TotalReplacements AS LONG)
    DIM FindSubString AS LONG, Text$

    IF LEN(TempText$) = 0 THEN EXIT SUB

    Text$ = TempText$
    TotalReplacements = 0
    DO
        IF CaseSensitive THEN
            FindSubString = INSTR(FindSubString + 1, Text$, SubString$)
        ELSE
            FindSubString = INSTR(FindSubString + 1, UCASE$(Text$), UCASE$(SubString$))
        END IF
        IF FindSubString = 0 THEN EXIT DO
        IF LEFT$(SubString$, 1) = "\" THEN 'Escape sequence
            'Replace the Substring if it's not preceeded by another backslash
            IF MID$(Text$, FindSubstring - 1, 1) <> "\" THEN
                Text$ = LEFT$(Text$, FindSubString - 1) + NewString$ + MID$(Text$, FindSubString + LEN(SubString$))
                TotalReplacements = TotalReplacements + 1
            END IF
        ELSE
            Text$ = LEFT$(Text$, FindSubString - 1) + NewString$ + MID$(Text$, FindSubString + LEN(SubString$))
            TotalReplacements = TotalReplacements + 1
        END IF
    LOOP

    Replace$ = Text$
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_CountLines&(id AS LONG)
    DIM FindLF AS LONG, TotalLines AS LONG

    IF LEN(Text(id)) = 0 THEN EXIT FUNCTION

    FindLF = INSTR(Text(id), CHR$(10))
    IF FindLF = 0 THEN
        __UI_CountLines& = 1
        EXIT FUNCTION
    END IF

    'There are at least two lines, as one line break was found.
    'The search continues from there
    TotalLines = 2
    DO
        FindLF = INSTR(FindLF + 1, Text(id), CHR$(10))
        IF FindLF = 0 THEN
            __UI_CountLines& = TotalLines
            EXIT FUNCTION
        END IF
        TotalLines = TotalLines + 1
    LOOP
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_GetTextBoxLine$ (id AS LONG, LineNumber AS LONG, StartPosition AS LONG)
    'StartPosition is a return parameter

    DIM This AS __UI_ControlTYPE, ThisLine AS LONG, FindLF AS LONG, LastLF AS LONG

    This = Control(id)

    StartPosition = 1

    IF NOT This.MultiLine THEN
        __UI_GetTextBoxLine$ = Text(id)
        EXIT FUNCTION
    END IF

    FindLF = INSTR(Text(id), CHR$(10))
    IF LineNumber = 1 THEN
        IF FindLF = 0 THEN
            __UI_GetTextBoxLine$ = Text(id)
            EXIT FUNCTION
        ELSE
            __UI_GetTextBoxLine$ = LEFT$(Text(id), FindLF - 1)

            EXIT FUNCTION
        END IF
    END IF

    'Scan forward until the desired line is reached or
    'until the end of the text is found:
    ThisLine = 2
    DO
        LastLF = FindLF
        FindLF = INSTR(LastLF + 1, Text(id), CHR$(10))
        IF FindLF > 0 THEN
            IF ThisLine = LineNumber THEN
                __UI_GetTextBoxLine$ = MID$(Text(id), LastLF + 1, FindLF - LastLF - 1)
                StartPosition = LastLF + 1
                EXIT FUNCTION
            END IF
        ELSE
            IF ThisLine = LineNumber THEN
                __UI_GetTextBoxLine$ = MID$(Text(id), LastLF + 1)
                StartPosition = LastLF + 1
            END IF
            EXIT FUNCTION
        END IF
        ThisLine = ThisLine + 1
    LOOP
    'We reached the end of the text. LineNumber seems to not exist.
    StartPosition = 0
END FUNCTION

'---------------------------------------------------------------------------------
SUB AddItem (WhichListBox AS LONG, Item$)
    DIM ThisID AS LONG

    ThisID = WhichListBox
    IF Control(ThisID).Type <> __UI_Type_ListBox AND Control(ThisID).Type <> __UI_Type_DropdownList THEN EXIT SUB

    Text(ThisID) = Text(ThisID) + Item$ + CHR$(13)
    Control(ThisID).Max = Control(ThisID).Max + 1
    Control(ThisID).LastVisibleItem = 0 'Reset this var so it'll be recalculated
END SUB

'---------------------------------------------------------------------------------
SUB RemoveItem (WhichListBox AS LONG, ItemToRemove AS INTEGER)
    DIM This AS __UI_ControlTYPE, TempText$, ThisItem%, FindLF&, TempCaption$

    This = Control(WhichListBox)
    IF This.Type <> __UI_Type_ListBox AND This.Type <> __UI_Type_DropdownList THEN EXIT SUB

    IF ItemToRemove > This.Max THEN EXIT SUB

    TempText$ = Text(This.ID)
    Text(This.ID) = ""

    ThisItem% = 0
    DO WHILE LEN(TempText$)
        ThisItem% = ThisItem% + 1
        FindLF& = INSTR(TempText$, CHR$(13))
        IF FindLF& THEN
            TempCaption$ = LEFT$(TempText$, FindLF& - 1)
            TempText$ = MID$(TempText$, FindLF& + 1)
        ELSE
            TempCaption$ = TempText$
            TempText$ = ""
        END IF

        IF ThisItem% <> ItemToRemove THEN Text(This.ID) = Text(This.ID) + TempCaption$ + CHR$(13)
    LOOP

    This.Max = This.Max - 1
    This.LastVisibleItem = 0 'Reset this var so it'll be recalculated
    IF This.Value = ItemToRemove THEN
        This.Value = 0
    ELSEIF This.Value > ItemToRemove THEN
        This.Value = This.Value - 1
    END IF

    Control(This.ID) = This
END SUB

'---------------------------------------------------------------------------------
SUB ResetList (WhichListBox AS LONG)
    DIM This AS __UI_ControlTYPE

    This = Control(WhichListBox)
    IF This.Type <> __UI_Type_ListBox AND This.Type <> __UI_Type_DropdownList THEN EXIT SUB

    Text(This.ID) = ""

    This.Max = 0
    This.LastVisibleItem = 0 'Reset this var so it'll be recalculated
    This.Value = 0

    Control(This.ID) = This
END SUB

'---------------------------------------------------------------------------------
SUB ReplaceItem (WhichListBox AS LONG, ItemToReplace AS INTEGER, NewText$)
    DIM This AS __UI_ControlTYPE, TempText$, ThisItem%, FindLF&, TempCaption$

    This = Control(WhichListBox)
    IF This.Type <> __UI_Type_ListBox AND This.Type <> __UI_Type_DropdownList THEN EXIT SUB

    IF ItemToReplace > This.Max THEN EXIT SUB

    TempText$ = Text(This.ID)
    Text(This.ID) = ""

    ThisItem% = 0
    DO WHILE LEN(TempText$)
        ThisItem% = ThisItem% + 1
        FindLF& = INSTR(TempText$, CHR$(13))
        IF FindLF& THEN
            TempCaption$ = LEFT$(TempText$, FindLF& - 1)
            TempText$ = MID$(TempText$, FindLF& + 1)
        ELSE
            TempCaption$ = TempText$
            TempText$ = ""
        END IF

        IF ThisItem% <> ItemToReplace THEN
            Text(This.ID) = Text(This.ID) + TempCaption$ + CHR$(13)
        ELSE
            Text(This.ID) = Text(This.ID) + NewText$ + CHR$(13)
        END IF
    LOOP
END SUB

'---------------------------------------------------------------------------------
FUNCTION GetItem$ (id AS LONG, Item AS LONG)
    DIM This AS __UI_ControlTYPE, ThisItem AS LONG, FindLF AS LONG, LastLF AS LONG

    This = Control(id)

    FindLF = INSTR(Text(id), CHR$(13))
    IF Item = 1 THEN
        IF FindLF = 0 THEN
            GetItem$ = Text(id)
            EXIT FUNCTION
        ELSE
            GetItem$ = LEFT$(Text(id), FindLF - 1)
            EXIT FUNCTION
        END IF
    END IF

    'Scan forward until the desired item is reached or
    'until the end of the text is found:
    ThisItem = 2
    DO
        LastLF = FindLF
        FindLF = INSTR(LastLF + 1, Text(id), CHR$(13))
        IF FindLF > 0 THEN
            IF ThisItem = Item THEN
                GetItem$ = MID$(Text(id), LastLF + 1, FindLF - LastLF - 1)
                EXIT FUNCTION
            END IF
        ELSE
            IF ThisItem = Item THEN
                GetItem$ = MID$(Text(id), LastLF + 1)
            END IF
            EXIT FUNCTION
        END IF
        ThisItem = ThisItem + 1
    LOOP
    'We reached the end of the text. Item seems to not exist.
END FUNCTION

'---------------------------------------------------------------------------------
SUB __UI_ListBoxSearchItem (This AS __UI_ControlTYPE)
    STATIC SearchPattern$, LastListKeyHit AS DOUBLE
    DIM ThisItem%, FindLF&, TempCaption$, TempText$
    DIM ListItems$(1 TO This.Max)

    TempText$ = Text(This.ID)
    DO WHILE LEN(TempText$)
        ThisItem% = ThisItem% + 1
        FindLF& = INSTR(TempText$, CHR$(13))
        IF FindLF& THEN
            TempCaption$ = LEFT$(TempText$, FindLF& - 1)
            TempText$ = MID$(TempText$, FindLF& + 1)
        ELSE
            TempCaption$ = TempText$
            TempText$ = ""
        END IF

        ListItems$(ThisItem%) = TempCaption$
    LOOP

    IF TIMER - LastListKeyHit < 1 THEN
        SearchPattern$ = SearchPattern$ + UCASE$(CHR$(__UI_KeyHit))
        ThisItem% = This.Value
    ELSE
        SearchPattern$ = UCASE$(CHR$(__UI_KeyHit))
        ThisItem% = This.Value + 1
        IF ThisItem% > This.Max THEN ThisItem% = 1
    END IF

    DO
        IF UCASE$(LEFT$(ListItems$(ThisItem%), LEN(SearchPattern$))) = SearchPattern$ THEN
            This.Value = ThisItem%
            __UI_ValueChanged This.ID
            EXIT DO
        END IF
        ThisItem% = ThisItem% + 1
        IF ThisItem% > This.Max THEN ThisItem% = 1
        IF ThisItem% = This.Value THEN EXIT DO
    LOOP

    LastListKeyHit = TIMER
END SUB

'---------------------------------------------------------------------------------
SUB __UI_PrintString(Left AS INTEGER, Top AS INTEGER, Text$)
    DIM Utf$

    IF LEFT$(Text$, 1) = CHR$(7) AND (_FONT = 8 OR _FONT = 16) THEN
        Utf$ = Text$
    ELSE
        IF Control(__UI_FormID).Encoding = 1252 THEN
            Utf$ = FromCP1252$(Text$)
        ELSE 'Default to 437
            Utf$ = FromCP437$(Text$)
        END IF
    END IF

    REDIM __UI_ThisLineChars(LEN(Utf$)) AS LONG
    uprint_extra Left, Top, _OFFSET(Utf$), LEN(Utf$), True, True, __UI_LastRenderedLineWidth, _OFFSET(__UI_ThisLineChars()), __UI_LastRenderedCharCount, _DEFAULTCOLOR, 0
    REDIM _PRESERVE __UI_ThisLineChars(__UI_LastRenderedCharCount) AS LONG
END SUB

'---------------------------------------------------------------------------------
FUNCTION __UI_PrintWidth&(Text$)
    __UI_PrintWidth& = uprintwidth(Text$, LEN(Text$), 0)
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_WordWrap$ (PassedText AS STRING, Width AS INTEGER, LongestLine AS INTEGER, Lines AS INTEGER)
    DIM Temp$, TempCaption$, FindSep AS LONG, PrevSep AS LONG
    DIM NextSlot AS LONG, TempLine$, i AS LONG, Text AS STRING
    DIM ThisLineWidth AS INTEGER

    Text = RTRIM$(PassedText)
    IF Text = "" THEN Lines = 1: EXIT FUNCTION

    FOR i = 1 TO UBOUND(__UI_WordWrapHistoryTexts)
        IF __UI_WordWrapHistoryTexts(i) = "" THEN EXIT FOR
        IF __UI_WordWrapHistoryTexts(i) = Text THEN
            'Text has been processed before. If it was under the same Width and Font,
            'the previously stored result is returned
            IF  __UI_WordWrapHistory(i).Width = Width AND __UI_WordWrapHistory(i).Font = _FONT THEN
                __UI_WordWrap$ = __UI_WordWrapHistoryResults(i)
                Lines = __UI_WordWrapHistory(i).TotalLines
                EXIT FUNCTION
            ELSE
                'Otherwise, it'll be reprocessed
                EXIT FOR
            ENDIF
        END IF
    NEXT

    NextSlot = i
    IF NextSlot > UBOUND(__UI_WordWrapHistory) THEN
        REDIM _PRESERVE __UI_WordWrapHistory(1 TO NextSlot + 99) AS __UI_WordWrapHistoryType
        REDIM _PRESERVE __UI_WordWrapHistoryTexts(1 TO NextSlot + 99) AS STRING
        REDIM _PRESERVE __UI_WordWrapHistoryResults(1 TO NextSlot + 99) AS STRING
    END IF

    __UI_WordWrapHistoryTexts(NextSlot) = Text
    __UI_WordWrapHistory(NextSlot).Width = Width
    __UI_WordWrapHistory(NextSlot).Font = _FONT
    Lines = 0
    LongestLine = 0
    TempCaption$ = Text
    IF __UI_PrintWidth&(TempCaption$) > Width THEN
        'Word wrap is faster for fixed-width fonts.
        'CHR$(10) is a line break. CHR$(1) is a soft break (word wrap)
        DO WHILE LEN(TempCaption$)
            FindSep = INSTR(TempCaption$, CHR$(10)) 'process the passed text line by line
            IF FindSep > 0 THEN
                TempLine$ = LEFT$(TempCaption$, FindSep - 1)
                TempCaption$ = MID$(TempCaption$, FindSep + 1)
            ELSE
                TempLine$ = TempCaption$
                TempCaption$ = ""
            END IF

            DO WHILE LEN(TempLine$)
                IF __UI_PrintWidth&(TempLine$) < Width THEN
                    IF LEN(Temp$) > 0 THEN Temp$ = Temp$ + CHR$(1)
                    ThisLineWidth = __UI_PrintWidth(Templine$)
                    IF LongestLine < ThisLineWidth THEN LongestLine = ThisLineWidth
                    Temp$ = Temp$ + TempLine$
                    TempLine$ = ""
                    Lines = Lines + 1
                ELSE
                    PrevSep = 0
                    DO
                        FindSep = INSTR(PrevSep + 1, TempLine$, " ")
                        IF FindSep > 0 THEN
                            IF __UI_PrintWidth(LEFT$(TempLine$, FindSep - 1)) > Width THEN
                                IF PrevSep = 0 THEN
                                    'This word alone is > than the width, can't fight that.
                                    IF LEN(Temp$) > 0 THEN Temp$ = Temp$ + CHR$(1)
                                    Temp$ = Temp$ + LEFT$(TempLine$, FindSep - 1)
                                    TempLine$ = MID$(TempLine$, FindSep + 1)
                                    Lines = Lines + 1
                                    EXIT DO
                                ELSE
                                    IF LEN(Temp$) > 0 THEN Temp$ = Temp$ + CHR$(1)
                                    Temp$ = Temp$ + LEFT$(TempLine$, PrevSep - 1)
                                    ThisLineWidth = __UI_PrintWidth(LEFT$(TempLine$, PrevSep - 1))
                                    IF LongestLine < ThisLineWidth THEN LongestLine = ThisLineWidth
                                    TempLine$ = MID$(TempLine$, PrevSep + 1)
                                    Lines = Lines + 1
                                    EXIT DO
                                END IF
                            END IF
                            PrevSep = FindSep
                        ELSE
                            IF PrevSep > 0 THEN
                                IF LEN(Temp$) > 0 THEN Temp$ = Temp$ + CHR$(1)
                                Temp$ = Temp$ + LEFT$(TempLine$, PrevSep - 1)
                                ThisLineWidth = __UI_PrintWidth(LEFT$(TempLine$, PrevSep - 1))
                                IF LongestLine < ThisLineWidth THEN LongestLine = ThisLineWidth
                                TempLine$ = MID$(TempLine$, PrevSep + 1)
                                Lines = Lines + 1
                                EXIT DO
                            ELSE
                                IF LEN(Temp$) > 0 THEN Temp$ = Temp$ + CHR$(1)
                                Temp$ = Temp$ + Templine$
                                ThisLineWidth = __UI_PrintWidth(Templine$)
                                IF LongestLine < ThisLineWidth THEN LongestLine = ThisLineWidth
                                TempLine$ = ""
                                Lines = Lines + 1
                                EXIT DO
                            END IF
                        END IF
                    LOOP
                END IF
            LOOP
        LOOP
        __UI_WordWrap$ = Temp$
        __UI_WordWrapHistoryResults(NextSlot) = Temp$
        __UI_WordWrapHistory(NextSlot).TotalLines = Lines
    ELSE
        'Count line breaks
        Lines = 1
        LongestLine = 0
        Temp$ = TempCaption$
        FindSep = INSTR(TempCaption$, CHR$(10))
        IF FindSep > 0 THEN
            Temp$ = ""
            Lines = 0
            DO WHILE LEN(TempCaption$)
                FindSep = INSTR(TempCaption$, CHR$(10))
                IF FindSep > 0 THEN
                    Lines = Lines + 1
                    IF LEN(Temp$) > 0 THEN Temp$ = Temp$ + CHR$(1)
                    Temp$ = Temp$ + LEFT$(TempCaption$, FindSep - 1)
                    ThisLineWidth = __UI_PrintWidth(LEFT$(TempCaption$, FindSep - 1))
                    IF LongestLine < ThisLineWidth THEN LongestLine = ThisLineWidth
                    TempCaption$ = MID$(TempCaption$, FindSep + 1)
                ELSE
                    Lines = Lines + 1
                    Temp$ = Temp$ + CHR$(1) + TempCaption$
                    EXIT DO
                END IF
            LOOP
        ELSE
            LongestLine = __UI_PrintWidth(TempCaption$)
        END IF

        __UI_WordWrap$ = Temp$
        __UI_WordWrapHistoryResults(NextSlot) = Temp$
        __UI_WordWrapHistory(NextSlot).TotalLines = Lines
    END IF
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION MessageBox& (Message$, Title$, Setup AS LONG)
    _DELAY .1 'So the interface can redraw before the messagebox kicks in

    IF Title$ = "" THEN Title$ = __UI_CurrentTitle

    $IF WIN THEN
        MessageBox& = __UI_MB(0, Message$ + CHR$(0), Title$ + CHR$(0), Setup + MsgBox_SystemModal + MsgBox_SetForeground)
    $ELSE
        IF (Setup AND 4) THEN
        MessageBox& = __UI_MB(0, Message$ + CHR$(0), Title$ + CHR$(0), 4)
        ELSE
        MessageBox& = __UI_MB(0, Message$ + CHR$(0), Title$ + CHR$(0), 0)
        END IF
    $END IF
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_MAP## (value##, minRange##, maxRange##, newMinRange##, newMaxRange##)
    __UI_MAP## = ((value## - minRange##) / (maxRange## - minRange##)) * (newMaxRange## - newMinRange##) + newMinRange##
END FUNCTION

'---------------------------------------------------------------------------------
SUB __UI_ActivateDropdownlist (This AS __UI_ControlTYPE)
    IF NOT This.Disabled THEN
        __UI_ParentDropdownList = This.ID
        __UI_ActiveDropdownList = __UI_NewControl(__UI_Type_ListBox, RTRIM$(This.Name) + CHR$(254) + "DropdownList", 0, 0, 0, 0, 0)
        Text(__UI_ActiveDropdownList) = Text(This.ID)
        Control(__UI_ActiveDropdownList).Left = This.Left + Control(This.ParentID).Left
        Control(__UI_ActiveDropdownList).Width = This.Width
        Control(__UI_ActiveDropdownList).Top = This.Top + This.Height + Control(This.ParentID).Top

        'Make up to 14 items visible:
        DIM MaxVisible AS INTEGER
        IF This.Max > 14 THEN MaxVisible = 14 ELSE MaxVisible = This.Max

        _FONT This.Font
        Control(__UI_ActiveDropdownList).Height = uspacing& * (MaxVisible + .5)

        IF Control(__UI_ActiveDropdownList).Top + Control(__UI_ActiveDropdownList).Height > Control(__UI_FormID).Height THEN
            Control(__UI_ActiveDropdownList).Top = Control(__UI_FormID).Height - Control(__UI_ActiveDropdownList).Height
        END IF
        Control(__UI_ActiveDropdownList).Max = This.Max
        Control(__UI_ActiveDropdownList).Value = This.Value
        Control(__UI_ActiveDropdownList).ForeColor = This.ForeColor
        Control(__UI_ActiveDropdownList).BackColor = This.BackColor
        Control(__UI_ActiveDropdownList).SelectedForeColor = This.SelectedForeColor
        Control(__UI_ActiveDropdownList).SelectedBackColor = This.SelectedBackColor
        Control(__UI_ActiveDropdownList).Font = This.Font
        Control(__UI_ActiveDropdownList).HasBorder = True
        Control(__UI_ActiveDropdownList).BorderColor = _RGB32(0, 0, 0)
        Control(__UI_ActiveDropdownList).CanHaveFocus = True
        Control(__UI_ActiveDropdownList).InputViewStart = 1
        Control(__UI_ActiveDropdownList).LastVisibleItem = MaxVisible
        __UI_Focus = __UI_ActiveDropdownList

        'Adjust view:
        IF Control(__UI_Focus).Value < Control(__UI_Focus).InputViewStart THEN
            Control(__UI_Focus).InputViewStart = Control(__UI_Focus).Value
        ELSEIF Control(__UI_Focus).Value > Control(__UI_Focus).InputViewStart + Control(__UI_Focus).LastVisibleItem - 1 THEN
            Control(__UI_Focus).InputViewStart = Control(__UI_Focus).Value - Control(__UI_Focus).LastVisibleItem + 1
        END IF
    END IF
END SUB

'---------------------------------------------------------------------------------
SUB __UI_ActivateMenu (This AS __UI_ControlTYPE, SelectFirstItem AS _BYTE)
    DIM i AS LONG, ItemHeight AS SINGLE, TotalItems AS INTEGER

    IF NOT This.Disabled THEN
        IF __UI_ActiveMenu > 0 THEN __UI_DestroyControl Control(__UI_ActiveMenu)
        __UI_ActiveMenu = __UI_NewControl(__UI_Type_MenuPanel, RTRIM$(This.Name) + CHR$(254) + "Panel", 0, 0, 0, 0, 0)
        IF __UI_ActiveMenu = 0 THEN EXIT SUB

        __UI_ParentMenu = This.ID
        Control(__UI_ActiveMenu).Font = This.Font
        _FONT (This.Font)

        IF This.Type = __UI_Type_MenuBar THEN
            Control(__UI_ActiveMenu).Left = This.Left
            Control(__UI_ActiveMenu).Top = uspacing& + 3
            __UI_ActiveMenuIsContextMenu = False
        ELSEIF This.Type = __UI_Type_ContextMenu THEN
            Control(__UI_ActiveMenu).Left = __UI_MouseLeft
            Control(__UI_ActiveMenu).Top = __UI_MouseTop
            __UI_ActiveMenuIsContextMenu = True
        END IF

        'Calculate panel's width and position the menu items
        ItemHeight = uspacing& + 3
        Control(__UI_ActiveMenu).Height = uspacing& / 4
        FOR i = 1 TO UBOUND(Control)
            IF Control(i).ParentID = This.ID AND NOT Control(i).Hidden THEN
                TotalItems = TotalItems + 1
                Control(i).Width = __UI_MenuItemOffset * 2 + __UI_PrintWidth(Caption(i))
                IF Control(__UI_ActiveMenu).Width < Control(i).Width THEN
                    Control(__UI_ActiveMenu).Width = Control(i).Width
                END IF

                'Reposition menu items:
                Control(i).Top = Control(__UI_ActiveMenu).Height
                Control(i).Height = ItemHeight

                'Grow the panel:
                Control(__UI_ActiveMenu).Height = Control(__UI_ActiveMenu).Height + ItemHeight

                IF RIGHT$(Caption(i), 1) = "-" THEN 'Separator
                    Control(__UI_ActiveMenu).Height = Control(__UI_ActiveMenu).Height + ItemHeight / 3
                END IF
            END IF
        NEXT

        Control(__UI_ActiveMenu).Height = Control(__UI_ActiveMenu).Height + (uspacing& / 4)

        IF Control(__UI_ActiveMenu).Width = 0 THEN Control(__UI_ActiveMenu).Width = Control(__UI_FormID).Width / 4

        IF __UI_DesignMode AND LEFT$(This.Name, 5) <> "__UI_" THEN Control(__UI_ActiveMenu).Height = Control(__UI_ActiveMenu).Height + ItemHeight

        IF Control(__UI_ActiveMenu).Left + Control(__UI_ActiveMenu).Width > Control(__UI_FormID).Width THEN
            Control(__UI_ActiveMenu).Left = Control(__UI_FormID).Width - Control(__UI_ActiveMenu).Width - 5
        END IF

        IF Control(__UI_ActiveMenu).Top + Control(__UI_ActiveMenu).Height > Control(__UI_FormID).Height THEN
            Control(__UI_ActiveMenu).Top = Control(__UI_FormID).Height - Control(__UI_ActiveMenu).Height - 5
        END IF

        IF SelectFirstItem AND NOT __UI_DesignMode AND TotalItems > 0 THEN
            __UI_Focus = __UI_NextMenuItem(0)
        ELSE
            __UI_Focus = __UI_ActiveMenu
        END IF
    END IF
END SUB

'---------------------------------------------------------------------------------
SUB __UI_DoEvents
    __UI_ProcessInput
    IF __UI_HasInput THEN
        __UI_EventDispatcher
    END IF
END SUB

'---------------------------------------------------------------------------------
FUNCTION __UI_TrimAt0$(Text$)
    IF INSTR(Text$, CHR$(0)) > 0 THEN
        __UI_TrimAt0$ = LEFT$(Text$, INSTR(Text$, CHR$(0)) - 1)
    ELSE
        __UI_TrimAt0$ = Text$
    END IF
END FUNCTION

'---------------------------------------------------------------------------------
SUB __UI_MakeHardwareImageFromCanvas (This AS __UI_ControlTYPE)
    DIM TempCanvas AS LONG

    IF This.ID = 0 OR This.Canvas = 0 OR __UI_DesignMode THEN EXIT SUB

    'Convert to hardware images only those that aren't contained in a frame
    IF This.ParentID = 0 THEN
        TempCanvas = _COPYIMAGE(This.Canvas, 33)
        IF This.Canvas <> 0 THEN _FREEIMAGE This.Canvas
        This.Canvas = TempCanvas
    END IF
END SUB

'---------------------------------------------------------------------------------
SUB __UI_MakeHardwareImage (This AS LONG)
    DIM TempCanvas AS LONG

    IF __UI_DesignMode THEN EXIT SUB

    TempCanvas = _COPYIMAGE(This, 33)
    _FREEIMAGE This
    This = TempCanvas
END SUB

'---------------------------------------------------------------------------------
FUNCTION __UI_FirstMenuBarControl
    DIM i AS LONG
    FOR i = 1 TO UBOUND(Control)
        IF Control(i).ID > 0 AND Control(i).Type = __UI_Type_MenuBar AND NOT Control(i).Hidden THEN
            __UI_FirstMenuBarControl = i
            EXIT FUNCTION
        END IF
    NEXT
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_NextMenuBarControl (CurrentMenuBarControl)
    DIM i AS LONG
    i = CurrentMenuBarControl
    DO
        i = i + 1
        IF i > UBOUND(Control) THEN i = 1
        IF i = CurrentMenuBarControl THEN EXIT DO
        IF Control(i).Type = __UI_Type_MenuBar AND NOT Control(i).Hidden AND NOT Control(i).Disabled THEN
            EXIT DO
        END IF
    LOOP
    __UI_NextMenuBarControl = i
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_PreviousMenuBarControl (CurrentMenuBarControl)
    DIM i AS LONG
    i = CurrentMenuBarControl
    DO
        i = i - 1
        IF i < 1 THEN i = UBOUND(Control)
        IF i = CurrentMenuBarControl THEN EXIT DO
        IF Control(i).Type = __UI_Type_MenuBar AND NOT Control(i).Hidden AND NOT Control(i).Disabled THEN
            EXIT DO
        END IF
    LOOP
    __UI_PreviousMenuBarControl = i
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_NextMenuItem (CurrentMenuItemControl)
    DIM i AS LONG
    i = CurrentMenuItemControl
    DO
        i = i + 1
        IF i > UBOUND(Control) THEN i = 1
        IF i = CurrentMenuItemControl THEN EXIT DO
        IF Control(i).Type = __UI_Type_MenuItem AND NOT Control(i).Hidden AND Control(i).ParentID = __UI_ParentMenu THEN
            EXIT DO
        END IF
    LOOP
    __UI_NextMenuItem = i
END FUNCTION

'---------------------------------------------------------------------------------
FUNCTION __UI_PreviousMenuItem (CurrentMenuItemControl)
    DIM i AS LONG
    i = CurrentMenuItemControl
    DO
        i = i - 1
        IF i < 1 THEN i = UBOUND(Control)
        IF i = CurrentMenuItemControl THEN EXIT DO
        IF Control(i).Type = __UI_Type_MenuItem AND NOT Control(i).Hidden AND Control(i).ParentID = __UI_ParentMenu THEN
            EXIT DO
        END IF
    LOOP
    __UI_PreviousMenuItem = i
END FUNCTION

'---------------------------------------------------------------------------------
SUB __UI_RefreshMenuBar
    'Calculate menu items' .Left and .Width
    DIM LeftOffset AS INTEGER, i AS LONG
    DIM TotalItems AS INTEGER, LastMenuItem AS LONG

    _FONT (Control(__UI_FormID).Font)

    FOR i = 1 TO UBOUND(Control)
        IF Control(i).ID > 0 THEN
            IF Control(i).Type = __UI_Type_MenuBar AND NOT Control(i).Hidden THEN
                TotalItems = TotalItems + 1
                IF TotalItems = 1 THEN
                    LeftOffset = __UI_MenuBarOffset
                ELSE
                    LeftOffset = LeftOffset + Control(LastMenuItem).Width
                END IF
                Control(i).Width = __UI_MenuBarOffset + __UI_PrintWidth(Caption(i)) + __UI_MenuBarOffset
                IF Control(i).Align = __UI_Left THEN
                    Control(i).Left = LeftOffset
                ELSE
                    Control(i).Left = Control(__UI_FormID).Width - 1 - __UI_MenuBarOffset - Control(i).Width
                END IF
                LastMenuItem = i
                __UI_NewMenuBarTextLeft = Control(i).Left + Control(i).Width
            END IF
        END IF
    NEXT
END SUB

'---------------------------------------------------------------------------------
'UTF conversion functions courtesy of Luke Ceddia.
'http://www.qb64.net/forum/index.php?topic=13981.msg121324#msg121324
FUNCTION FromCP437$ (source$)
    STATIC init&, table$(255)
    IF init& = 0 THEN
        DIM i&
        FOR i& = 0 TO 127
            table$(i&) = CHR$(i&)
        NEXT i&
        table$(7) = CHR$(226) + CHR$(151) + CHR$(143) 'UTF-8 e2978f
        table$(128) = CHR$(&HE2) + CHR$(&H82) + CHR$(&HAC)
        table$(128) = CHR$(&HC3) + CHR$(&H87)
        table$(129) = CHR$(&HC3) + CHR$(&HBC)
        table$(130) = CHR$(&HC3) + CHR$(&HA9)
        table$(131) = CHR$(&HC3) + CHR$(&HA2)
        table$(132) = CHR$(&HC3) + CHR$(&HA4)
        table$(133) = CHR$(&HC3) + CHR$(&HA0)
        table$(134) = CHR$(&HC3) + CHR$(&HA5)
        table$(135) = CHR$(&HC3) + CHR$(&HA7)
        table$(136) = CHR$(&HC3) + CHR$(&HAA)
        table$(137) = CHR$(&HC3) + CHR$(&HAB)
        table$(138) = CHR$(&HC3) + CHR$(&HA8)
        table$(139) = CHR$(&HC3) + CHR$(&HAF)
        table$(140) = CHR$(&HC3) + CHR$(&HAE)
        table$(141) = CHR$(&HC3) + CHR$(&HAC)
        table$(142) = CHR$(&HC3) + CHR$(&H84)
        table$(143) = CHR$(&HC3) + CHR$(&H85)
        table$(144) = CHR$(&HC3) + CHR$(&H89)
        table$(145) = CHR$(&HC3) + CHR$(&HA6)
        table$(146) = CHR$(&HC3) + CHR$(&H86)
        table$(147) = CHR$(&HC3) + CHR$(&HB4)
        table$(148) = CHR$(&HC3) + CHR$(&HB6)
        table$(149) = CHR$(&HC3) + CHR$(&HB2)
        table$(150) = CHR$(&HC3) + CHR$(&HBB)
        table$(151) = CHR$(&HC3) + CHR$(&HB9)
        table$(152) = CHR$(&HC3) + CHR$(&HBF)
        table$(153) = CHR$(&HC3) + CHR$(&H96)
        table$(154) = CHR$(&HC3) + CHR$(&H9C)
        table$(155) = CHR$(&HC2) + CHR$(&HA2)
        table$(156) = CHR$(&HC2) + CHR$(&HA3)
        table$(157) = CHR$(&HC2) + CHR$(&HA5)
        table$(158) = CHR$(&HE2) + CHR$(&H82) + CHR$(&HA7)
        table$(159) = CHR$(&HC6) + CHR$(&H92)
        table$(160) = CHR$(&HC3) + CHR$(&HA1)
        table$(161) = CHR$(&HC3) + CHR$(&HAD)
        table$(162) = CHR$(&HC3) + CHR$(&HB3)
        table$(163) = CHR$(&HC3) + CHR$(&HBA)
        table$(164) = CHR$(&HC3) + CHR$(&HB1)
        table$(165) = CHR$(&HC3) + CHR$(&H91)
        table$(166) = CHR$(&HC2) + CHR$(&HAA)
        table$(167) = CHR$(&HC2) + CHR$(&HBA)
        table$(168) = CHR$(&HC2) + CHR$(&HBF)
        table$(169) = CHR$(&HE2) + CHR$(&H8C) + CHR$(&H90)
        table$(170) = CHR$(&HC2) + CHR$(&HAC)
        table$(171) = CHR$(&HC2) + CHR$(&HBD)
        table$(172) = CHR$(&HC2) + CHR$(&HBC)
        table$(173) = CHR$(&HC2) + CHR$(&HA1)
        table$(174) = CHR$(&HC2) + CHR$(&HAB)
        table$(175) = CHR$(&HC2) + CHR$(&HBB)
        table$(176) = CHR$(&HE2) + CHR$(&H96) + CHR$(&H91)
        table$(177) = CHR$(&HE2) + CHR$(&H96) + CHR$(&H92)
        table$(178) = CHR$(&HE2) + CHR$(&H96) + CHR$(&H93)
        table$(179) = CHR$(&HE2) + CHR$(&H94) + CHR$(&H82)
        table$(180) = CHR$(&HE2) + CHR$(&H94) + CHR$(&HA4)
        table$(181) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HA1)
        table$(182) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HA2)
        table$(183) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H96)
        table$(184) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H95)
        table$(185) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HA3)
        table$(186) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H91)
        table$(187) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H97)
        table$(188) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H9D)
        table$(189) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H9C)
        table$(190) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H9B)
        table$(191) = CHR$(&HE2) + CHR$(&H94) + CHR$(&H90)
        table$(192) = CHR$(&HE2) + CHR$(&H94) + CHR$(&H94)
        table$(193) = CHR$(&HE2) + CHR$(&H94) + CHR$(&HB4)
        table$(194) = CHR$(&HE2) + CHR$(&H94) + CHR$(&HAC)
        table$(195) = CHR$(&HE2) + CHR$(&H94) + CHR$(&H9C)
        table$(196) = CHR$(&HE2) + CHR$(&H94) + CHR$(&H80)
        table$(197) = CHR$(&HE2) + CHR$(&H94) + CHR$(&HBC)
        table$(198) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H9E)
        table$(199) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H9F)
        table$(200) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H9A)
        table$(201) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H94)
        table$(202) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HA9)
        table$(203) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HA6)
        table$(204) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HA0)
        table$(205) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H90)
        table$(206) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HAC)
        table$(207) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HA7)
        table$(208) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HA8)
        table$(209) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HA4)
        table$(210) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HA5)
        table$(211) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H99)
        table$(212) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H98)
        table$(213) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H92)
        table$(214) = CHR$(&HE2) + CHR$(&H95) + CHR$(&H93)
        table$(215) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HAB)
        table$(216) = CHR$(&HE2) + CHR$(&H95) + CHR$(&HAA)
        table$(217) = CHR$(&HE2) + CHR$(&H94) + CHR$(&H98)
        table$(218) = CHR$(&HE2) + CHR$(&H94) + CHR$(&H8C)
        table$(219) = CHR$(&HE2) + CHR$(&H96) + CHR$(&H88)
        table$(220) = CHR$(&HE2) + CHR$(&H96) + CHR$(&H84)
        table$(221) = CHR$(&HE2) + CHR$(&H96) + CHR$(&H8C)
        table$(222) = CHR$(&HE2) + CHR$(&H96) + CHR$(&H90)
        table$(223) = CHR$(&HE2) + CHR$(&H96) + CHR$(&H80)
        table$(224) = CHR$(&HCE) + CHR$(&HB1)
        table$(225) = CHR$(&HC3) + CHR$(&H9F)
        table$(226) = CHR$(&HCE) + CHR$(&H93)
        table$(227) = CHR$(&HCF) + CHR$(&H80)
        table$(228) = CHR$(&HCE) + CHR$(&HA3)
        table$(229) = CHR$(&HCF) + CHR$(&H83)
        table$(230) = CHR$(&HC2) + CHR$(&HB5)
        table$(231) = CHR$(&HCF) + CHR$(&H84)
        table$(232) = CHR$(&HCE) + CHR$(&HA6)
        table$(233) = CHR$(&HCE) + CHR$(&H98)
        table$(234) = CHR$(&HCE) + CHR$(&HA9)
        table$(235) = CHR$(&HCE) + CHR$(&HB4)
        table$(236) = CHR$(&HE2) + CHR$(&H88) + CHR$(&H9E)
        table$(237) = CHR$(&HCF) + CHR$(&H86)
        table$(238) = CHR$(&HCE) + CHR$(&HB5)
        table$(239) = CHR$(&HE2) + CHR$(&H88) + CHR$(&HA9)
        table$(240) = CHR$(&HE2) + CHR$(&H89) + CHR$(&HA1)
        table$(241) = CHR$(&HC2) + CHR$(&HB1)
        table$(242) = CHR$(&HE2) + CHR$(&H89) + CHR$(&HA5)
        table$(243) = CHR$(&HE2) + CHR$(&H89) + CHR$(&HA4)
        table$(244) = CHR$(&HE2) + CHR$(&H8C) + CHR$(&HA0)
        table$(245) = CHR$(&HE2) + CHR$(&H8C) + CHR$(&HA1)
        table$(246) = CHR$(&HC3) + CHR$(&HB7)
        table$(247) = CHR$(&HE2) + CHR$(&H89) + CHR$(&H88)
        table$(248) = CHR$(&HC2) + CHR$(&HB0)
        table$(249) = CHR$(&HE2) + CHR$(&H88) + CHR$(&H99)
        table$(250) = CHR$(&HC2) + CHR$(&HB7)
        table$(251) = CHR$(&HE2) + CHR$(&H88) + CHR$(&H9A)
        table$(252) = CHR$(&HE2) + CHR$(&H81) + CHR$(&HBF)
        table$(253) = CHR$(&HC2) + CHR$(&HB2)
        table$(254) = CHR$(&HE2) + CHR$(&H96) + CHR$(&HA0)
        table$(255) = CHR$(&HC2) + CHR$(&HA0)
        init& = -1
    END IF
    FromCP437$ = UTF8$(source$, table$())
END FUNCTION

FUNCTION FromCP1252$ (source$)
    STATIC init&, table$(255)
    IF init& = 0 THEN
        DIM i&
        FOR i& = 0 TO 127
            table$(i&) = CHR$(i&)
        NEXT i&
        table$(7) = CHR$(226) + CHR$(151) + CHR$(143) 'UTF-8 e2978f
        table$(128) = CHR$(&HE2) + CHR$(&H82) + CHR$(&HAC)
        table$(130) = CHR$(&HE2) + CHR$(&H80) + CHR$(&H9A)
        table$(131) = CHR$(&HC6) + CHR$(&H92)
        table$(132) = CHR$(&HE2) + CHR$(&H80) + CHR$(&H9E)
        table$(133) = CHR$(&HE2) + CHR$(&H80) + CHR$(&HA6)
        table$(134) = CHR$(&HE2) + CHR$(&H80) + CHR$(&HA0)
        table$(135) = CHR$(&HE2) + CHR$(&H80) + CHR$(&HA1)
        table$(136) = CHR$(&HCB) + CHR$(&H86)
        table$(137) = CHR$(&HE2) + CHR$(&H80) + CHR$(&HB0)
        table$(138) = CHR$(&HC5) + CHR$(&HA0)
        table$(139) = CHR$(&HE2) + CHR$(&H80) + CHR$(&HB9)
        table$(140) = CHR$(&HC5) + CHR$(&H92)
        table$(142) = CHR$(&HC5) + CHR$(&HBD)
        table$(145) = CHR$(&HE2) + CHR$(&H80) + CHR$(&H98)
        table$(146) = CHR$(&HE2) + CHR$(&H80) + CHR$(&H99)
        table$(147) = CHR$(&HE2) + CHR$(&H80) + CHR$(&H9C)
        table$(148) = CHR$(&HE2) + CHR$(&H80) + CHR$(&H9D)
        table$(149) = CHR$(&HE2) + CHR$(&H80) + CHR$(&HA2)
        table$(150) = CHR$(&HE2) + CHR$(&H80) + CHR$(&H93)
        table$(151) = CHR$(&HE2) + CHR$(&H80) + CHR$(&H94)
        table$(152) = CHR$(&HCB) + CHR$(&H9C)
        table$(153) = CHR$(&HE2) + CHR$(&H84) + CHR$(&HA2)
        table$(154) = CHR$(&HC5) + CHR$(&HA1)
        table$(155) = CHR$(&HE2) + CHR$(&H80) + CHR$(&HBA)
        table$(156) = CHR$(&HC5) + CHR$(&H93)
        table$(158) = CHR$(&HC5) + CHR$(&HBE)
        table$(159) = CHR$(&HC5) + CHR$(&HB8)
        table$(160) = CHR$(&HC2) + CHR$(&HA0)
        table$(161) = CHR$(&HC2) + CHR$(&HA1)
        table$(162) = CHR$(&HC2) + CHR$(&HA2)
        table$(163) = CHR$(&HC2) + CHR$(&HA3)
        table$(164) = CHR$(&HC2) + CHR$(&HA4)
        table$(165) = CHR$(&HC2) + CHR$(&HA5)
        table$(166) = CHR$(&HC2) + CHR$(&HA6)
        table$(167) = CHR$(&HC2) + CHR$(&HA7)
        table$(168) = CHR$(&HC2) + CHR$(&HA8)
        table$(169) = CHR$(&HC2) + CHR$(&HA9)
        table$(170) = CHR$(&HC2) + CHR$(&HAA)
        table$(171) = CHR$(&HC2) + CHR$(&HAB)
        table$(172) = CHR$(&HC2) + CHR$(&HAC)
        table$(173) = CHR$(&HC2) + CHR$(&HAD)
        table$(174) = CHR$(&HC2) + CHR$(&HAE)
        table$(175) = CHR$(&HC2) + CHR$(&HAF)
        table$(176) = CHR$(&HC2) + CHR$(&HB0)
        table$(177) = CHR$(&HC2) + CHR$(&HB1)
        table$(178) = CHR$(&HC2) + CHR$(&HB2)
        table$(179) = CHR$(&HC2) + CHR$(&HB3)
        table$(180) = CHR$(&HC2) + CHR$(&HB4)
        table$(181) = CHR$(&HC2) + CHR$(&HB5)
        table$(182) = CHR$(&HC2) + CHR$(&HB6)
        table$(183) = CHR$(&HC2) + CHR$(&HB7)
        table$(184) = CHR$(&HC2) + CHR$(&HB8)
        table$(185) = CHR$(&HC2) + CHR$(&HB9)
        table$(186) = CHR$(&HC2) + CHR$(&HBA)
        table$(187) = CHR$(&HC2) + CHR$(&HBB)
        table$(188) = CHR$(&HC2) + CHR$(&HBC)
        table$(189) = CHR$(&HC2) + CHR$(&HBD)
        table$(190) = CHR$(&HC2) + CHR$(&HBE)
        table$(191) = CHR$(&HC2) + CHR$(&HBF)
        table$(192) = CHR$(&HC3) + CHR$(&H80)
        table$(193) = CHR$(&HC3) + CHR$(&H81)
        table$(194) = CHR$(&HC3) + CHR$(&H82)
        table$(195) = CHR$(&HC3) + CHR$(&H83)
        table$(196) = CHR$(&HC3) + CHR$(&H84)
        table$(197) = CHR$(&HC3) + CHR$(&H85)
        table$(198) = CHR$(&HC3) + CHR$(&H86)
        table$(199) = CHR$(&HC3) + CHR$(&H87)
        table$(200) = CHR$(&HC3) + CHR$(&H88)
        table$(201) = CHR$(&HC3) + CHR$(&H89)
        table$(202) = CHR$(&HC3) + CHR$(&H8A)
        table$(203) = CHR$(&HC3) + CHR$(&H8B)
        table$(204) = CHR$(&HC3) + CHR$(&H8C)
        table$(205) = CHR$(&HC3) + CHR$(&H8D)
        table$(206) = CHR$(&HC3) + CHR$(&H8E)
        table$(207) = CHR$(&HC3) + CHR$(&H8F)
        table$(208) = CHR$(&HC3) + CHR$(&H90)
        table$(209) = CHR$(&HC3) + CHR$(&H91)
        table$(210) = CHR$(&HC3) + CHR$(&H92)
        table$(211) = CHR$(&HC3) + CHR$(&H93)
        table$(212) = CHR$(&HC3) + CHR$(&H94)
        table$(213) = CHR$(&HC3) + CHR$(&H95)
        table$(214) = CHR$(&HC3) + CHR$(&H96)
        table$(215) = CHR$(&HC3) + CHR$(&H97)
        table$(216) = CHR$(&HC3) + CHR$(&H98)
        table$(217) = CHR$(&HC3) + CHR$(&H99)
        table$(218) = CHR$(&HC3) + CHR$(&H9A)
        table$(219) = CHR$(&HC3) + CHR$(&H9B)
        table$(220) = CHR$(&HC3) + CHR$(&H9C)
        table$(221) = CHR$(&HC3) + CHR$(&H9D)
        table$(222) = CHR$(&HC3) + CHR$(&H9E)
        table$(223) = CHR$(&HC3) + CHR$(&H9F)
        table$(224) = CHR$(&HC3) + CHR$(&HA0)
        table$(225) = CHR$(&HC3) + CHR$(&HA1)
        table$(226) = CHR$(&HC3) + CHR$(&HA2)
        table$(227) = CHR$(&HC3) + CHR$(&HA3)
        table$(228) = CHR$(&HC3) + CHR$(&HA4)
        table$(229) = CHR$(&HC3) + CHR$(&HA5)
        table$(230) = CHR$(&HC3) + CHR$(&HA6)
        table$(231) = CHR$(&HC3) + CHR$(&HA7)
        table$(232) = CHR$(&HC3) + CHR$(&HA8)
        table$(233) = CHR$(&HC3) + CHR$(&HA9)
        table$(234) = CHR$(&HC3) + CHR$(&HAA)
        table$(235) = CHR$(&HC3) + CHR$(&HAB)
        table$(236) = CHR$(&HC3) + CHR$(&HAC)
        table$(237) = CHR$(&HC3) + CHR$(&HAD)
        table$(238) = CHR$(&HC3) + CHR$(&HAE)
        table$(239) = CHR$(&HC3) + CHR$(&HAF)
        table$(240) = CHR$(&HC3) + CHR$(&HB0)
        table$(241) = CHR$(&HC3) + CHR$(&HB1)
        table$(242) = CHR$(&HC3) + CHR$(&HB2)
        table$(243) = CHR$(&HC3) + CHR$(&HB3)
        table$(244) = CHR$(&HC3) + CHR$(&HB4)
        table$(245) = CHR$(&HC3) + CHR$(&HB5)
        table$(246) = CHR$(&HC3) + CHR$(&HB6)
        table$(247) = CHR$(&HC3) + CHR$(&HB7)
        table$(248) = CHR$(&HC3) + CHR$(&HB8)
        table$(249) = CHR$(&HC3) + CHR$(&HB9)
        table$(250) = CHR$(&HC3) + CHR$(&HBA)
        table$(251) = CHR$(&HC3) + CHR$(&HBB)
        table$(252) = CHR$(&HC3) + CHR$(&HBC)
        table$(253) = CHR$(&HC3) + CHR$(&HBD)
        table$(254) = CHR$(&HC3) + CHR$(&HBE)
        table$(255) = CHR$(&HC3) + CHR$(&HBF)
        init& = -1
    END IF
    FromCP1252$ = UTF8$(source$, table$())
END FUNCTION

FUNCTION UTF8$ (source$, table$())
    DIM i AS LONG, dest$
    FOR i = 1 TO LEN(source$)
        dest$ = dest$ + table$(ASC(source$, i))
    NEXT i
    UTF8$ = dest$
END FUNCTION

