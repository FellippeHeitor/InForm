'INI Manager - Beta 4
'Fellippe Heitor, 2017 - fellippe@qb64.org - @fellippeheitor

Sub IniSortSection (file$, __section$)
    Shared IniCODE, IniLastKey$, IniWholeFile$
    Shared IniDisableAutoCommit

    ReDim Keys(1 To 100) As String
    Dim TotalKeys, tempValue$, i As Long, Backup$, CommitBackup

    If IniFormatSection$(__section$) = "[]" Then IniCODE = 15: Exit Sub

    Do
        tempValue$ = ReadSetting(file$, __section$, "")
        If Left$(IniINFO$, 7) = "ERROR: " Then Exit Sub
        If IniCODE = 10 Then Exit Do

        TotalKeys = TotalKeys + 1
        If TotalKeys > UBound(Keys) Then
            ReDim _Preserve Keys(1 To UBound(Keys) + 100) As String
        End If

        Keys(TotalKeys) = IniLastKey$ + "=" + tempValue$
    Loop

    ReDim _Preserve Keys(1 To TotalKeys) As String
    If IniArraySort(Keys()) = 0 Then IniCODE = 23: Exit Sub

    CommitBackup = IniDisableAutoCommit
    IniDisableAutoCommit = -1 'Prevent every minor change from being written to disk
    Backup$ = IniWholeFile$

    For i = 1 To TotalKeys
        IniDeleteKey file$, __section$, Left$(Keys(i), InStr(Keys(i), "=") - 1)
        If Left$(IniINFO$, 7) = "ERROR: " Then
            IniDisableAutoCommit = CommitBackup
            IniWholeFile$ = Backup$
            Exit Sub
        End If
    Next

    For i = 1 To TotalKeys
        WriteSetting file$, __section$, Left$(Keys(i), InStr(Keys(i), "=") - 1), Mid$(Keys(i), InStr(Keys(i), "=") + 1)
        If Left$(IniINFO$, 7) = "ERROR: " Then
            IniDisableAutoCommit = CommitBackup
            IniWholeFile$ = Backup$
            Exit Sub
        End If
    Next

    IniDisableAutoCommit = CommitBackup 'Restore writing to disk (or previously set state) and
    IniCommit '                          commit changes.

    IniCODE = 22
End Sub

Sub IniDeleteSection (file$, __section$)
    Shared IniNewFile$, IniCODE, currentIniFileName$
    Shared IniLF$, IniWholeFile$, currentIniFileLOF As _Unsigned Long

    IniLoad file$
    If IniCODE Then Exit Sub

    Dim a$
    IniCODE = 0
    a$ = IniGetSection(__section$)
    If IniCODE Then Exit Sub

    IniNewFile$ = Left$(IniWholeFile$, InStr(IniWholeFile$, a$) - 1)
    IniNewFile$ = IniNewFile$ + Mid$(IniWholeFile$, InStr(IniWholeFile$, a$) + Len(a$ + IniLF$))

    IniCommit
    IniCODE = 13
End Sub

Sub IniDeleteKey (file$, __section$, __key$)
    Shared IniPosition As _Unsigned Long, IniCODE
    Shared IniLF$, IniWholeFile$, IniSectionData$
    Shared IniLastSection$, IniLastKey$, IniNewFile$

    Dim tempValue$, section$, key$
    Dim FoundLF As _Unsigned Long

    IniCODE = 0

    'prepare variables for the write operation
    section$ = IniFormatSection$(__section$)
    If IniCODE Then Exit Sub

    key$ = LTrim$(RTrim$(__key$))
    If key$ = "" Then IniCODE = 12: Exit Sub
    IniLastKey$ = key$

    'Read the existing key to fill IniPosition
    tempValue$ = ReadSetting$(file$, section$, key$)
    If IniCODE > 0 And IniCODE <> 2 Then Exit Sub 'key not found

    'map IniPosition (set in the section block) to the global file position
    IniPosition = InStr(IniWholeFile$, IniSectionData$) + IniPosition - 1

    FoundLF = InStr(IniPosition, IniWholeFile$, IniLF$)
    If FoundLF = 0 Then FoundLF = Len(IniWholeFile$)

    IniNewFile$ = Left$(IniWholeFile$, IniPosition - 1) + Mid$(IniWholeFile$, FoundLF + Len(IniLF$))

    IniCommit
    IniCODE = 19
End Sub

Sub IniMoveKey (file$, __section$, __key$, __newsection$)
    'A move operation is a copy operation + a delete operation

    Shared IniCODE

    Dim tempValue$

    tempValue$ = ReadSetting(file$, __section$, __key$)
    If IniCODE > 0 And IniCODE <> 2 Then Exit Sub

    WriteSetting file$, __newsection$, __key$, tempValue$
    If IniCODE > 0 And IniCODE <> 2 And IniCODE <> 7 And IniCODE <> 9 Then Exit Sub

    IniDeleteKey file$, __section$, __key$
    If IniCODE = 19 Then IniCODE = 20
End Sub

Sub IniCommit
    Shared currentIniFileName$, IniWholeFile$, currentIniFileLOF As _Unsigned Long
    Shared IniNewFile$, IniDisableAutoCommit, IniCODE

    If currentIniFileName$ = "" Then IniCODE = 18: Exit Sub

    IniWholeFile$ = IniNewFile$
    currentIniFileLOF = Len(IniNewFile$)

    If Not IniDisableAutoCommit Then
        Dim fileNum As Integer
        fileNum = FreeFile

        Open currentIniFileName$ For Binary As #fileNum

        If Len(IniWholeFile$) < LOF(fileNum) Then
            Close fileNum
            Open currentIniFileName$ For Output As #fileNum: Close #fileNum
            Open currentIniFileName$ For Binary As #fileNum
        End If

        Put #fileNum, 1, IniNewFile$
        Close #fileNum
    End If
End Sub

Function IniGetSection$ (__section$)
    Shared IniPosition As _Unsigned Long, IniCODE, currentIniFileName$
    Shared IniLF$, IniWholeFile$, currentIniFileLOF As _Unsigned Long

    If currentIniFileName$ = "" Then IniCODE = 18: Exit Function
    If currentIniFileLOF = 0 Or Len(LTrim$(RTrim$(IniWholeFile$))) = 0 Then IniCODE = 17: Exit Function

    IniCODE = 0

    Dim section$, foundSection As _Unsigned Long, endSection As _Unsigned Long
    Dim i As _Unsigned Long, Bracket1 As _Unsigned Long, sectionStart As _Unsigned Long
    Dim inQuote As _Byte

    section$ = IniFormatSection$(__section$)
    If IniCODE Then Exit Function

    If section$ = "[]" Then
        'fetch the "global" section, if present
        sectionStart = InStr(IniWholeFile$, "[")
        If sectionStart = 0 Then IniGetSection$ = IniWholeFile$: Exit Function

        For i = sectionStart - 1 To 1 Step -1
            If Asc(IniWholeFile$, i) = 10 Then foundSection = i + 1: Exit For
            If Asc(IniWholeFile$, i) <> 32 Then Exit For
        Next

        If i = 0 Then foundSection = 1

        IniGetSection$ = Left$(IniWholeFile$, foundSection - 1)
    Else
        Do
            sectionStart = InStr(sectionStart + 1, LCase$(IniWholeFile$), LCase$(section$))
            If sectionStart = 0 Then IniCODE = 14: Exit Do

            'make sure it's a valid section header
            foundSection = 0
            For i = sectionStart - 1 To 1 Step -1
                If Asc(IniWholeFile$, i) = 10 Then foundSection = i + 1: Exit For
                If Asc(IniWholeFile$, i) <> 32 Then Exit For
            Next

            If i = 0 Then foundSection = 1

            If foundSection > 0 Then
                'we found it; time to identify where this section ends
                '(either another [section] or the end of the file
                Bracket1 = sectionStart
                checkAgain:
                Bracket1 = InStr(Bracket1 + 1, IniWholeFile$, "[")

                If Bracket1 > 0 Then
                    'found a bracket; check if it's inside quotes
                    inQuote = 0
                    For i = 1 To Bracket1 - 1
                        If Asc(IniWholeFile$, i) = 34 Then inQuote = Not inQuote
                    Next
                    If inQuote Then GoTo checkAgain

                    For i = Bracket1 - 1 To 1 Step -1
                        If Asc(IniWholeFile$, i) = 10 Then endSection = i + 1 - Len(IniLF$): Exit For
                        If Asc(IniWholeFile$, i) = 61 Then GoTo checkAgain 'bracket is inside a key's value
                        If i <= foundSection Then Exit For
                    Next
                    IniGetSection$ = Mid$(IniWholeFile$, foundSection, endSection - foundSection)
                Else
                    IniGetSection$ = Mid$(IniWholeFile$, foundSection)
                End If
                Exit Function
            End If
        Loop
    End If
End Function

Function IniFormatSection$ (__section$)
    Shared IniCODE

    Dim section$

    section$ = LTrim$(RTrim$(__section$))

    'sections are in the format [section name] - add brackets if not passed
    If Left$(section$, 1) <> "[" Then section$ = "[" + section$
    If Right$(section$, 1) <> "]" Then section$ = section$ + "]"

    If InStr(Mid$(section$, 2, Len(section$) - 3), "[") Or InStr(Mid$(section$, 2, Len(section$) - 3), "]") Then
        IniCODE = 15
        Exit Function
    End If

    IniFormatSection$ = section$
End Function

Function ReadSetting$ (file$, __section$, __key$)
    Shared IniLastSection$, IniLastKey$, IniWholeFile$, IniLF$
    Shared IniPosition As _Unsigned Long, IniSectionData$
    Shared IniCODE, IniAllowBasicComments
    Shared currentIniFileLOF As _Unsigned Long

    IniLoad file$
    If IniCODE Then Exit Function

    If currentIniFileLOF = 0 Or Len(LTrim$(RTrim$(IniWholeFile$))) = 0 Then IniCODE = 17: Exit Function

    Dim Equal As _Unsigned Long, tempValue$, key$, section$
    Dim Quote As _Unsigned Long, Comment As _Unsigned Long
    Dim i As Long, FoundLF As _Unsigned Long

    section$ = IniFormatSection(__section$)
    If IniCODE Then Exit Function

    'fetch the desired section$
    IniSectionData$ = IniGetSection(section$)
    If IniCODE > 0 And IniCODE <> 17 Then Exit Function

    If Len(IniSectionData$) = 0 And section$ <> "[]" Then IniCODE = 14: Exit Function

    IniLastSection$ = section$

    IniPosition = 0

    key$ = LTrim$(RTrim$(__key$))
    IniLastKey$ = ""
    If key$ = "" Then
        If section$ = "[]" Then IniSectionData$ = IniWholeFile$
        key$ = IniNextKey
        If IniCODE Then Exit Function
        If key$ = "" Then
            IniCODE = 10
            Exit Function
        End If
    End If

    If Left$(key$, 1) = ";" Or Left$(key$, 1) = "'" Or InStr(key$, "[") > 0 Or InStr(key$, "]") > 0 Or InStr(key$, "=") > 0 Then
        IniCODE = 12
        Exit Function
    End If

    IniLastKey$ = key$

    If IniPosition > 0 Then Equal = IniPosition: GoTo KeyFound
    CheckKey:
    IniPosition = InStr(IniPosition + 1, LCase$(IniSectionData$), LCase$(key$))

    If IniPosition > 0 Then
        'identify if this occurrence is actually a key and not part of a key name/value
        For i = IniPosition - 1 To 1 Step -1
            If Asc(IniSectionData$, i) = 10 Then Exit For
            If Asc(IniSectionData$, i) <> 10 And Asc(IniSectionData$, i) <> 32 Then
                'not a key
                GoTo CheckKey
            End If
        Next

        'check if there's nothing but an equal sign ahead
        For i = IniPosition + Len(key$) To Len(IniSectionData$)
            If Asc(IniSectionData$, i) = Asc("=") Then Exit For
            If Asc(IniSectionData$, i) <> Asc("=") And Asc(IniSectionData$, i) <> 32 Then
                'not the key
                GoTo CheckKey
            End If
        Next

        'so far so good; check if there is an assignment
        Equal = InStr(IniPosition, IniSectionData$, "=")
        KeyFound:
        FoundLF = InStr(IniPosition, IniSectionData$, IniLF$)

        If FoundLF > 0 Then
            If Equal > FoundLF Then GoTo CheckKey
        Else
            FoundLF = Len(IniSectionData$) + 1
            If Equal = 0 Then GoTo CheckKey
        End If

        tempValue$ = LTrim$(RTrim$(Mid$(IniSectionData$, Equal + 1, FoundLF - Equal - 1)))

        If Len(tempValue$) > 0 Then
            If Left$(tempValue$, 1) = Chr$(34) Then
                tempValue$ = Mid$(tempValue$, 2)
                Quote = InStr(tempValue$, Chr$(34))
                If Quote > 0 Then
                    tempValue$ = Left$(tempValue$, Quote - 1)
                End If
            Else
                If IniAllowBasicComments Then Comment = InStr(tempValue$, "'") 'BASIC style comments accepted
                If Comment = 0 Then Comment = InStr(tempValue$, ";")
                If Comment > 0 Then
                    tempValue$ = LTrim$(RTrim$(Left$(tempValue$, Comment - 1)))
                End If
            End If
        Else
            IniCODE = 2
        End If
    Else
        IniCODE = 3
        Exit Function
    End If

    ReadSetting$ = tempValue$
    IniLastSection$ = IniCurrentSection$
End Function

Function IniCurrentSection$
    Shared IniPosition As _Unsigned Long, IniSectionData$, IniWholeFile$

    Dim GlobalPosition As _Unsigned Long, i As _Unsigned Long
    Dim ClosingBracket As _Unsigned Long

    GlobalPosition = InStr(IniWholeFile$, IniSectionData$) + IniPosition - 1

    CheckSection:
    For i = GlobalPosition - 1 To 1 Step -1
        If Asc(IniWholeFile$, i) = Asc("[") Then
            GlobalPosition = i: Exit For
        End If
    Next

    If i = 0 Then IniCurrentSection$ = "[]": Exit Function

    'identify if this occurrence is actually a section header and not something else
    For i = GlobalPosition - 1 To 1 Step -1
        If Asc(IniWholeFile$, i) = 10 Then Exit For
        If Asc(IniWholeFile$, i) <> 10 And Asc(IniWholeFile$, i) <> 32 Then
            'not a section header
            GoTo CheckSection
        End If
    Next

    ClosingBracket = InStr(GlobalPosition, IniWholeFile$, "]")
    If ClosingBracket > 0 Then
        IniCurrentSection$ = Mid$(IniWholeFile$, GlobalPosition, ClosingBracket - GlobalPosition + 1)
    End If
End Function

Sub WriteSetting (file$, __section$, __key$, __value$)
    Shared IniPosition As _Unsigned Long, IniCODE, currentIniFileName$
    Shared IniLF$, IniWholeFile$, IniSectionData$
    Shared IniLastSection$, IniLastKey$, IniNewFile$

    Dim tempValue$, section$, key$, value$

    IniCODE = 0

    'prepare variables for the write operation
    section$ = IniFormatSection$(__section$)
    If IniCODE Then Exit Sub

    key$ = LTrim$(RTrim$(__key$))
    If key$ = "" Then IniCODE = 12: Exit Sub
    IniLastKey$ = key$

    value$ = LTrim$(RTrim$(__value$))
    If LTrim$(Str$(Val(value$))) <> value$ Then
        'if not a numeric value and value contains spaces, add quotation marks
        If InStr(value$, Chr$(32)) Then value$ = Chr$(34) + value$ + Chr$(34)
    End If

    'Read the existing key to fill IniPosition
    tempValue$ = ReadSetting$(file$, section$, key$)

    'map IniPosition (set in the section block) to the global file position
    IniPosition = InStr(IniWholeFile$, IniSectionData$) + IniPosition - 1

    If IniCODE = 1 Or IniCODE = 17 Then
        'file not found or empty; create a new one
        If file$ = "" Then file$ = currentIniFileName$
        If file$ = "" Then IniCODE = 21: Exit Sub

        currentIniFileName$ = file$

        If section$ <> "[]" Then
            IniNewFile$ = section$ + IniLF$
        End If

        IniNewFile$ = IniNewFile$ + key$ + "=" + value$

        IniCODE = 0
        IniCommit
        IniLoad file$
        If IniCODE = 0 Then IniCODE = 11
        IniLastSection$ = section$
        Exit Sub
    End If

    If IniCODE = 0 Or IniCODE = 2 Then 'key found and read back; write new value$
        If LCase$(IniLastSection$) = LCase$(section$) Then
            If LTrim$(RTrim$(__value$)) = tempValue$ And Len(LTrim$(RTrim$(__value$))) > 0 Then
                'identical values skip the writing routine
                IniCODE = 8
                Exit Sub
            End If

            Dim nextLine As _Unsigned Long
            nextLine = InStr(IniPosition + 1, IniWholeFile$, IniLF$)

            'create new file contents
            IniNewFile$ = Left$(IniWholeFile$, IniPosition - 1)
            IniNewFile$ = IniNewFile$ + key$ + "=" + value$

            If nextLine > 0 Then
                IniNewFile$ = IniNewFile$ + Mid$(IniWholeFile$, nextLine)
            End If

            IniCommit

            IniCODE = 4
        End If
    ElseIf IniCODE = 3 Or IniCODE = 14 Then 'Key not found, Section not found
        IniCODE = 0
        If LCase$(IniLastSection$) = LCase$(section$) Then
            'find this section$ in the current ini file;
            Dim Bracket1 As _Unsigned Long
            Dim beginSection As _Unsigned Long, endSection As _Unsigned Long
            Dim i As _Unsigned Long

            beginSection = 0
            endSection = 0

            CheckSection:
            beginSection = InStr(beginSection + 1, LCase$(IniWholeFile$), LCase$(section$))
            If beginSection = 0 Then GoTo CreateSection

            'identify if this occurrence is actually the section header and not something else
            For i = beginSection - 1 To 1 Step -1
                If Asc(IniWholeFile$, i) = 10 Then Exit For
                If Asc(IniWholeFile$, i) <> 10 And Asc(IniWholeFile$, i) <> 32 Then
                    'not the section header
                    GoTo CheckSection
                End If
            Next

            'we found it; time to identify where this section ends
            '(either another [section], a blank line or the end of the file
            Bracket1 = InStr(beginSection + 1, IniWholeFile$, "[")
            If Bracket1 > 0 Then
                For i = Bracket1 - 1 To 1 Step -1
                    If Asc(IniWholeFile$, i) = 10 Then endSection = i + 1 - Len(IniLF$): Exit For
                    If i <= beginSection Then Exit For
                Next
            End If

            If endSection > 0 Then
                'add values to the end of the specified section$
                IniNewFile$ = Left$(IniWholeFile$, endSection - 1)
                IniNewFile$ = IniNewFile$ + key$ + "=" + value$ + IniLF$
                If Mid$(IniWholeFile$, endSection, 2) <> IniLF$ Then IniNewFile$ = IniNewFile$ + IniLF$
                IniNewFile$ = IniNewFile$ + Mid$(IniWholeFile$, endSection)
            Else
                'add values to the end of the file
                IniNewFile$ = IniWholeFile$
                If Right$(IniNewFile$, 2) = IniLF$ Then
                    IniNewFile$ = IniNewFile$ + key$ + "=" + value$
                Else
                    IniNewFile$ = IniNewFile$ + IniLF$ + key$ + "=" + value$
                End If
            End If

            IniCommit

            If IniCODE = 0 Then IniCODE = 7
            Exit Sub
        Else
            CreateSection:
            IniNewFile$ = IniWholeFile$
            If section$ = "[]" Then GoTo WriteAtTop

            If Right$(IniNewFile$, 4) = IniLF$ + IniLF$ Then
                IniNewFile$ = IniNewFile$ + section$ + IniLF$ + key$ + "=" + value$ + IniLF$
            ElseIf Right$(IniNewFile$, 2) = IniLF$ Then
                IniNewFile$ = IniNewFile$ + IniLF$ + section$ + IniLF$ + key$ + "=" + value$ + IniLF$
            Else
                IniNewFile$ = IniNewFile$ + IniLF$ + IniLF$ + section$ + IniLF$ + key$ + "=" + value$ + IniLF$
            End If

            IniCommit

            If IniCODE = 0 Then IniCODE = 9 Else IniCODE = 16
            Exit Sub
        End If

        'if not found, key$=value$ is written to the beginning of the file
        WriteAtTop:
        IniNewFile$ = key$ + "=" + value$ + IniLF$
        If Left$(LTrim$(IniWholeFile$), 1) = "[" Then IniNewFile$ = IniNewFile$ + IniLF$
        IniNewFile$ = IniNewFile$ + IniWholeFile$

        IniCommit

        IniCODE = 5
    End If
End Sub

Sub IniSetForceReload (state As _Byte)
    Shared IniForceReload
    If state Then
        IniForceReload = -1
    Else
        IniForceReload = 0
    End If
End Sub

Sub IniClose
    Shared IniDisableAutoCommit, currentIniFileName$

    IniDisableAutoCommit = 0
    IniCommit

    currentIniFileName$ = ""
End Sub

Sub IniLoad (file$)
    Shared IniCODE, currentIniFileName$, IniLF$, IniWholeFile$
    Shared currentIniFileLOF As _Unsigned Long
    Shared IniForceReload

    Dim fileNum As Integer

    'Error messages are returned with IniCODE
    'Error descriptions can be fetched with function IniINFO$
    IniCODE = 0

    If file$ <> "" And currentIniFileName$ <> file$ Then currentIniFileName$ = ""

    If IniForceReload And Len(currentIniFileName$) > 0 Then
        file$ = currentIniFileName$
        currentIniFileName$ = ""
    End If

    'Passing an empty file$ is allowed if user already
    'passed a valid file in this session.
    If currentIniFileName$ = "" Then
        'initialization
        If _FileExists(file$) Then
            currentIniFileName$ = file$

            'Load file into memory
            fileNum = FreeFile
            Open currentIniFileName$ For Binary As #fileNum
            currentIniFileLOF = LOF(fileNum)
            IniWholeFile$ = Space$(currentIniFileLOF)
            Get #fileNum, 1, IniWholeFile$
            Close #fileNum

            'Check if this ini file uses CRLF or LF
            If InStr(IniWholeFile$, Chr$(13)) Then IniLF$ = Chr$(13) + Chr$(10) Else IniLF$ = Chr$(10)

            'IF RIGHT$(IniWholeFile$, 2) <> IniLF$ THEN IniWholeFile$ = IniWholeFile$ + IniLF$
        Else
            IniFileNotFound:
            IniCODE = 1

            $If WIN Then
                IniLF$ = Chr$(13) + Chr$(10)
            $Else
                    IniLF$ = CHR$(10)
            $End If
            Exit Sub
        End If
    ElseIf Not _FileExists(currentIniFileName$) Then
        currentIniFileName$ = ""
        GoTo IniFileNotFound
    End If
End Sub

Function IniNextKey$
    Shared IniCODE, IniLF$, currentIniFileName$, IniSectionData$
    Shared IniPosition As _Unsigned Long
    Static lastDataBlock$, position As _Unsigned Long, tempLF$

    If currentIniFileName$ = "" Then IniCODE = 18: Exit Function

    If IniSectionData$ <> lastDataBlock$ Then
        position = 0
        lastDataBlock$ = IniSectionData$

        'data blocks must end with a line feed for parsing purposes
        If Right$(IniSectionData$, Len(IniLF$)) <> IniLF$ Then tempLF$ = IniLF$ Else tempLF$ = ""
    End If

    Dim Equal As _Unsigned Long, tempKey$

    FindKey:
    Equal = InStr(position, IniSectionData$ + tempLF$, "=")
    If Equal = 0 Then position = 0: Exit Function

    tempKey$ = LTrim$(RTrim$(Mid$(IniSectionData$ + tempLF$, position + 1, Equal - position - 1)))

    If InStr(tempKey$, Chr$(10)) > 0 Then tempKey$ = Mid$(tempKey$, InStr(tempKey$, Chr$(10)) + 1)

    Do While Left$(tempKey$, Len(IniLF$)) = IniLF$
        tempKey$ = Mid$(tempKey$, Len(IniLF$) + 1)
        position = position + Len(IniLF$)
    Loop

    position = InStr(position, IniSectionData$ + tempLF$, IniLF$) + 1

    If Left$(tempKey$, 1) = ";" Or Left$(tempKey$, 1) = "'" Or InStr(tempKey$, "[") > 0 Or InStr(tempKey$, "]") > 0 Or InStr(tempKey$, "=") > 0 Then
        GoTo FindKey
    End If

    IniNextKey$ = tempKey$
    IniPosition = Equal
End Function

Function IniNextSection$ (file$)
    Shared IniCODE, IniLF$, IniWholeFile$

    Static sectionStart As _Unsigned Long

    IniLoad file$
    If Left$(IniINFO$, 6) = "ERROR:" Then Exit Function

    IniCODE = 0

    Dim foundSection As _Unsigned Long, endSection As _Unsigned Long
    Dim i As _Unsigned Long, Bracket1 As _Unsigned Long, Bracket2 As _Unsigned Long

    FindNext:
    sectionStart = InStr(sectionStart + 1, IniWholeFile$, "[")
    If sectionStart = 0 Then IniCODE = 24: Exit Function

    'make sure it's a valid section header
    foundSection = 0
    For i = sectionStart - 1 To 1 Step -1
        If Asc(IniWholeFile$, i) = 10 Then foundSection = i + 1: Exit For
        If Asc(IniWholeFile$, i) <> 32 Then GoTo FindNext
    Next

    If i = 0 Then foundSection = 1

    If foundSection > 0 Then
        'we found it; time to identify where this section ends
        '(either another [section] or the end of the file
        Bracket2 = InStr(sectionStart + 1, IniWholeFile$, "]")
        If Bracket2 = 0 Then IniCODE = 24: Exit Function
        Bracket1 = InStr(sectionStart + 1, IniWholeFile$, "[")
        If Bracket1 > 0 Then
            For i = Bracket1 - 1 To 1 Step -1
                If Asc(IniWholeFile$, i) = 10 Then endSection = i + 1 - Len(IniLF$): Exit For
                If i <= foundSection Then Exit For
            Next
            IniNextSection$ = Mid$(IniWholeFile$, foundSection, Bracket2 - foundSection + 1)
        Else
            IniNextSection$ = Mid$(IniWholeFile$, foundSection, Bracket2 - foundSection + 1)
            IniCODE = 24
            sectionStart = 0
        End If
    Else
        IniCODE = 24
    End If
End Function

Function IniINFO$
    Shared IniCODE
    Select Case IniCODE
        Case 0: IniINFO$ = "Operation successful"
        Case 1: IniINFO$ = "ERROR: File not found"
        Case 2: IniINFO$ = "Empty value"
        Case 3: IniINFO$ = "ERROR: Key not found"
        Case 4: IniINFO$ = "Key updated"
        Case 5: IniINFO$ = "Global key created"
        Case 7: IniINFO$ = "Key created in existing section"
        Case 8: IniINFO$ = "No changes applied (same value)"
        Case 9: IniINFO$ = "New section created; key created"
        Case 10: IniINFO$ = "No more keys"
        Case 11: IniINFO$ = "File created; new key added"
        Case 12: IniINFO$ = "ERROR: Invalid key"
        Case 13: IniINFO$ = "Section deleted"
        Case 14: IniINFO$ = "ERROR: Section not found"
        Case 15: IniINFO$ = "ERROR: Invalid section"
        Case 16: IniINFO$ = "New section created; existing key moved"
        Case 17: IniINFO$ = "ERROR: Empty file"
        Case 18: IniINFO$ = "ERROR: No file open"
        Case 19: IniINFO$ = "Key deleted"
        Case 20: IniINFO$ = "Key moved"
        Case 21: IniINFO$ = "ERROR: Invalid file name/path"
        Case 22: IniINFO$ = "Section sorted"
        Case 23: IniINFO$ = "No changes applied; section already sorted"
        Case 24: IniINFO$ = "No more sections"
        Case Else: IniINFO$ = "ERROR: <invalid error code>"
    End Select
End Function

'Written in BASIC by Luke Ceddia for ide_methods.bas (QB64)
'After Cormen, Leiserson, Rivest & Stein "Introduction To Algoritms" via Wikipedia
'Adapted for use in .INI Manager
Function IniArraySort%% (arr() As String)
    Dim i&, x$, j&, moves&

    For i& = LBound(arr) + 1 To UBound(arr)
        x$ = arr(i&)
        j& = i& - 1
        While j& >= LBound(arr)
            If arr(j&) <= x$ Then Exit While
            moves& = moves& + 1
            arr$(j& + 1) = arr$(j&)
            j& = j& - 1
        Wend
        arr$(j& + 1) = x$
    Next i&

    'Returns -1 (true) if any changes were made
    IniArraySort%% = moves& > 0
End Function

